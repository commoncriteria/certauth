<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<PP xmlns="https://niap-ccevs.org/cc/v1" name="Protection Profile for Certification Authorities"
    xmlns:h="http://www.w3.org/1999/xhtml" boilerplate="yes">

  <!-- <inline-comment color='green'> Hello World QQQQ </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World QQQQ </inline-comment> -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>Protection Profile for Certification Authorities</PPTitle>
      <PPVersion>2.1</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2017-12-01</PPPubDate>
      <Keywords>Certification Authority</Keywords>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2014-05-16</date>
      <subject>Initial draft</subject>
    </entry>
    <entry>
      <version>1.1</version>
      <date>2016-07-07</date>
      <subject>Formatting updates and changes based on TC feedback</subject>
    </entry>
    <entry>
      <version>1.2</version>
      <date>2016-10-26</date>
      <subject>Updates based on additional TC feedback and internal review</subject>
    </entry>
    <entry>
      <version>2.0</version>
      <date>2016-10-28</date>
      <subject>Second draft</subject>
    </entry>
    <entry>
      <version>2.1</version>
      <date>2017-12-01</date>
      <subject>Updates based on first use in evaluation</subject>
    </entry>
    <entry>
      <version>2.1x</version>
      <date>2020-07-10</date>
      <subject>Converted to XML</subject>
    </entry>
  </RevisionHistory>

  <chapter title="Introduction" id="int">
    <section title="Overview" id="ppoverview">
      	Certification Authorities (CAs), and the infrastructure they support, form the basis for one of the primary
     	 mechanisms for providing strong assurance of identity in online transactions. The widely placed trust in
	CAs is at the heart of security mechanisms used to protect business and financial transactions online.
	Notably, protocols using Transport Layer Security (TLS) rely on certificates issued by CAs to identify and
	authenticate servers and clients in web transactions. Governments around the world rely on CAs to
	identify parties involved in transactions with them. <h:br/><h:br/>

	However, historical high-profile security breaches at major CAs trusted by widely used operating systems
	and browsers have highlighted both the critical role CAs play in securing electronic transactions, as well
	as the need to strongly protect them from malicious attacks. Analyses have revealed that these security
	breaches were often the result of insufficient security controls being in place on the computer systems
	and networks at these CAs, and were sometimes exacerbated by weak record keeping. Third-party
	auditing programs, whose role it was to verify that proper security controls were in place, were not
	sufficient to identify these lapses in security.<h:br/><h:br/>
	    
	This Protection Profile (PP) describing security requirements for a Certification Authority is intended to
	provide a minimal, baseline set of requirements that are targeted at mitigating well defined and described
	threats. These requirements support CA operations performed in accordance with the National Institute
	of Standards and Technologies (NIST) Interagency or Internal Report (IR) 7924 (Second Draft), Reference
	Certificate Policy, May 2014, referred to as the “NIST IR.” <h:br/><h:br/>

	The following sections provide both Common Criteria and technology terms used in this PP.
    </section>

    <tech-terms>
	<term abbr='AES' full="Advanced Encryption Standard"/>
      	<term abbr='API' full="Application Programming Interface"/>
      	<term full="Administrator">
		The Administrator is responsible for management activities, including configuration of
		the CA and its security functions.
      	</term>
      	<term full="Authorized Organizational Representative" abbr="AOR">
		An optional privileged user role which is delegated authority by the Certification
		Authority Staff or RA Staff to manage a restricted set of certificates associated to
		devices belonging to a particular organization
      	</term>
	<term abbr='CBC' full="Cipher Block Chaining"/>
    	<term abbr='CC' full="Common Criteria"/>
	<term abbr='CCM' full="Counter with CBC-Message Authentication Code"/>
	<term abbr='CCMP' full="CCM Protocol"/>
	<term abbr='CCTL' full="Common Criteria Test Lab"/>
      	<term full="Certificate Profile">
		A set of configuration parameters that defines everything associated with a type of
		certificate, in particular the contents (fields and extensions) of the generated
		certificate.
      	</term>
      	<term full="Certification Authority" abbr="CA">
		The set of hardware, software, firmware, or some combination thereof, that issues,
		revokes, and manages public key certificates and certificate status information.
      	</term>
      	<term abbr='CESG' full="Communications-Electronics Security Group"/>
      	<term abbr='CMC' full="Certificate Management over CMS">
		Certificate Management over CMS. A standard certificate enrollment protocol.
	</term>
      	<term abbr='CMS' full="Cryptographic Message Syntax"/>
      	<term abbr='CN' full="Common Names"/>
      	<term full="Compromise">
		The unauthorized disclosure, modification, substitution or use of sensitive data
		(including plaintext cryptographic keys and other CSPs).
      	</term>
      	<term full="Confidentiality">
		The property that sensitive information is not disclosed to unauthorized individuals,
		entities or processes.
      	</term>
      	<term abbr='CRL' full="Certificate Revocation List"/>
      	<term abbr='CSA' full="Computer Security Act"/>
	<term abbr='CSS' full="Certificate Status Server"/>
      	<term full="Critical Security Parameter" abbr="CSP">
		Security-related information (e.g., secret and private cryptographic keys,
		authentication data such as passwords and PINs) appearing in plaintext or otherwise
		unprotected form and whose disclosure or modification can compromise the security
		of a CA or the security of the information protected by the CA.
      	</term>
      	<term full="Cryptographic key">
		A parameter used in conjunction with a cryptographic algorithm that determines: <h:br/>	
		<h:ul>
			<h:li>the transformation of plaintext data into ciphertext data,</h:li>
			<h:li>the transformation of ciphertext data into plaintext data,</h:li>
			<h:li>a digital signature computed from data,</h:li>
			<h:li>a keyed hash computed from data,</h:li>
			<h:li>the verification of a digital signature computed from data,</h:li>
			<h:li>an authentication code computed from data, or an exchange agreement of a shared secret.</h:li>
		</h:ul>
      	</term>
      	<term abbr="DAR" full="Data At Rest"/>
      	<term abbr='DEK' full="Data Encryption Key">
		A key used to encrypt data-at-rest.
	</term>
      	<term abbr='DES' full="Data Encryption Standard"/>
      	<term full="Digital Signature">
		A non-forgeable transformation of data that allows proof of the source (with
		nonrepudiation) and verification of the integrity of that data.
	</term>
      	<term abbr='DH' full="Diffie-Hellman"/>   
      	<term abbr='DHE' full="Diffie-Hellman Key Exchange"/>
      	<term abbr='DKM' full="Derived Keying Material"/>
      	<term abbr='DNS' full="Domain Name System"/>
      	<term abbr='DRBG' full="Deterministic Random Bit Generator"/>
      	<term abbr='DSA' full="Digital Signature Algorithm"/>
      	<term abbr='DSS' full="Digital Signature Standard"/>
      	<term abbr='DT' full="Date/Time Vector"/>
      	<term abbr='DTLS' full="Datagram Transport Layer Security"/>
      	<term abbr='EAP' full="Extensible Authentication Protocol"/>
      	<term abbr='ECC' full="Elliptic Curve Cryptography"/>
      	<term abbr='ECDHE' full="Elliptic Curve Diffie-Hellman Ephemeral"/>
      	<term abbr='ECDSA' full="Elliptic Curve Digital Signature Algorithm"/>
      	<term abbr='EEPROM' full="Electrically Erasable Programmable Read-Only Memory"/>
      	<term full="Encrypted key">
		A cryptographic key that has been encrypted with a key encrypting key, a PIN or a
		password in order to disguise the value of the underlying plaintext key.
	</term>
      	<term full="Error detection code" abbr="EDC">
		A code computed from data and comprised of redundant bits of information designed
		to detect, but not correct, unintentional changes in the data.
	</term>
      	<term abbr='ESP' full="Encapsulating Security Payload (IPsec)"/>
      	<term abbr='EST' full="Enrollment over Secure Transport"/>
      	<term abbr='FFC' full="Finite-Field Cryptography"/>
      	<term abbr='FIPS' full="Federal Information Processing Standards"/>
      	<term abbr='GCM' full="Galois/Counter Mode"/>
      	<term abbr='HMAC' full="Hash-based Message Authentication Code"/>
      	<term abbr='HSM' full="Hardware Security Module"/>
      	<term abbr='HTTP' full="Hypertext Transfer Protocol"/>
      	<term abbr='HTTPS' full="Hypertext Transfer Protocol Secure"/>
      	<term abbr='I and A' full="Identification and Authentication"/>
      	<term abbr='IETF' full="Internet Engineering Task Force"/>
      	<term abbr='IKE' full="Internet key Exchange"/>
      	<term full="Integrity">
		The property that sensitive data has not been modified or deleted in an unauthorized
		and undetected manner.
	</term>
      	<term abbr='IP' full="Internet Protocol"/>
      	<term abbr='IPsec' full="Internet Protocol Security"/>
      	<term abbr='ISO' full="International Organization for Standardization"/>
      	<term abbr='IT' full="Information Technology"/>
      	<term abbr='ITSEF' full="Information Technology Security Evaluation Facility"/>
      	<term abbr='IUT' full="Implementation Under Test"/>
      	<term abbr='IV' full="Initialization Vector"/>
      	<term abbr='KAT' full="Known Answer Tests"/>
      	<term abbr='KDF' full="Key Derivation Function"/>
      	<term abbr='KEK' full="Key Encryption Key">
		A key used to encrypt other keys, such as DEKs, or storage that contains keys.
	</term>
      	<term full="Key sharing">
		A multi-party computation (MPC) mechanism that allows two or more parties, each
		with key components, to jointly produce a plaintext key without revealing any of the
		key components.
	</term>
      	<term abbr='KW' full="Key Wrap"/>
      	<term abbr='KWP' full="Key Wrapping with Padding"/>
      	<term abbr='MAC' full="Message Authentication Code"/>
      	<term abbr='MODP' full="Modular Exponential"/>
      	<term abbr='NAT' full="Network Address Translation"/>
      	<term abbr='NIAP' full="National Information Assurance Partnership"/>
      	<term abbr='NIST' full="National Institute of Standards and Technology"/>
      	<term abbr='NPE' full="Non-person Entity"/>
      	<term abbr='NTP' full="Network Time Protocol"/>
      	<term abbr='OCSP' full="Online Certificate Status Protocol"/>
      	<term abbr='OID' full="Object Identifier"/>
      	<term abbr='OMB' full="Office of Management and Budget"/>
      	<term abbr='PGP' full="Pretty Good Privacy"/>
      	<term abbr='PKI' full="Public Key Infrastructure"/>
      	<term abbr='PKV' full="Public Key Verification"/>
      	<term abbr='PP' full="Protection Profile"/>
      	<term full="Private key">
		A cryptographic key used with a public key cryptographic algorithm, uniquely
		associated with an entity, and not made public.
	</term>
      	<term full="Privileged user">
		An individual with access and login privileges on the CA.
	</term>
      	<term full="Public key">
		A cryptographic key used with a public key cryptographic algorithm, uniquely
		associated with an entity, and which may be made public. (Public keys are not
		considered CSPs.)
	</term>
      	<term full="Public key certificate">
		A set of data that unambiguously identifies an entity, contains the entity's public key,
		is digitally signed by a trusted party, and binds the public key to the entity.
	</term>
      	<term full="Public key (asymmetric) cryptographic algorithm">
		A cryptographic algorithm that uses two related keys, a public key and a private key.
		The two keys have the property that, given the public key, it is computationally
		infeasible to derive the private key.
	</term>
      	<term abbr='RAM' full="Random Access Memory"/>
      	<term abbr='RBG' full="Random Bit Generator"/>
      	<term abbr='rDSA' full="RSA Digital Signature Algorithm"/>
      	<term full="Registration Authority" abbr="RA">
		The set of hardware, software, firmware, or some combination thereof that is used to
		validate the identity of a subscriber before instructing the CA to manipulate a
		certificate on the subscriber’s behalf.
	</term>
      	<term abbr='RFC' full="Request for Comment"/>
      	<term abbr='RNG' full="Random Number Generator"/>
      	<term abbr='RNGVS' full="Random Number Generator Validation System"/>
      	<term full="Root Encryption Key" abbr='REK'>
		A key tied to hardware that is used to encrypt other keys such as KEKs.
	</term>
      	<term abbr='RSA' full="Rivest Shamir Adleman"/>
      	<term abbr='SA' full="Security Association (IPsec)"/>
      	<term abbr='SAN' full="Subject Alternative Name"/>
      	<term abbr='SAR' full="Security Assurance Requirement"/>
      	<term full="Secret key">
		A cryptographic key used with a secret key cryptographic algorithm, uniquely
		associated with one or more entities, and which shall not be made public. The use of
		the term "secret" in this context does not imply a classification level rather the term
		implies the need to protect the key from disclosure or substitution.
	</term>
      	<term full="Secret key (symmetric) cryptographic algorithm">
		A cryptographic algorithm that uses a single, secret key for both encryption and
		decryption.
	</term>
      	<term abbr='SFR' full="Security Functional Requirement"/>
      	<term abbr='SHA' full="Secure Hash Algorithm"/>
      	<term full="Shared secret">
		A token used by the CMC protocol to help provide identity proofing. 
	</term>
      	<term abbr='S/MIME' full="Secure/Multi-purpose Internet Mail Extensions"/>
      	<term abbr='SIP' full="Session Initiation Protocol"/>
      	<term abbr='SNMP' full="Simple Network Management Protocol"/>
      	<term abbr='SSH' full="Secure Shell"/>
      	<term abbr='SSL' full="Secure Sockets Layer"/>
      	<term abbr='ST' full="Security Target"/>
      	<term full="Subscriber">
		A human or machine entity that is bound to one or more certificates maintained by
		the CA.
	</term>
      	<term abbr='SWID' full="Software Identification"/>
      	<term abbr='TLS' full="Transport Layer Security"/>
      	<term abbr='TOE' full="Target of Evaluation"/>
      	<term abbr='TPM' full="Trusted Platform Module"/>
      	<term full="Trust Anchor Database">
		A list of trusted root Certification Authority certificates.
	</term>
      	<term abbr='TSF' full="TOE Security Function"/>
      	<term abbr='TSS' full="TOE Summary Specification"/>
      	<term abbr='URI' full="Uniform Resource Identifier"/>
      	<term abbr='URL' full="Uniform Resource Locator"/>
      	<term abbr='USB' full="Universal Serial Bus"/>
      	<term abbr='XCCDF' full="eXtensible Configuration Checklist Description Format"/>
      	<term abbr='XOR' full="Exclusive Or"/>
    </tech-terms> 
	  
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
	    A CA system is an entity that issues and manages public-key certificates. The CA is the primary component
	of a public key infrastructure (PKI), which consists of programs, data formats, procedures, communication
	protocols, security policies, and public key cryptographic mechanisms working together to enable people
	in various locations to establish trust through secure communications. To achieve this goal, a PKI may
	provide some or all of the following security management services:<h:br/>
	    <h:ul>
		    <h:li>Key generation/storage</h:li>
		    <h:li>Certificate generation, modification, re-key, renewal, and distribution</h:li>
		    <h:li>Certificate revocation list (CRL) generation and distribution</h:li>
		    <h:li>Key escrow and recovery</h:li>
		    <h:li>Directory management of certificate related items</h:li>
		    <h:li>Certificate token initialization/programming/management</h:li>
		    <h:li>System management functions (e.g., security audit, configuration management, archive)</h:li>
	    </h:ul>
	    A CA performs a number of certificate management functions besides certificate issuance:<h:br/>
	    <h:ul>
		    <h:li><h:b>Re-issuance:</h:b>A CA handles re-issuance of certificates when they expire, 
			    since certificates have a finite validity period. Reissuance may be renewal of the
			    current public key; rekey with a new public key; or modification to other data in 
			    the public key certificate.</h:li>
		    <h:li><h:b>Revocation:</h:b> The CA is also responsible for indicating, when notified 
			    via a subscriber or privileged user, that a certificate should no longer be used 
			    or relied upon; this is referred to as revocation. For example, a certificate 
			    needs to be revoked if an individuals’ private key is compromised or if the CA 
			    issued the certificate to the wrong person. Identifiers of revoked certificates
			    are stored on an electronic list called a certificate revocation list (CRL). The
			    CRL is digitally signed by the CA and published to a repository accessible by 
			    the relying parties. The CRL is used to compare against certificates to ensure a
			    certificate is not invalid when used. Alternatively, a CA can provide a 
			    Certificate Status Service (CSS) that provides revocation status responses to
			    subscribers and relying parties. The CSS’ revocation status information may be
			    based on certificate history information from the CA, a CRL from the CA, or a
			    CRL retrieved from a repository. A CA must be able to provide revocation status,
			    but either approach is acceptable. </h:li>
		    <h:li><h:b>Distribution:</h:b>The CA handles the publishing of certificates and CRLs
			    that it issues to a repository. The repository enables subscribers and relying
			    parties to obtain subscriber certificates and CRLs to perform functions such as 
			    encrypting emails and data to recipients or verifying signatures on transactions.
			    Typically, CRL location is advertised in the certificate itself as an HTTP pointer
			    to allow the relying parties to obtain the CRL.</h:li>
		    <h:li><h:b>Storage:</h:b> The CA keeps a history of a subscriber’s previously issued and
			    revoked certificates.</h:li>
	    </h:ul>
	There are a number of optional functions that a CA may perform. For example, a CA may issue CRLs 
	or may provide a CSS that responds to certificate status requests from subscribers and relying
	parties. A CA may generate public/private key pairs for subscribers, usually for encryption; this function may be
	delegated to a different PKI component. In some cases, a CA will escrow private keys for encryption 
	certificates, a function typically delegated to a key escrow PKI component. If a CA handles subscriber key
	generation and escrow, it should also keep a history of subscriber keys to support cases where an old
	encryption key may be required to decrypt data. A CA may also be responsible for verifying subscriber
	identities who request to interact with the CA. If the CA does not provide this functionality directly, it is
	expected to interface with a registration authority (RA) that does.<h:br/><h:br/>

	The CA can be internal to an organization or it can be managed by an outside organization dedicated to
	this type of service. If the CA is internal, the organization controls the CA server, configures how the
	subscriber identity proofing takes place during registration, maintains the certificates, and revokes
	certificates when necessary. If the CA is a third party organization specifically designed to serve as a CA,
	then other individuals and companies pay them to supply this service. Depending on the nature of
	agreement and service, the organization may be fully or to some extent involved in subscriber registration,
	certificate management, and revocation.	    
	    
      <subsection title="TOE Boundary" id="TOEboundary">
	Figure 1 below illustrates an example PKI architecture; this architecture is for illustration only and is not
	meant to represent requirements for an actual deployment. Within a PKI, the CA is responsible for issuing
	and managing public-key certificates for subjects to prove their identities; these subjects are typically
	called subscribers and can be people, devices, applications, or servers. A public-key certificate is a
	credential that contains the public key for that subscriber bound with other identifying information using
	a CA’s digital signature. To obtain a certificate, subscribers register with the PKI. Depending on how the
	PKI is designed, this is done either directly through the CA itself or optionally through a third-party RA
	which verifies the requester’s identity before the request is handled by the CA. Part of the registration
	process is the generation of a private/public key pair that occurs either at the CA, at the RA or (typically)
	on the subscriber’s system. If not generated by the CA, the public key is transmitted to the CA during the
	registration process. The CA signs the certificate with a digital signature (using its own private key) that
	binds the public key and other identifying information to the subscriber. In this capacity, the CA acts as a
	trusted third party by asserting the authenticity of the subscriber, the public key, and the binding of the
	subscriber to the public key. This allows relying parties (e.g., individuals or applications) to verify and trust
	signatures or assertions made by the subscriber using the private key that corresponds to the public key
	contained in the certificate. This also allows the relying parties to use the public key in the certificate to
	carry out encrypted communication with the subscriber.<h:br/><h:br/>
	      
	<figure entity="images/CertAuth-TOE.png" title="TOE Boundary in Example PKI Architecture" id="toe"/>
	      
	<h:br/><h:br/>This PP defines requirements only for CA system component(s) that issue and manage public key
	certificates and certificate status information, to include interfaces to components not under the control
	of the ST author that may be required to meet these requirements as shown in Figure 1. <h:br/><h:br/>
	      
	While the functionality that the TOE is obligated to implement (in response to the described threat
	environment) is discussed in detail in later sections, it is useful to give a brief description here. Compliant
	TOEs will provide security functionality that addresses threats to the TOE and implements policies that
	are imposed by law or regulation. Compliant TOEs must authenticate and validate certificate requests and
	control the use of its private signature key(s) so that only valid, properly authorized certificates are issued;
	it must validate and authenticate all revocation requests and provide accurate and up-to-date revocation
	status information; and it must validate any requests for optional services (key generation, key escrow or
	recovery), authenticate and determine authorization for such services according to applicable security
	policies and ensure that only authorized services are performed. The TOE must protect itself from
	common network attacks, limit the damage that could occur by privileged user error, and be able to
	recover from damage that can occur via either network attacks or human error, to include reconstitution
	of functionality necessary to maintain any and all certificates issued for the duration of their validity
	periods in the case of TOE failure. The TOE must also offer auditing of a set of events that are associated
	with security-relevant activity on the TOE, and these events must be retained for long-term storage even
	in the event of a failure of the TOE. Audit storage should be reliable and extensible, although this could
	be on a device that is distinct from the TOE. The TOE must offer some protection for common network
	denial of service attacks and must also provide the ability to verify the source of updates to components
	of the TOE. <h:br/><h:br/>
	      
	A CA system which is the Target of Evaluation (TOE) of this PP may be a software package installed on a
	general computing platform, a set of software packages installed on distributed general computing
	platforms, or an integrated device including hardware and software. This PP makes no distinction in these
	cases and imposes requirements on the TOE and/or Operational Environment to ensure that the
	requirements can be met in any of these cases. Whenever the TOE depends on external components to
	meet the requirements of this PP, those components are included in the Operational Environment and
	the AGD_OPE and AGD_PRE sections of this PP describe requirements on the TOE to document these
	dependencies. For example, the TOE provides cryptographic operations involved in the signing of
	certificates, which may depend on an external cryptographic module such as a trusted computing module
	(TPM) on the general computing platform or an external hardware security module (HSM).<h:br/><h:br/>

	The CA manages certificates by providing validity information, either via the issuance of Certificate
	Revocation Lists (CRLs) or via a Certificate Status Service (CSS) that provides real-time responses to validity
	queries. Because a CA acts as a trusted third party, and because recommended operations require
	independent monitoring of its operations, the CA must maintain an audit record that can be reviewed.
	This audit record may be maintained on the TOE, or on an external audit server.<h:br/><h:br/>
	
	The threats and security objectives apply generally to a CA system. In order to provide consistent
	requirements for all TOEs, the requirements in Section 5 include selections to indicate where external
	components may be used. The TOE platform, external cryptographic modules, external audit servers, and
	external CSS that are not under the control of the security target (ST) author may be used to meet the
	respective TOE requirements. In these cases, the ST author must provide evidence that the requirement
	is met by the selected component. When external components are selected, this evidence is typically via
	validation against an appropriate PP.<h:br/><h:br/>
	      
	It is intended that the set of requirements in this PP is limited in scope in order to promote quicker, less
	costly evaluations that provide some value to end users.
     </subsection>
    </section>

    <section title="Use Cases" id="usecases">
	Requirements in this PP are designed to address the security problem for CA systems. The fundamental
	usage of a CA system will not differ drastically based on the functionality it provides. Different TOEs may
	vary because of the inclusion or exclusion of the various optional, objective, and selection-based
	requirements defined in the annexes of this PP but they are all expected to be used in the same general
	manner for the same general purposes. 
    </section>
  </chapter>

  <chapter title="Conformance Claims" id="cclaims"/>
	
  <chapter title="Security Problem Description" id="spd">
	  
  The security problem is described in terms of the threats that the OS is expected to address, assumptions
  about the operational environment, and any organizational security policies that the OS
  is expected to enforce.

  <section title="Threats" id="threats">
      <threats>

	<threat name="T.PRIVILEGED_USER_ERROR">
          <description> A privileged user or non-person entity (NPE) improperly exercises or adversely affects
		  the TOE, resulting in unauthorized services, ineffective security mechanisms, or unintended
		  circumvention of security mechanisms.</description>
          <objective-refer ref="O.AUDIT_LOSS_RESPONSE">
            <rationale>The TOE will respond to possible loss of audit records when audit trail storage is full
		or nearly full by restricting auditable events.</rationale>
          </objective-refer>
          <objective-refer ref="O.AUDIT_PROTECTION">
            <rationale>The TOE will protect audit records against unauthorized access, modification, or
		deletion to ensure accountability of user actions.</rationale>
          </objective-refer>
          <objective-refer ref="O.SESSION_LOCK">
            <rationale>The TOE will provide mechanisms that mitigate the risk of unattended sessions
		being hijacked.</rationale>
          </objective-refer>
          <objective-refer ref="O.TOE_ADMINISTRATION">
            <rationale>The TOE will provide mechanisms to ensure that only privileged users are able to log in
		and configure the TOE, and provide protections for logged-in users. The TOE will
		ensure that administrative responsibilities are separated across different roles in order
		to mitigate the impact of improper administrative activities or unauthorized
		administrative access.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.TSF_FAILURE">
          <description> Security mechanisms of the TOE may fail, leading to a compromise of the TSF.</description>
          <objective-refer ref="O.TSF_SELF_TEST">
            <rationale>The TOE will provide the capability to test some subset of its security functionality to
		ensure it is operating properly. The TOE will provide integrity protection to detect
		modifications to firmware, software, and archived data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNAUTHENTICATED_TRANSACTIONS">
          <description> Relying parties within an information system depend on the TOE to accurately bind subjects
		  to their credentials for use in authenticating and providing privacy for transactions. Without 
		  the proper binding provided by the TOE, relying parties cannot ensure adequate access controls
		  on sensitive information, ensure transactional integrity, ensure proper accountability, and/or
		  enforce nonrepudiation. </description>
          <objective-refer ref="O.CERTIFICATES">
            <rationale>The TSF must ensure that certificates, certificate revocation lists, and certificate
		status information are valid.</rationale>
          </objective-refer>
          <objective-refer ref="O.CONFIGURATION_MANAGEMENT">
            <rationale>The TOE will conduct configuration management to assure identification of
		system connectivity (software, hardware, and firmware), and components (software,
		hardware, and firmware), auditing of configuration data, and controlling changes
		to configuration items.</rationale>
          </objective-refer>
          <objective-refer ref="O.INTEGRITY_PROTECTION">
            <rationale>The TOE will provide appropriate integrity protection for TSF data and software and
		any user data stored by the TOE. </rationale>
          </objective-refer>
          <objective-refer ref="O.NON_REPUDIATION">
            <rationale>The TOE will prevent a subscriber from avoiding accountability for sending a
		message by providing evidence that the subscriber sent the message; and control
		communications from unknown source. </rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNAUTHORIZED_ACCESS">
          <description> A malicious user, process, or external IT entity intentionally circumvents TOE security
		  mechanisms. </description>
          <objective-refer ref="O.PROTECTED_COMMUNICATIONS">
            <rationale>The TOE will provide protected communication channels for administrators,
		other parts of a distributed TOE, and authorized IT entities. The TOE will protect
		data assets when they are being transmitted to and from the TOE, including through
		intervening untrusted components. </rationale>
          </objective-refer>
          <objective-refer ref="O.SESSION_LOCK">
            <rationale>The TOE will provide mechanisms that mitigate the risk of unattended sessions
		being hijacked. </rationale>
          </objective-refer>
          <objective-refer ref="O.TOE_ADMINISTRATION">
            <rationale>The TOE will provide mechanisms to ensure that only privileged users are able to log in
		and configure the TOE, and provide protections for logged-in users. The TOE will
		ensure that administrative responsibilities are separated across different roles in order
		to mitigate the impact of improper administrative activities or unauthorized
		administrative access. </rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNAUTHORIZED_UPDATE">
          <description> A malicious party attempts to supply the end user with an update to the product that
		  may compromise the security features of the TOE.</description>
          <objective-refer ref="O.VERIFIABLE_UPDATES">
            <rationale>The TOE will provide the capability to help ensure that any updates to the TOE can be
		verified by the administrator to be unaltered and from a trusted source.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.UNDETECTED_ACTIONS">
          <description> Remote users or external IT entities may take actions that adversely affect the security of the TOE.</description>
          <objective-refer ref="O.AUDIT_LOSS_RESPONSE">
            <rationale>The TOE will respond to possible loss of audit records when audit trail storage is full
		or nearly full by restricting auditable events</rationale>
          </objective-refer>
          <objective-refer ref="O.AUDIT_PROTECTION">
            <rationale>The TOE will protect audit records against unauthorized access, modification, or
		deletion to ensure accountability of user actions.</rationale>
          </objective-refer>
          <objective-refer ref="O.SYSTEM_MONITORING">
            <rationale>The TOE will provide the capability to generate audit data and send those data to
		an external IT entity. The TOE will record in audit records: date and time of action and
		the entity responsible for the action.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.USER_DATA_REUSE">
          <description>A malicious user, process, or external IT entity may gain access to user data that is not cleared
		  when resources are reallocated.</description>
          <objective-refer ref="O.RESIDUAL_INFORMATION_CLEARING">
            <rationale>The TOE will ensure that any data contained in a protected resource is not available
		when the resource is reallocated.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.WEAK_CRYPTO">
          <description>A weak hash or signature scheme may be compromised by an attacker and used to apply
		  integrity checks to malicious content so that it appears legitimate.</description>
          <objective-refer ref="O.PROTECTED_COMMUNICATIONS">
            <rationale>The TOE will provide protected communication channels for administrators, other parts of
		a distributed TOE, and authorized IT entities. The TOE will protect data assets when they are
		being transmitted to and from the TOE, including through intervening untrusted components.</rationale>
          </objective-refer>
          <objective-refer ref="O.VERIFIABLE_UPDATES">
            <rationale>The TOE will provide the capability to help ensure that any updates to the TOE can be
		verified by the administrator to be unaltered and from a trusted source.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
	  
    <section title="Assumptions" id="assumptions">
      <assumptions>
        <assumption name="A.NO_GENERAL_PURPOSE">
          <description>It is assumed that there are no general-purpose computing capabilities (e.g., compilers
		  or user applications) available on the TOE, other than those services necessary for the
		  operation, administration and support of the TOE. </description>
          <objective-refer ref="OE.NO_GENERAL_PURPOSE">
            <rationale>There are no general-purpose computing capabilities (e.g., compilers or user
		applications) available on the TOE, other than those services necessary for the
		operation, administration and support of the TOE.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.PHYSICAL">
          <description>Physical security, commensurate with the value of the TOE and the data it contains, is 
		  assumed to be provided by the environment.</description>
          <objective-refer ref="OE.PHYSICAL">
            <rationale>Physical security, commensurate with the value of the TOE and the data it contains, is
		provided by the environment.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.TRUSTED_ADMIN">
          <description> TOE Administrators are assumed to follow and apply all administrator guidance in
		  a trusted manner.</description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The administrator of the TOE is not careless, willfully negligent or hostile, and
		administers the software within compliance of the applied enterprise security policy.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </section>
	  
    <section title="Organizational Security Policies" id="OSPs">
      <OSPs>
        <OSP name="P.ACCESS_BANNER">
          <description>The TOE shall display an initial banner describing restrictions of use, legal agreements,
		  or any other appropriate information to which users consent by accessing the TOE.</description>
          <objective-refer ref="O.DISPLAY_BANNER">
            <rationale>The TOE will display an advisory warning regarding use of the TOE.</rationale>
          </objective-refer>
        </OSP>
      </OSPs>
    </section>
  </chapter>
	
  <chapter title="Security Objectives" id="obj">
    <section title="Security Objectives for the TOE" id="SecurityObjectivesTOE">
	In some cases, an objective is addressed only by requirements that are either selection-based or
	optional. In these cases, if none of those requirements are included in the ST, the ST author does not
	include that objective in the ST.
      <SOs>
        <SO name="O.AUDIT_LOSS_RESPONSE">
          <description> The TOE will respond to possible loss of audit records when audit trail storage is full 
		  or nearly full by restricting auditable events.</description>
          <addressed-by>FAU_ADP_EXT.1</addressed-by><rationale>X</rationale>
          <addressed-by>FAU_STG.4</addressed-by><rationale>X</rationale>
        </SO>
        <SO name="O.AUDIT_PROTECTION">
          <description>The TOE will protect audit records against unauthorized access, modification, or deletion
		  to ensure accountability of user actions.</description>
            <addressed-by>FAU_ADP_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FAU_STG.1(1) (selection-based)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FAU_STG.1(2) (selection-based)</addressed-by><rationale>For reasons </rationale>
            <addressed-by> FAU_STG.1(2) (selection-based)</addressed-by><rationale>For reasons </rationale>
        </SO>
        <SO name="O.CERTIFICATES">
          <description>The TSF must ensure that certificates, certificate revocation lists, and certificate status
		  information are valid.</description>
            <addressed-by>FDP_CER_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_CER_EXT.2</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_CER_EXT.3</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_CER_EXT.4 (optional)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_CRL_EXT.1 (selection-based)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_CSI_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_OCSPG_EXT.1 (selection-based)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_SDP_EXT.1 (selection-based)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FDP_STG_EXT.1 (optional)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_CMCS_EXT.1 (selection-based)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_ESTS_EXT.1 (selection-based)</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_X509_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_X509_EXT.2</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_NPE_EXT.1 (optional)</addressed-by><rationale>For reasons </rationale>
        </SO>
        <SO name="O.CONFIGURATION_MANAGEMENT">
          <description>The TOE will conduct configuration management to assure identification of system connectivity
		(software, hardware, and firmware), and components (software, hardware, and firmware), auditing
		of configuration data, and controlling changes to configuration items.
          </description>
          <addressed-by>FDP_CER_EXT.1, FDP_CER_EXT.4 (optional), FDP_CRL_EXT.1 (selection-based), FDP_OCSPG_EXT.1 (selection-based), FMT_MOF.1(1), FMT_MOF.1(2), FMT_MOF.1(3),
		FMT_MOF.1(4), FMT_MOF.1(5), FMT_MTD.1, FPT_NPE_EXT.1 (optional)</addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.DISPLAY_BANNER">
          <description>The TOE will display an advisory warning regarding use of the TOE.</description>
          <addressed-by>
            FTA_TAB.1
          </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.INTEGRITY_PROTECTION">
          <description>The TOE will provide appropriate integrity protection for TSF data and software and any user data
		stored by the TOE.</description>
          <addressed-by>
            FCS_CDP_EXT.1, FCS_CKM_EXT.5 (selection-based), FDP_ITT.1 (selection-based),
		FPT_ITT.1 (selection-based), FPT_TST_EXT.1 (optional), FPT_TST_EXT.2 (optional)
          </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.NON_REPUDIATION">
          <description>The TOE will prevent a subscriber from avoiding accountability for sending a message by providing
		evidence that the subscriber sent the message; and control communications from unknown source.
		</description>
          <addressed-by>
            FCO_NRO_EXT.2, FCO_NRR_EXT.2 (selection-based), FIA_CMCC_EXT.1 (selectionbased), FIA_ESTC_EXT.1 (selection-based)
          </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.PROTECTED_COMMUNICATIONS">
          <description>The TOE will provide protected communication channels for administrators, other parts of a
		distributed TOE, and authorized IT entities. The TOE will protect data assets when they are being
		transmitted to and from the TOE, including through intervening untrusted components.
		</description>
          <addressed-by>
            FCS_CDP_EXT.1, FCS_CKM.1 (selection-based), FCS_CKM.2 (selection-based),
		FCS_CKM_EXT.1(1) (selection-based), FCS_CKM_EXT.1(2) (selection-based), FCS_CKM_EXT.1(3)
		(selection-based), FCS_CKM_EXT.1(4) (selection-based), FCS_CKM_EXT.4 (selection-based),
		FCS_CKM_EXT.7 (selection-based), FCS_CKM_EXT.8 (selection-based), FCS_COP.1(1) (selectionbased), 
		FCS_COP.1(2) (selection-based), FCS_COP.1(3) (selection-based), FCS_COP.1(4) (selectionbased), FCS_COP.1(5) (optional), FCS_HTTPS_EXT.1 (selection-based), FCS_IPSEC_EXT.1 (selectionbased), FCS_RBG_EXT.1 (selection-based), FCS_STG_EXT.1, FCS_TLSC_EXT.2 (selection-based),
		FCS_TLSS_EXT.1 (selection-based), FDP_ITT.1 (selection-based), FIA_PSK_EXT.1 (selection-based),
		FPT_ITT.1 (selection-based), FPT_KST_EXT.1, FPT_KST_EXT.2, FPT_SKP_EXT.1, FPT_SKY_EXT.1
		(optional), FPT_SKY_EXT.2 (selection-based), FTP_ITC.1 (selection-based), FTP_TRP.1          </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.RECOVERY">
          <description>The TOE will have the capability to store and recover to a previous state at the direction of the
		administrator (e.g., provide support for archival and recovery capabilities).
		</description>
          <addressed-by>
            FCS_CDP_EXT.1, FCS_CKM_EXT.6 (selection-based), FPT_FLS.1, FPT_RCV.1   </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.RESIDUAL_INFORMATION_CLEARING">
          <description>The TOE will ensure that any data contained in a protected resource is not available when the resource
		is reallocated.
		</description>
          <addressed-by>
            FDP_RIP.1  
	  </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.SESSION_LOCK">
          <description>The TOE will provide mechanisms that mitigate the risk of unattended sessions being hijacked.
		</description>
          <addressed-by>
            FTA_SSL_EXT.1 (optional) 
	  </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.SYSTEM_MONITORING">
          <description>The TOE will provide the capability to generate audit data. The TOE will record in audit records: date
		and time of action and the entity responsible for the action.
		</description>
          <addressed-by>
             FAU_ADP_EXT.1, FAU_GEN.1, FAU_GEN.2, FAU_SAR.1 (selection-based), FAU_SAR.3
		(selection-based), FAU_GCR_EXT.1, FAU_SCR_EXT.1 (selection-based), FAU_SEL.1 (selection-based),
		FAU_STG_EXT.1 (selection-based), FIA_UIA_EXT.1, FPT_STM.1
	  </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.TOE_ADMINISTRATION">
          <description>The TOE will provide mechanisms to ensure that only privileged users are able to log in and configure
		the TOE, and provide protections for logged-in users. The TOE will ensure that administrative
		responsibilities are separated across different roles in order to mitigate the impact of improper
		administrative activities or unauthorized administrative access.
		</description>
          <addressed-by>
             FIA_AFL.1 (selection-based), FIA_PMG_EXT.1 (selection-based), FIA_UAU.7 (selectionbased), FIA_UAU_EXT.1, FIA_UIA_EXT.1, FMT_MOF.1(1), FMT_MOF.1(2), FMT_MOF.1(3),
		FMT_MOF.1(4), FMT_MOF.1(5), FMT_MTD.1, FMT_SMF.1, FMT_SMR.2, FPT_APW_EXT.1 (selectionbased), FTA_SSL_EXT.1 (optional), FTA_SSL.3 (optional), FTA_SSL.4
	  </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.TSF_SELF_TEST">
          <description>The TOE will provide integrity protection to detect modifications to firmware, software, and archived
		data.
		</description>
          <addressed-by>
              FPT_TST_EXT.1 (optional), FPT_TST_EXT.2 (optional)
		<note role="application">If this SFR is not claimed by the TOE, this functionality is expected to be satisfied by
			the environmental objective OE.TRUSTED_PLATFORM.</note>
	  </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.VERIFIABLE_UPDATES">
          <description>The TOE will provide the capability to help ensure that any updates to the TOE can be verified by the
		administrator to be unaltered and from a trusted source.
		</description>
          <addressed-by>
              FCS_CDP_EXT.1, FCS_COP.1(2) (selection-based), FIA_X509_EXT.2, FPT_TUD_EXT.1
	  </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
      </SOs>
    </section>
	  
    <section title="Security Objectives for the Operational Environment"
      id="SecurityObjectivesTOEorEnvironment">Note that PP allows the ST author in some cases to select if the TSF or Operational Environment is
	invoked to perform some function. There are several Objectives for the Operational Environment that
	correspond to those SFRs, covering the case where the ST author selects the item pertaining to the
	Operational Environment being invoked to perform the function. If the TOE performs all such functions
	(that is, the Operational Environment-related selection is not chosen), then the corresponding Objective
	for the Operational Environment will need to be removed by the ST author.
      <SOEs>
        <SOE name="OE.PLATFORM">
          <description>The OS relies on being installed on trusted
            hardware.</description>
        </SOE>
        <SOE name="OE.CERT_REPOSITORY">
          <description>The Operational Environment provides a certificate repository for storage of certificates (and
		optionally CRLs) issued by the TSF.
		</description>
        </SOE>
        <SOE name="OE.CERT_REPOSITORY_SEARCH">
          <description>The Operational Environment provides the ability to search a certificate repository for specific
		certificate fields in certificates issued by the TSF and return the certificate and an identifier for the
		certificate that can be used to search the audit trail for events related to that certificate. </description>
        </SOE>
        <SOE name="OE.AUDIT_RETENTION">
          <description>The Operational Environment provides mechanisms for retention of audit records for both normal
	and extended retention periods.</description>
        </SOE>
        <SOE name="OE.AUDIT_REVIEW">
          <description>The Operational Environment provides a mechanism for the review of specified audit data.</description>
        </SOE>
        <SOE name="OE.AUDIT_STORAGE">
          <description>The Operational Environment provides a mechanism for the storage of specified audit data.</description>
        </SOE>
        <SOE name="OE.CRYPTOGRAPHY">
          <description>The Operational Environment provides cryptographic services that can be invoked by the TSF in order
		to perform security functionality.</description>
        </SOE>
        <SOE name="OE.KEY_ARCHIVAL">
          <description>The Operational Environment provides the ability to use split knowledge procedures to enforce twoparty control to export keys necessary to resume CA functionality if the TSF should fail.
		</description>
        </SOE>
        <SOE name="OE.NO_GENERAL_PURPOSE">
          <description>There are no general-purpose computing capabilities (e.g., compilers or user applications) available
		on the TOE, other than those services necessary for the operation, administration and support of the
		TOE.</description>
        </SOE>
        <SOE name="OE.PHYSICAL">
          <description>Physical security, commensurate with the value of the TOE and the data it contains, is provided by the
		environment.</description>
        </SOE>
        <SOE name="OE.PUBLIC_KEY_PROTECTION">
          <description>The Operational Environment provides protection for specified public keys associated with CA
		functions.</description>
        </SOE>
        <SOE name="OE.SESSION_PROTECTION_LOCAL">
          <description>The Operational Environment provides the ability to lock or terminate local administrative sessions.</description>
        </SOE>
        <SOE name="OE.SESSION_PROTECTION_REMOTE">
          <description>The Operational Environment provides the ability to lock or terminate remote administrative sessions.</description>
        </SOE>
        <SOE name="OE.TOE_ADMINISTRATION">
          <description>The Operational Environment provides specified management capabilities required for the overall
		operation of a Certificate Authority, and the ability to restrict access to a subset of the capabilities as
		specified in the ST. </description>
        </SOE>
        <SOE name="OE.TRUSTED_ADMIN">
          <description>The administrator of the TOE is not careless, willfully negligent or hostile, and administers the
		software within compliance of the applied enterprise security policy.</description>
        </SOE>
        <SOE name="OE.TRUSTED_PLATFORM">
          <description>The operating system on which the TOE has been installed is securely configured, regularly patched,
		and not subject to unauthorized access.</description>
        </SOE>
      </SOEs></section>
	  
    <section title="Security Objectives Rationale" id="SOR">
      <!-- This section is populated by boilerplates.xsl in transforms. -->
      </section>
  </chapter>

  <chapter title="Security Requirements" id="req">The Security Functional Requirements (SFRs) included in this section are derived
	  from Part 2 of the <h:i>Common Criteria for Information Technology Security Evaluation, Version 3.1, Revision 4</h:i>, with
	  additional extended functional components.<h:br/><h:br/>
	  The CC defines operations on Security Functional Requirements: assignments, selections, assignments
		within selections and refinements. This document uses the following font conventions to identify the
		operations defined by the CC: <h:br/><h:br/>
		<h:ul>
      		<h:li>
	        <h:b>Refinement</h:b> operation (denoted by <h:b>bold text</h:b>): is used to add details to a
        	requirement, and thus further restricts a requirement.</h:li>
      		<h:li>
        	<h:b>Selection</h:b> (denoted by <h:i>italicized text</h:i>): is used to select one or more options
        	provided by the [CC] in stating a requirement.</h:li>
      		<h:li>
        	<h:b>Assignment</h:b> operation (denoted by <h:span class="assignable-content">italicized text</h:span>): is used to assign a
        	specific value to an unspecified parameter, such as the length of a password. Showing the
        	value in square brackets indicates assignment.</h:li>
      		<h:li>
        	<h:b>Iteration</h:b> operation: are identified with a number inside parentheses (e.g.
        		"(1)")</h:li>
      		<h:li>
        	<h:b>Extended SFRs</h:b>  are identified by having a label “_EXT” appended to the SFR name. </h:li>
    		</h:ul>

    <section title="TOE Security Functional Requirements" id="SFRs">
	    The Security Functional Requirements (SFRs) included in this section are derived from Part 2 of the
	Common Criteria for Information Technology Security Evaluation, Version 3.1, Revision 4, with
	additional extended functional components. The following table lists the SFRs that are defined in this
	section as well as any auditable events associated with their enforcement. The following table presents
	the baseline (mandatory) requirements for compliant TOEs, and also used to specify whether the TSF or
	OE is responsible for actions pertaining to a particular audit event associated with the SFRs (this is done
	in FAU_ADP_EXT.1 below). If the TOE relies on the Operational Environment to provide some of the
	TOE’s auditing functionality, the ST author is expected to identify whether each of the auditable events
	for the claimed SFRs are implemented by the TSF or by the Operational Environment, along with the
	specific environmental component that provides the auditing functionality if applicable. The ST author
	should refer to the right-most column of Table 4 through Table 6 and complete these fields accordingly.<h:br/><h:br/>

	<!-- For some reason, the audit table is here. But why not? -->
	<!-- The CA audit table actually has 5 fields, but the fifth one is not used.
	     The fourth field reports the retention requirement for the records. This seems like it should not be
	     a PP requirement since it is operational and not really a product feature.  -->
	    
      <subsection title="Auditable Events for Mandatory SFRs" id="ss-audit-events">
	<audit-table table="mandatory"/>
      </subsection>
	      
        <!--                             -->
	<!-- Class: FAU: Security Audit  -->
        <!--                             -->
      <subsection title="Class: Security Audit (FAU)" id="fau">
	       
	 <!--               -->     
 	 <!-- FAU_ADP_EXT.1 -->
	 <!--               -->
         <f-component cc-id="fau_adp_ext.1" name="Audit Dependencies">
          <f-element>
            <title> The TSF shall implement audit functionality and 
		    <selectables>
			    <selectable>interface with auditing function(s) in the Operational Environment</selectable>
			    <selectable>no additional audit functionality</selectable>
		    </selectables>
		    in order to perform audit operations on the following audit data: 
		    <assignable>Auditable events in Table 4 through Table 6 that require persistent storage</assignable>. 
            </title>
            <note role="application">
		  If any audit functions (e.g. storage, review) are accomplished by the TOE
		communicating over a network connection with a physically external audit server,
		then the ST author must include FTP_ITC.1 with "audit server" selected. If the TOE
		relies on the Operational Environment to provide some of the TOE’s auditing
		functionality, the ST author is expected to identify whether each of the auditable
		events for the claimed SFRs are implemented by the TOE or by the Operational
		Environment, along with the specific environmental component that provides the
		auditing functionality if applicable. The ST author should refer to the right-most
		column of Table 4 through Table 6 and complete these fields accordingly<h:br/><h:br/>
		    
		   If any audit review is performed by an auditor through an interface provided by
		the TSF, then FAU_SAR.1 and FAU_SAR.3 in Annex B.2 will be included in the ST by
		the ST author.<h:br/><h:br/>

		If any audit pre-selection is performed by an auditor through an interface provided
		by the TSF, then FAU_SEL.1 in Annex B.2 will be included in the ST by the ST author.<h:br/><h:br/>
		    
		Audit records stored within the TOE boundary that are generated due to audit
		events marked “extended” in tables 4, 5, and 6 that are included in the ST, then
		FAU_STG.1(2) will be included in the ST by the ST author.<h:br/><h:br/>   

		If the TSF initiates the storage of the audit data (that is, it generates audit data
		that will be stored either by the TOE or the OE), then FAU_STG_EXT.1 will be
		included in the ST by the ST Author. <h:br/><h:br/>
		    
		Audit records for the TSF are divided into two sets of events, whose retention
		periods might be significantly different operationally. Generally, information
		necessary to maintain an issued certificate or to determine the circumstances of
		a certificate issuance is required to be available at least as long as the validity of
		an issued certificate, and perhaps longer according the statutes, laws, or policies
		applicable to the issuance and intended use of a particular certificate. Other audit
		data is typically retained only to support normal operations. The ‘Retention’
		column in Table 4 (as well as Tables 5 and 6 for the optional and selection-based
		SFRs) indicates whether the audit record is intended to be used for ‘normal’
		(shorter-term) or ‘extended’ (longer-term) purposes.<h:br/><h:br/>
   
		For the FDP_CER_EXT.2 audit event, the intent is that auditing is performed only
		once incoming data are recognized by the TOE as a “request”. Cases where
		incoming data are rejected before they are processed as “requests” by the TOE
		(and thus the action “fails”) do not need to be audited by the FDP_CER_EXT.2
		audit event.<h:br/><h:br/>
	  </note>
          <aactivity>
              <TSS>
		The evaluator shall examine the TSS and operational guidance in order to verify
		that they describe each of the relevant auditable events, how audit records of
		these events are formatted, and what component of the TOE or Operational
		Environment is responsible for handling these events.<h:br/><h:br/>
		      
		For those auditable events that are generated by the TOE and stored within the
		TOE boundary, the assurance activities are included for the relevant selectionbased audit SFRs.
              </TSS>
              <Guidance>
		There is no guidance associated with this evaluation activity.
              </Guidance>
             <Tests>
		For any auditable events that are handled by the TOE’s Operational
		Environment, the evaluator shall demonstrate that these events are auditable.<h:br/><h:br/>	     
		Testing that audit records associated with an SFR are generated is performed
		in conjunction with testing the SFR.
              </Tests>
	    </aactivity>
          </f-element>
 	  <audit-event/> 
        </f-component>

	 <!--               -->     
 	 <!-- FAU_GCR_EXT.1 -->
	 <!--               -->     
        <f-component cc-id="fau_gcr_ext.1" name="Generation of Certificate Repository" status="mandatory">
          <f-element>
            <title>The TSF shall 
		    <selectables>
			    <selectable>store</selectable>
			    <selectable>invoke the Operational Environment to store</selectable>
		    </selectables>
		certificates and 
		    <selectables>
			    <selectable>CRLs</selectable>
			    <selectable>no other information</selectable>
		    </selectables>
		issued by the TSF. </title>
            <aactivity>
		<TSS>
		The evaluator shall examine the TSS to determine that it describes the
		certificate repository. If the certificate repository is provided by the OE, the
		evaluator shall check the TSS to ensure it describes the interfaces invoked by
		the TOE to store certificates (and CRLs). 
		</TSS>
                <Guidance>
		There is no guidance associated with this evaluation activity.
                </Guidance>
		<Tests>
			The evaluator shall perform the following tests:
			<h:ul><h:li>Test 1: The evaluator shall generate a certificate to be stored in the
				repository. The evaluator shall confirm that the certificate is stored in
				the certificate repository.</h:li>
				<h:li>Test 2 (conditional): If “CRLs” are selected in the SFR, the evaluator
				shall generate a CRL and verify that it is stored in the certificate
				repository.</h:li>
			</h:ul>
		 </Tests>
	    </aactivity>
          </f-element>
          <audit-event/>
        </f-component>
		
	<!--               -->     
        <!-- FAU_GEN.1     -->
	<!--               -->     
        <f-component cc-id="fau_gen.1" name="Audit Data Generation" status="mandatory">
           <f-element>
		   <title><h:b>Refinement:</h:b>The TSF shall generate <refinement>and <selectables><selectable>invoke the Operational 
		      Environment to generate</selectable><selectable>no other actions</selectable></selectables></refinement>
		      an audit record of the following auditable events:
                            <h:ol type="a">
                                <h:li>Start-up of the TSF audit functions</h:li>
                                <h:li>All auditable events for the <refinement>not specified</refinement> level of audit; and </h:li>
                                <h:li><refinement>All administrative actions invoked through the TSF interface</refinement>;</h:li>
                                <h:li><refinement>Specifically defined auditable events listed in Table 4 through Table 6</refinement></h:li>
                            </h:ol>
             </title>
	     <note role="application">
		The ST author will include a consolidated table of auditable events for all
		mandatory, optional, and selected components in the ST per FAU_ADP_EXT.1 that
		will indicate the component that is responsible for producing the audit event.
		There are three cases for the generational of audit events. The audit event is
		generated by the TSF; the audit event is generated on initiation by the TOE, but
		the OE is involved in some or all of the actual generation of the audit event; and
		the audit event is generated entirely by the OE without prompting from the TOE.<h:br/><h:br/>
		The first two cases are covered by this requirement. Additionally, the start-up of
		the TOE functions and all administrative actions that performed either by or
		through the TOE are required to be auditable. If all of the audit records are
		generated by the TOE, or if the audit records are either generated entirely by the
		TOE and entirely by the OE (that is, none of the audit records are generated by
		invoking the OE), then “no other actions” is chosen in the selection. The meaning
		of “specifically defined auditable events…” in item d refers to events in the table
		produced by FAU_ADP_EXT.1 that indicate they are generated in whole or part of
		the TSF.
	    </note>	     
        </f-element>
        <f-element>
		<title><h:b>Refinement:</h:b>The TSF shall <refinement>
			<selectables><selectable>include</selectable>
				<selectable> invoke the Operational Environment to include</selectable>
			</selectables></refinement>
			within each audit record at least the following information:
                        <h:ol type="a">
                             <h:li>Date and time of the event, type of event, subject identity, and the outcome
				(success or failure) of the event; and</h:li>
                             <h:li>For each audit event type, based on the auditable event definitions of the
				functional components included in the PP/ST, <refinement>information specified in
				     column three of Table 4 through Table 6</refinement>. </h:li>
                        </h:ol>
                </title>
                <note role="application">
                      	As with the previous component, the ST author should update Table 4 above with
			any additional information generated. "Subject identity" in the context of this
			requirement could either be the administrator's user ID or the affected network
			interface, for example.<h:br/><h:br/>
			The ST author chooses whether the information is put into the audit record by the
			TSF or the OE via the selection; it is permissible to be a combination of both. It
			may be the case that when the TSF generates an audit record, some or all of the
			information listed in the SFR are actually put into the audit record by the OE. In
			these cases, “invoke the Operational Environment to record” should be selected.
			OE.AUDIT_GENERATION will be included in the ST if the OE is selected in any of
			the FAU_GEN elements or listed in the last column in table 4.
                 </note>
		<aactivity>
                    <TSS>
                       	The evaluator shall ensure that the TSS describes every audit event type
			mandated by the PP and that the description of the fields contains the
			information required in FAU_GEN.1.2, and the additional information specified
			in Tables 4 through 6, depending on the characterization of the SFR associated
			with the particular event as mandatory, optional, or selection-based.
			<h:br></h:br><h:br></h:br>
			The evaluator shall also ensure that the TSS describes all cases where the
			generation of ephemeral key pairs is not audited for FCS_CKM.1.    
                    </TSS>
                    <Guidance>
                        The evaluator shall examine the operational guidance to ensure that it
			describes the audit mechanism, lists all of the auditable events and provides a
			format for audit records. Each audit record format type must be covered, along
			with a brief description of each field. <h:br></h:br><h:br></h:br>
			The evaluator shall also make a determination of the administrative actions
			that are relevant in the context of this PP. The evaluator shall examine the
			operational guidance and make a determination of which administrative
			commands, including subcommands, scripts, and configuration files, are
			related to the configuration (including enabling or disabling) of the
			mechanisms implemented in the TOE that are necessary to enforce the
			requirements specified in the PP. The evaluator shall document the
			methodology or approach taken while determining which actions in the
			operational guidance are security relevant with respect to this PP. The
			evaluator may perform this activity as part of the activities associated with
			ensuring the operational guidance satisfies the requirements in accordance
			with AGD_OPE.<h:br></h:br><h:br></h:br>
			The evaluator shall check that audit review tools are described in the
			operational guidance and conform to the requirements of FAU_SAR.1.<h:br></h:br><h:br></h:br>
    			When the Operational Environment is selected in FAU_GEN.1.1 or
			FAU_GEN.1.2, the evaluator shall examine the operational guidance to ensure
			the configuration of the Operational Environment necessary to generate the
			required elements, and instructions on how to examine the various audit
			records is provided.
                    </Guidance>
                    <Tests>
                        The evaluator shall test the TOE’s ability to correctly generate audit records by
			having the TOE generate audit records for the events listed in Table 4, any
			events in Table 5 and Table 6 that correspond with the optional and selectionbased SFRs claimed in the Security Target, startup of the audit functions (or
			startup of the TOE if audit functionality is not enabled or disabled
			independently of the TOE), and administrative actions. This should include all
			instances of an event. The evaluator shall test that audit records are generated
			for the establishment and termination of a channel for each of the
			cryptographic protocols contained in the ST. For administrative actions, the
			evaluator shall test that each action determined by the evaluator above to be
			security relevant in the context of this PP is auditable.  <h:br></h:br><h:br></h:br>
			When verifying the test results, the evaluator shall use audit review tools in
			conformance of FAU_SAR.1 and the operational guidance. The evaluator shall
			ensure the audit records generated during testing match the format specified
			in the operational guidance, and that the fields in each audit record have the
			proper entries and that the audit records are provided in a manner suitable for
			interpretation. The evaluator shall also ensure the ability to apply searches of
			audit data based on the type of event, the user responsible for causing the
			event, and identity of the applicable certificate. When the Operational
			Environment is selected in FAU_GEN.1.1 or FAU_GEN.1.2, the evaluator shall
			follow the operational guidance to configure the Operational Environment as
			specified in the TSS and identify the audit records used and audit information
			assigned to each audit record. The evaluator shall then inspect the indicated
			audit records for audit information assigned to each audit record indicated.<h:br/><h:br/>    
			Note that the testing here can be accomplished in conjunction with the testing
			of the security mechanisms directly. For example, testing performed to ensure
			that the operational guidance provided is correct verifies that AGD_OPE.1 is
			satisfied and should address the invocation of the administrative actions that
			are needed to verify the audit records are generated as expected. <h:br/><h:br/> 
			<h:i>Equivalency</h:i><h:br/><h:br/> 
			Testing of the TOE may be performed on a subset of the platforms listed in the
			TOE's ST. Justification must be provided for those platforms that were excluded
			from testing.<h:br/><h:br/> 
                     </Tests>   
                  </aactivity>
                </f-element>
		<audit-event />
             </f-component>
	
	<!--               -->     
        <!-- FAU_GEN.2     -->
	<!--               -->     		
	<f-component cc-id="fau_gen.2" name="User Identity Association" status="mandatory">
          <f-element>
		  <title><h:b>Refinement:</h:b>For audit events resulting from actions of identified users, the TSF
		    shall be able to <refinement><selectables><selectable>associate</selectable>
		    <selectable>invoke the Operational Environment to associate</selectable></selectables>
		    </refinement>
		    each auditable event with the identity of the user that caused the event.
	    </title>
            <note role="application">
		As with FAU_GEN.1.2, if the TSF initiates the generation of the audit event, but
		the OE is responsible for associating the user ID with that event (if appropriate for
		that event), then the ST author selects “invoke the Operational Environment to
		associate” for this SFR. 
	    </note>
            <aactivity>
              	<Tests>
			This activity should be accomplished in conjunction with the testing of FAU_GEN.1. 
		</Tests>
	    </aactivity>
          </f-element>
	<audit-event/>
        </f-component>
	      
	<!--               -->     
        <!-- FAU_STG.4     -->
	<!--               -->     
        <f-component cc-id="fau_stg.4" name="Prevention of Audit Data Loss" status="mandatory">
        <f-element>
		<title><h:b>Refinement:</h:b>The TSF shall <refinement>[prevent audited events, except those taken
			by the Auditor]</refinement> and <assignable>other actions to be taken in case of audit storage
			failure</assignable> if the audit trail <h:b>cannot be written to.</h:b>
                </title>
		<note role="application">
			This requirement applies to the TOE regardless of whether the audit trail is stored
			within the TOE boundary (e.g. the audit trail is full) or on an external system in the
			Operational Environment (e.g. the connection to a remote audit repository is
			broken). In either case, the ST author is expected to describe how the TSF is made
			aware of any such failures and how it behaves in response.
		</note>
		<aactivity>
			<TSS>
				The evaluator shall examine the TSS to ensure it describes the behavior of the
				TSF and what actions can be performed by the Auditor, if any, when the audit
				trail is full. 
			</TSS>
			<Guidance>
				The evaluator shall examine the operational guidance to ensure it describes
				what having a full audit trail means and how an Auditor recognizes that this has
				occurred. The evaluator shall also examine the operational guidance to ensure
				it includes remedial steps for correcting the issue. 
			</Guidance>
			<Tests>
				The evaluator shall perform the following tests. Test 1 is performed regardless
				of where the audit repository is stored, since it is testing the capability of the
				TOE to react to an indication that the repository is full. Test 2 is only executed
				in cases where an external repository is supported, and tests the ability of the
				TOE to detect when the connection to the repository becomes unavailable.<h:br/><h:br/>
				<h:ul>
					<h:li>Test 1: The evaluator shall cause the audit trail to become full, verify
						that the TSF behaves as documented in the TSS, and verify that a
						privileged user can perform the documented remedial steps.</h:li>
					<h:li>Test 2 (conditional): If the TOE uses a remote repository in the
						Operational Environment to store audit data, the evaluator shall cause
						the audit trail to become unavailable, verify that the TSF behaves as
						documented in the TSS, and verify that a privileged user can perform
						the documented remedial steps.</h:li>
				</h:ul><h:br/><h:br/>
				<h:i>Equivalency</h:i><h:br/><h:br/>
				Testing of the TOE may be performed on a subset of the platforms listed in the
				TOE's ST. Justification must be provided for those platforms that were excluded
				from testing.
			</Tests>
		</aactivity>
        </f-element>
	</f-component>
	</subsection>
	    
        <!--                             -->
	<!-- Class: FCO: Communications  -->
        <!--                             -->
      <subsection title="Class: Communications (FCO)" id="fco">

	<!--               -->     
        <!-- FCO_NRO_EXT.2 -->
	<!--               -->     
	<f-component cc-id="fco_nro_ext.2" name="Certificate-Based Proof of Origin">
		<f-element>
               	<title>The TSF shall provide proof of origin for certificates it issues in accordance with
			the digital signature requirements using a mechanism in accordance with RFC
			5280 and FCS_COP.1(2).
                </title>
		</f-element>
		<f-element>
               	<title>The TSF shall provide proof of origin for certificate status information it issues in
			accordance with the digital signature requirements in 
			<selectables><selectable>CRLs (RFC 5280)</selectable>
				<selectable>OCSP (RFC 6960)</selectable>
				<selectable><assignable>other OCSP standards</assignable></selectable>
			</selectables> and FCS_COP.1(2).
                </title>
		</f-element>
		<f-element>
               	<title>The TSF shall require and verify proof of origin for certificate requests it receives
			<selectables><selectable>CMC using mechanisms in accordance with FIA_CMCS_EXT.1</selectable>
				<selectable>EST using mechanisms in accordance with FIA_ESTS_EXT.1</selectable></selectables>.
                </title>
		</f-element>
		<f-element>
               	<title>The TSF shall require and verify proof of origin for public keys contained in
			certificate requests it receives via 
			<selectables><selectable>proof-of-possession mechanisms in CMC using mechanisms in
				accordance with FIA_CMCS_EXT.1</selectable>
				<selectable>proof-of-possession mechanisms in EST in accordance with FIA_ESTS_EXT.1</selectable>
			</selectables>.
                </title>
		</f-element>
		<f-element>
               	<title>The TSF shall 
			<selectables>
				<selectable>require and verify proof of origin for revocation requests it receives via
					<selectables>
						<selectable>CMC using mechanisms in accordance with FIA_CMCS_EXT.1</selectable>
						<selectable>EST using optional “full CMC” functionality in accordance with FIA_ESTS_EXT.1</selectable>
					</selectables>
				</selectable>
				<selectable>
					<assignable>support manual processes for revocation requests and responses</assignable>
				</selectable>
			</selectables>.
		</title>
                <note role="application">
			The TOE is responsible for providing proof of origin for information it issues and
			verifying proof of origin for information it receives. Based on what is chosen in the
			selection for FCO_NRO_EXT.2.2, the applicable requirements from Annex B (i.e.,
			FDP_CRL_EXT.1, FDP_OCSPG_EXT.1) must be included. Based on what is chosen
			in the selections for FCO_NRO_EXT.2.3-FCO_NRO_EXT.2.5, the applicable
			requirements from Annex B (i.e., FIA_CMCS_EXT.1, FIA_ESTS_EXT.1) must be
			included. <h:br/><h:br/>
			A TOE that supports both EST and CMC and can obtain revocation requests via
			one of the protocols would be in compliance with FCO_NRO_EXT.2.5. Manual
			process to support revocation requests and responses are claimed and described
			if EST does not support full CMC requests and CMC is not claimed.<h:br/><h:br/>
			This SFR references FCS_COP.1(2) which, according to FCS_CDP_EXT.1, may be
			implemented by the TOE or the OE. If FCS_CDP_EXT.1 indicates that FCS_COP.1(2)
			is implemented by the OE, then FCO_NRO_EXT.2.1 and FCO_NRO_EXT.2.2 are in
			accordance with FCS_COP.1(2) if they interface with the OE to invoke the
			signature algorithms indicated in FCS_COP.1(2). 
		</note>
		<aactivity>
			<TSS>
				The evaluator shall examine the TSS to ensure it describes the mechanisms
				used for generating proof of origin and the security-relevant information to
				which the mechanism applies. The TSS shall describe how the TSF relates the
				identity and other specified attributes of the originator of the information to
				the security relevant portions of the information to which the evidence applies.
				The TSS shall also describe how verification of the proof of origin of information
				for all security-relevant information is performed and shall also specify the
				cases in which verification of proof of origin is performed.<h:br/><h:br/>
				For TOEs that only support EST, and do not support revocation requests under
				either CMC or EST, the TSS must describe the mechanism used to determine
				whether to revoke certificates.<h:br/><h:br/>
				For TOEs that select “support manual processes for revocation requests and
				responses,” the evaluator shall ensure the TSS describes those processes.
			</TSS>
			<Guidance>
				If configurable, evaluator shall examine the operational guidance to ensure it
				defines how to configure the applicable algorithms used for providing and
				verifying proof of origin as defined in FCS_COP.1(2).<h:br/><h:br/>
				For TOEs that only support EST, and do not support revocation requests under
				either CMC or EST, the evaluator shall examine the guidance to ensure it
				describes support for privileged user functionality as part of this mechanism.<h:br/><h:br/>
				For TOEs that select “support manual processes for revocation requests and
				responses,” the evaluator shall ensure the operational guidance provides a
				description of the processes the administrators are to follow. The evaluator
				shall ensure these are consistent with the descriptions of these processes in
				the TSS.
			</Guidance>
			<Tests>
				The evaluator shall perform the following tests for each request format
				selected and for each request supported:<h:br/><h:br/>
				TOE is online (requires establishment of a client capable of generating
				certificate requests and has a valid HTTPS connection to the TOE):
                                <testlist>
                                    <test>Test 1: For each supported request, the evaluator shall generate and
					submit a properly authenticated request to the TOE and verify the
					responses are signed.
                                    </test>
                                    <test>Test 2: For each supported request, the evaluator shall generate
					requests that are unsigned, submit to the TOE, and verify that the TOE
					rejects the request.
                                    </test>
                                    <test>Test 3: For each supported request, the evaluator shall generate
					requests that have an invalid signature based on the RFC, submit to the
					TOE, and verify that the TOE rejects the request.
                                    </test>
                                    <test>Test 4: For each supported request, the evaluator shall generate
					requests that are not signed by authorized entities, submit to the TOE,
					and verify that the TOE rejects the request.
                                    </test>
                                    <test>Test 5: For each supported request using password based
					authentication, the evaluator shall use invalid passwords and verify
					that the TSF rejects the requests.
                                    </test>
                                    <test>Test 6: For each proof of possession mode supported, the evaluator
					shall generate an otherwise valid request but modify the proof of
					possession value. The evaluator shall submit the modified request and
					verify that the TSF rejects the request.
                                    </test>
                                    <test>Test 7 (Transport Test) For each supported request message, the evaluator shall send
					an otherwise valid request using HTTP rather than HTTPS and shall
					verify the TSF rejects the request.
                                    </test>
                                    <test>Test 8 (Offline Test): With the TOE in offline mode, the evaluator shall log into the
					TOE locally as the CA Operations Staff role and perform tests 1-4
					above.
                                    </test>
                                </testlist>
				<h:i>Equivalency</h:i>
				Testing of the TOE may be performed on a subset of the platforms listed in the
				TOE's ST. Justification must be provided for those platforms that were excluded
				from testing.
			</Tests>
                    </aactivity>
		</f-element>
	    <audit-event/>
          </f-component>
       </subsection>
	
	      
        <!--                             -->
	<!-- Class: FCS: Cryptographic Suypport  -->
        <!--                             -->
      <subsection title="Class: Cryptographic Support (FCS)" id="fcs">

	<!--               -->     
        <!-- FCS_CDP_EXT.1 -->
	<!--               -->     
        <f-component cc-id="fcs_cdp_ext.1" name="Cryptographic Dependencies">
          <f-element>
            <title> The TSF shall 
		    <selectables>
			    <selectable>implement cryptographic functionality</selectable>
			    <selectable>invoke interfaces provided by the Operational Environment</selectable>
		    </selectables>
		    in order to perform 
		    <selectables>
			    <selectable>FCS_CKM.1</selectable>
			    <selectable>FCS_CKM.2</selectable>
			    <selectable>FCS_CKM_EXT.1(1)</selectable>
                            <selectable>FCS_CKM_EXT.1(2)</selectable>
			    <selectable>FCS_CKM_EXT.1(3)</selectable>
			    <selectable>FCS_CKM_EXT.1(4)</selectable>
			    <selectable>FCS_CKM_EXT.4</selectable>
			    <selectable>FCS_CKM_EXT.5</selectable>
			    <selectable>FCS_CKM_EXT.6</selectable>
		            <selectable>FCS_CKM_EXT.7</selectable>
			    <selectable>FCS_CKM_EXT.8</selectable>
			    <selectable>FCS_COP.1(1)</selectable>
			    <selectable>FCS_COP.1(2)</selectable>
			    <selectable>FCS_COP.1(3)</selectable>
			    <selectable>FCS_COP.1(4)</selectable>
			    <selectable>FCS_RBG_EXT.1</selectable>
			    <selectable>FCS_KSH_EXT.1</selectable>
		    </selectables>
		    cryptographic operations.
            </title>
            <note role="application"> 
		Cryptographic functionality can be provided entirely by the TOE, entirely by the
		Operational Environment, or by both. The SFRs that detail the cryptographic
		functionality are contained in Annexes A, B, and C; these SFRs are included in the
		ST depending on selections in other SFRs that describe the mandated and optional
		functionality that requires cryptographic functions (for instance, the inclusion of
		TLS). The appropriate selection for whether the cryptographic functionality is
		implemented by the TOE or by the OE is made for each of the SFRs in the Annex
		when instantiated in the ST. If both the TSF and OE work together to provide the
		required cryptography for the TOE, iterate this SFR once for the TSF and once of
		the OE, and list the specific SFRs implemented by each. In aggregate, all
		cryptographic SFRs required by the TOE should be listed. <h:br/><h:br/>
		    
		The only exception to this case is where the cryptographic function is implemented
		in the OE and there is no direct TSF invocation for that function. For instance, if
		the DRBG is implemented by an HSM that is in the OE, that the TOE only invokes
		the HSM for higher-level cryptographic functions (such as “create key”, “sign
		certificate”, etc.), then (in that case) FCS_RBG_EXT.1 would not appear in any
		iteration of the FCS_CDP_EXT.<h:br/><h:br/>
    
		If the functionality is provided by communicating over a network connection with
		a physically external cryptographic device, then the ST author must include
		FTP_ITC.1 with “external cryptographic module” selected.<h:br/><h:br/>
   
		The individual cryptographic SFRs may have Assurance Activities in addition to
		those specified below; the intent is that the Assurance Activities below augment
		those that are provided for the individual cryptographic SFRs.		
	    </note>
            <aactivity>
              <TSS> If the TSF invokes interfaces to a cryptographic module in the Operational
		Environment to provide the necessary cryptographic functionality, the
		evaluator shall review the TSS to ensure that it specifies the interfaces that
		are invoked, and the cryptographic provider of the functionality. The
		evaluator shall review the TSS and verify that all cryptographic SFRs required
		by the ST—through inclusion of (other) mandatory and optional SFRs--are
		included.<h:br/><h:br/>
		Other required TSS activities are associated with the cryptographic SFRs
		themselves.    
	      </TSS>
              <Guidance>
		Required Guidance activities are associated with the cryptographic SFRs themselves.
              </Guidance>
              <Tests>
		Required Test activities are associated with the cryptographic SFRs themselves.
              </Tests>
            </aactivity>
          </f-element>
        </f-component>

        <f-component name="Cryptographic Key Storage" cc-id="fcs_stg_ext">
            <f-element>
              <title>Persistent private and secret keys shall be stored within the
		<selectables>
			<selectable>TSF</selectable>
			<selectable>Operational environment</selectable>
		</selectables>
                <selectables><h:ul>
			<h:li><selectable>encrypted within a hardware rooted key hierarchy established in
				accordance with
				<selectables>
					<selectable>FCS_CKM_EXT.1(2)</selectable>
					<selectable>FCS_CKM_EXT.1(3)</selectable>
				</selectables>,
				FCS_CKM_EXT.7, and FCS_CKM_EXT.8
				</selectable></h:li>
			<h:li><selectable>in a hardware cryptographic module</selectable></h:li></h:ul>
		 </selectables>. 
	      </title>
              <note role="application">This requirement ensures that persistent secret keys and private keys are stored
		securely when not in use. If some secrets/keys are manipulated by the TOE and
		others are manipulated by the environment, then both of the selections can be
		specified by the ST author and the ST author must identify in the TSS those keys
		which are manipulated by the TOE and those by the environment.<h:br/><h:br/> 
		If the TOE is an application, and not a dedicated server, then it should store its
		private keys in the environment-provided key storage.<h:br/><h:br/>
		The ST author is responsible for selecting the manner in which the keys are stored
		and where they are stored in the selections above. <h:br/><h:br/> 
		This SFR applies only to keys that are relevant to the requirements in the PP/ST; it
		does not apply to keys that have no bearing on CA PP functionality.
 	      </note>
	      <aactivity>
		      <TSS>
			Regardless of whether this requirement is met by the TOE or the Operational
			Environment, the evaluator will check the TSS to ensure that it lists each
			persistent secret and private key needed to meet the requirements in the ST.
			For each of these items, the evaluator will confirm that the TSS lists for what
			purpose it is used, and how it is stored. 
		      </TSS>
		      <Guidance>
			There are no AGD assurance activities for this requirement beyond what is
			necessary to satisfy the requirements in [CEM].   
		      </Guidance>
		      <Tests>
			There are no ATE assurance activities for this requirement beyond what is
			necessary to satisfy the requirements in [CEM]. 
		      </Tests>
		      <h:i>Equivalency</h:i><h:br/><h:br/>
		      	Testing of the TOE may be performed on a subset of the platforms listed in the
			TOE’s ST. Justification must be provided for those platforms that were excluded
			from testing.
	      </aactivity>
	    </f-element>
	</f-component>
      </subsection>
		
		
        <!--                             -->
	<!-- Class: FCP: User Data Protection  -->
        <!--                             -->
      <subsection title="Class: User Data Protection (FDP)" id="fdp">

	<!--               -->     
        <!-- FDP_CER_EXT.1 -->
	<!--               -->     
        <f-component cc-id="fdp_cer_ext.1" name="Certificate Profiles">
		<f-element>
			<title>
				The TSF shall implement a certificate profile function and shall ensure that issued
				certificates are consistent with configured profiles.
			</title>
		</f-element>
		<f-element>
			<title>
				The TSF shall generate certificates using profiles that comply with requirements
				for certificates as specified in IETF RFC 5280, “Internet X.509 Public Key
				Infrastructure Certificate and Certificate Revocation List (CRL) Profile”, while
				ensuring that the following conditions are met:
				<h:ol type="a">
					<h:li>The version field shall contain the integer 2.</h:li>
					<h:li>The issuerUniqueID or subjectUniqueID fields are not populated.</h:li>
					<h:li>The serialNumber shall be unique with respect to the issuing Certification
						Authority</h:li>
					<h:li>The validity field shall specify a notBefore value that does not precede the
						current time and a notAfter value that does not precede the value specified
						in notBefore.</h:li>
					<h:li>The issuer field is not empty.</h:li>
					<h:li>The signature field and the algorithm in the subjectPublicKeyInfo field shall
						contain the OID for a signature algorithm specified in FCS_COP.1(2).</h:li>
					<h:li>The following extensions are supported:
						<h:ol type="a">
							<h:li>subjectKeyIdentifier</h:li>
							<h:li>authorityKeyIdentifier</h:li>
							<h:li>basicConstraints</h:li>
							<h:li>keyUsage</h:li>
							<h:li>extendedKeyUsage</h:li>
							<h:li>certificatePolicy</h:li>
						</h:ol>
					</h:li>
					<h:li>A subject field containing a null Name (e.g., a sequence of zero relative
						distinguished names) is accompanied by a populated critical subjectAltName
						extension.</h:li>
					<h:li>The subjectKeyIdentifier extension is populated with a value unique for each
						public key contained in a certificate issued by the TSF. </h:li>
					<h:li>The authorityKeyIdentifier extension in any certificate issued by the TOE must
						be populated and must be the same as the subjectKeyIdentifier extension
						contained in the issuer’s signing certificate. </h:li>
					<h:li>Populated keyUsage and extendedKeyUsage fields in the same certificate
						contain consistent values. </h:li>
				</h:ol>
			</title>
			<note role="application">
				FDP_CER_EXT.1.2 is intended to clarify the standard interpretation that subject
				key identifiers MUST be unique to a public key in a certificate issued by a CA (not
				that the public keys are unique). The intended meaning is that it is acceptable to
				issue a certificate with a public key contained in a request that happens to match 
				another certificate issued by the CA when the other certificate also contains the
				requested public key; it is not acceptable that requests for certificates containing
				different public keys result in the same subject key identifier - as this would
				contradict the definition of the subject key identifier included in the RFC: "The
				subject key identifier extension provides a means of identifying certificates that
				contain a particular public key." This is not possible if the value is not unique to
				the public keys it issues. <h:br/><h:br/>
				The SFR refines RFC 5280 by requiring all certificate profiles used by the TOE be
				configurable to include the subject key identifier; the RFC only requires it for CA
				certificates. The RFC indicates a CA SHOULD provide subject key identifiers for end
				entity certificates.<h:br/><h:br/>
				When a single instance of the TOE represents multiple CAs, it is acceptable that a
				subject key identifier issued by one CA match the subject key identifier of another
				CA, whether implemented within the TOE or as a separate instance.
			</note>
		</f-element>
      		<f-element>
			<title>
				The TSF shall be able to generate at least 20 bits of random for use in issued
				certificates to be included in 
				<selectables>
					<selectable>serialNumber</selectable>
					<selectable>notBefore</selectable>
					<selectable>notAfter</selectable>
				</selectables> fields, where the random values are generated in accordance with FCS_RBG_EXT.1.
			</title>
			<note role="application">
				The requirement applies only to the issuance of X.509 v3 certificates. An optional
				requirement in Annex A allows for the issuance of X.509 certificates other than
				V3.<h:br/><h:br/>
				Consistency is defined in RFC5280 for FDP_CER_EXT.1.2, item i; specifically, for
				each extendedKeyUsage purpose specified, there must be a consistent keyUsage
				purpose set.<h:br/><h:br/>
				RFC updates to RFC 5280 are included in this requirement.<h:br/><h:br/>
				The random input to issued certificates in FDP_CER_EXT.1.3 can be spread across
				multiple of the selectable fields so that the total number of inserted bits is at least
				20. Select all that apply.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it describes the certificate profile
					function in accordance with FDP_CER_EXT.1.1 The TSS shall describe how
					certificate profiles are configured and then selected to issue certificates in
					accordance with FDP_CER_EXT.1.2. The evaluator shall also ensure that the TSS
					describes how the TSF ensures that a certificate-requesting subject possesses
					the applicable private key. Finally, the evaluator shall ensure that the TSS
					describes how 20 bits of random are generated in accordance with
					FDP_CER_EXT.1.3 and which certificate fields are involved.
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that
					instructions are available to configure certificate profiles used for certificate
					generation in accordance with this requirement. The operational guidance
					shall also specify how to configure proof of possession and, if applicable, how
					to configure unique serial number generation.
				</Guidance>
				<Tests>
					The evaluator shall perform the following tests for each supported certificate
					format:
					<testlist>
					<test>
						Test 1: The evaluator shall configure a certificate profile using the
						available guidance, request a certificate using the profile, and then
						examine the certificate contents to ensure it matches the configured
						certificate profile.
					</test>
					<test>
						Test 2: The evaluator shall specifically examine the certificate
						generated in Test 1 to ensure that it satisfies all field constraints in
						FDP_CER_EXT.1.2.
					</test>
					<test>
						Test 3: The evaluator shall test the fields “d”, “e”, “f”, and “i” in
						FDP_CER_EXT.1.2 as follows:<h:br/><h:br/>
						<h:b>Field “d”:</h:b> The evaluator shall send a request with a
						subjectPublicKeyInfo that is allowed by the profile, and observe the
						request succeeds. The evaluator shall then send a request with a
						subjectPublicKeyInfo that is not allowed by the profile, and observe
						that the request is rejected (or the value that is put into the certificate
						is what was in the profile).<h:br/><h:br/>
						<h:b>Field “e”:</h:b> The evaluator shall send a request with a KeyUsage that is
						allowed by the profile, and observe the request succeeds. The
						evaluator shall then send a request with a KeyUsage that is not allowed
						by the profile, and observe that the request is rejected (or the value
						that is put into the certificate is what was in the profile).<h:br/><h:br/>
						<h:b>Field “f”:</h:b> The evaluator shall send requests to show that the CA accepts
						requests that provide an identifier in either one or both of the subject
						and subjectAltName fields, but rejects requests that do not provide an
						identifier for either one of those fields.<h:br/><h:br/>
						<h:b>Field “i”:</h:b> For each EKU listed in section 4.2.1.12 of RFC 5280, the
						evaluator performs the following tests. The evaluator shall send a
						request with a KeyUsage that is consistent (as documented in section
						4.2.1.12 of RFC 5280) with the profile EKU, and observe the request
						succeeds. The evaluator shall then send a request with a KeyUsage
						that is not consistent (as documented in section 4.2.1.12 of RFC 5280)
						with the profile EKU, and observe that the request is rejected. The
						evaluator shall send the EKU to a profile with a consistent KeyUsage
						(but no specified EKU) and observe the request succeeds. The 
						evaluator shall send the EKU to a profile with an inconsistent KeyUsage
						(but no specified EKU) and observe the request is rejected.<h:br/><h:br/>
					</test>
					<test>
						Test 4: For each extendedKeyUsage value defined in section 4.2.1.12
						of RFC 5280, the evaluator shall attempt to configure a certificate
						profile with each inconsistent keyUsage for that extendedKeyUsage
						field. If the CA rejects the attempt to create such a profile, then the
						test succeeds. If the creation of such a profile is allowed, the evaluator
						shall submit a certificate request using the profile, and show that the
						TSF does not issue the certificate.<h:br/><h:br/>
					</test>
					<test>
						Test 5: The evaluator shall configure a certificate profile and create a
						certificate request that violates the validity period setting in the
						configured profile (e.g., notBefore precedes the current time, the
						combination of notBefore and notAfter is beyond the validity period
						setting). The evaluator shall submit the certificate request using the
						profile and verify that the TSF rejects the request.<h:br/><h:br/>
					</test>
					</testlist>
					<h:i>Equivalency</h:i><h:br/><h:br/>		
					Testing of the TOE may be performed on a subset of the platforms listed in the
					TOE’s ST. Justification must be provided for those platforms that were excluded
					from testing.<h:br/><h:br/>
				</Tests>
			</aactivity>
		</f-element>		
	</f-component>

	<!--               -->     
        <!-- FDP_CER_EXT.2 -->
	<!--               -->     
        <f-component cc-id="fdp_cer_ext.2" name="Certificate Request Matching">
		<f-element>
			<title>
				The TSF shall establish a linkage from certificate requests to issued certificates.
			</title>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it describes the linkage between
					submitted requests and issued certificates.
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure it contains
					instructions for how to trace a submitted request to an issued certificate and
					vice versa via the TOE’s interface.
				</Guidance>
				<Tests>
					The evaluator shall perform the following test:
					<testlist>
						<test>
							Test 1: The evaluator shall configure a certificate profile using the available
							guidance and request a certificate using the profile as a subscriber. The
							evaluator shall then assume the CA Operations role and verify that a linkage
							between submitted certificate requests and issued certificates is provided.
						</test>
					</testlist>
					<h:i>Equivalency</h:i><h:br/><h:br/>		
					Testing of the TOE may be performed on a subset of the platforms listed in the
					TOE’s ST. Justification must be provided for those platforms that were excluded
					from testing.<h:br/><h:br/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>

	<!--               -->     
        <!-- FDP_CER_EXT.3 -->
	<!--               -->     
        <f-component cc-id="fdp_cer_ext.3" name="Certificate Issuance Approval">
		<f-element>
			<title>
				The TSF shall support the approval of certificates by 
				<selectables>
					<selectable>RA</selectable>
					<selectable>AOR</selectable>
					<selectable>CA</selectable>
					<selectable>Operations Staff</selectable>
					<selectable>rules</selectable>
				</selectables>
				issued according to a configured certificate profile.
			</title>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it describes the certificate
					issuance approval function, including the available interfaces that must be
					used.<h:br/><h:br/>
					The evaluator shall examine the operational guidance to ensure that it contains
					instructions for any configuration aspects of the certificate issuance approval
					function and the steps needed to perform an approval.
				</TSS>
				<Tests>
					The evaluator shall perform the following test:
					<testlist>
						<test>
							Test 1: The evaluator shall configure the certificate issuance approval
							function in accordance with the operational guidance. The evaluator shall
							create a certificate request and submit it to the TOE. The evaluator shall
							access the TOE using the defined interface and verify that the submitted
							request is in the appropriate queue. The evaluator shall then assume either
							the CA Operations Staff role or the RA Staff role and approve the certificate
							request and issue the certificate. The evaluator shall verify that a certificate
							was issued.
						</test>
						If ‘rules’ is selected in FDP_CER_EXT.3.1 to allow automatic approval, the
						evaluator shall follow operational guidance to configure the certificate
						issuance approval function to follow a rule for automatic approval, and
						perform the following tests:
						<test>
							Test 2: The evaluator shall construct one or more certificate requests that
							meet the rules for automatic approval, and shall verify that each requested
							certificate was issued.
						</test>
						<test>
							Test 3: The evaluator shall attempt to construct one or more certificate
							requests that violate the rules for automatic approval, and shall verify that
							the requested certificates are not issued.
						</test>
					</testlist>
					<h:i>Equivalency</h:i><h:br/><h:br/>		
					Testing of the TOE may be performed on a subset of the platforms listed in the
					TOE’s ST. Justification must be provided for those platforms that were excluded
					from testing.<h:br/><h:br/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	<!--               -->     
        <!-- FDP_CSI_EXT.1 -->
	<!--               -->     
        <f-component cc-id="fdp_csi_ext.1" name="Certificate Status Information">
		<f-element>
			<title>
				The TSF shall provide certificate status information whose format complies with
				<selectables>
					<selectable>ITU-T Recommendation X.509v1 CRL</selectable>
					<selectable>ITU-T Recommendation X.509v2 CRL</selectable>
					<selectable>the OCSP standard as defined by
						<selectables>
							<selectable>RFC 6960</selectable>
							<selectable>other OCSP standard</selectable>
						</selectables>
					</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element>
			<title>
				The TSF shall support the approval of changes to the status of a certificate by
				<selectables>
					<selectable>RA</selectable>
					<selectable>CA operations staff</selectable>
					<selectable>rules</selectable>
				</selectables>.
			</title>
			<note role="application">
				Based on the selection, the ST author must choose the appropriate requirements
				from Annex B.<h:br/><h:br/>
				The ST should specify the format used to supply certificate status information. If
				other OCSP standard is selected, only current standards shall be selected, the RFC
				shall be referenced, and any optional features within the RFC shall be specified.<h:br/><h:br/>
				The various iterations of FMT_MOF.1 defines the role or roles authorized to
				approve changes to a certificate’s status.<h:br/><h:br/>
				The “changes” referenced in FDP_CSI_EXT.1.2 are the revocation requests
				received by the TOE.
			</note>
			<aactivity>
			<TSS>
				The evaluator shall examine the TSS to ensure it describes the certificate status
				function and applicable formats, in accordance with this requirement, that can
				be used to issue certificate status. The TSS must reflect the selection made by
				the ST author as well as the selection-based requirements from Annex B.<h:br/><h:br/>
				For TOEs that support OCSP, the TOE’s ST shall specify the OCSP standard and
				the ST author shall ensure that a description of the format is available.<h:br/><h:br/>
				The evaluator shall also ensure that the TSS describes the process for approving
				changes to the status of a certificate, including the interfaces that must be
				used.<h:br/><h:br/>
				If the TOE supports the configuration of certificate status information, the
				evaluator shall examine the operational guidance to ensure that instructions
				are available to configure the certificate status function to utilize the formats
				identified in FDP_CSI_EXT.1.1. 
			</TSS>
			<Guidance>
				The evaluator shall examine the operational guidance to ensure that it contains
				instructions for any configuration aspects of the certificate status change
				approval function and the steps needed to perform an approval.
			</Guidance>
			<Tests>
				Based on the selection, the evaluator shall perform the applicable tests
				associated with the requirements in Annex C:
				<testlist>
					<test>
						Test 1: For certificate status information, the evaluator shall configure
						the TSF to provide certificate status information according to each
						format identified in FDP_CSI_EXT.1.1 in turn and request certificate
						status for each format. Each certificate status response shall be
						examined to ensure that it conforms to the format as described in the
						TSS.
					</test>
					<test>
						Test 2: For each selected certificate status format, the evaluator shall
						issue a valid certificate from the TOE. The evaluator shall then cause
						the TOE to issue certificate status information. The evaluator shall
						check the certificate status information to verify that it reflects that the
						certificate is valid.
					</test>
					<test>
						Test 3: For each selected certificate status format, the evaluator shall
						revoke a valid certificate from the TOE. The evaluator shall then cause
						the TOE to issue certificate status information. The evaluator shall
						check the certificate status information to verify that it reflects that the
						certificate is revoked.
					</test>
					<test>
						Test 4: The evaluator shall configure the certificate status change
						approval function in accordance with the operational guidance. The
						evaluator shall create a certificate status change request and submit it 
						to the TOE. The evaluator shall access the TOE using the defined
						interface and verify that the submitted request is in the appropriate
						queue. The evaluator shall approve the certificate status change
						request. The evaluator shall then cause the TOE to issue certificate
						status information. The evaluator shall check the certificate status
						information to verify that it reflects the state of the certificate.
					</test>
				</testlist>
				<h:i>Equivalency</h:i><h:br/><h:br/>		
				Testing of the TOE may be performed on a subset of the platforms listed in the
				TOE’s ST. Justification must be provided for those platforms that were excluded
				from testing.<h:br/><h:br/>
			</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	<!--               -->     
        <!-- FDP_RIP.1 -->
	<!--               -->     
        <f-component cc-id="fdp_rip.1" name="Subset Residual Information Protection">
		<f-element>
			<title>
				<refinement>Refinement:</refinement> The TSF <refinement>and 
				<selectables>
					<selectable>Operational Environment</selectable>
					<selectable>no other component</selectable>
				</selectables></refinement>
				shall ensure that any previous information content of a resource is
				made unavailable upon the 
				<selectables>
					<selectable>allocation of the resource to</selectable>
					<selectable>deallocation of the resource from</selectable>
				</selectables> 
				the following objects: <assignable>list of objects</assignable>. 
			</title>		
			<note role="application">
				“Resources” in the context of this requirement are any data buffers used to
				implement certificate authority functions, including network communications
				with the Certificate Authority. The concern is that a buffer or memory area might
				be reused in subsequent function or communication channel resulting in
				inappropriate disclosure of sensitive data. Note that this requirement applies only
				to resources that the TSF controls. “Objects” refers to any sensitive data objects
				that are under control of the TSF, such as subscribers’ personally identifiable
				information.<h:br/><h:br/>
				The first selection should include ‘Operational Environment’ if the TSF depends on
				a component of the OE to store and protect TSF data. The ST should specify the
				component and any interface used to meet this requirement. 
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure that, at a minimum, it describes
					how the previous information content is made unavailable, and at what point
					in the buffer processing this occurs.
				</TSS>
				<Guidance>
					There are no AGD assurance activities for this requirement beyond what is
					necessary to satisfy the requirements in [CEM].
				</Guidance>
				<Tests>
					There are no ATE assurance activities for this requirement beyond what is
					necessary to satisfy the requirements in [CEM].
					<h:i>Equivalency</h:i><h:br/><h:br/>		
					Testing of the TOE may be performed on a subset of the platforms listed in the
					TOE’s ST. Justification must be provided for those platforms that were excluded
					from testing.<h:br/><h:br/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	</subsection>   <!-- FDP -->
	      
	<!--                             -->
	<!-- Class: FIA: Identification and Authentication  -->
        <!--                             -->
      	<subsection title="Class: Identification and Authentication (FIA)" id="fia">
		
	<!--               -->     
        <!-- FIA_X509_EXT.1 -->
	<!--               -->     
        <f-component cc-id="fia_x509_ext.1" name="Certificate Validation">
		<f-element>
			<title>
				The TSF shall 
				<selectables>
					<selectable>validate</selectable>
					<selectable>interface with the Operational Environment to validate</selectable>
				</selectables>
				certificates in accordance with the following rules: <h:br/><h:br/>
				<h:ul>
					<h:li>IETF RFC 5280 certificate validation and certificate path validation.</h:li>
					<h:li>The certificate path must terminate with a certificate in the Trust Anchor
						Database.</h:li>
					<h:li>The TSF shall validate a certificate path by ensuring the presence of the
						basicConstraints extension and that the cA flag is set to TRUE for all CA
						certificates.</h:li>
					<h:li>The TSF shall validate the revocation status of the certificate using 
						<selectables>
							<selectable>the Online Certificate Status Protocol (OCSP) as 
								specified in FDP_CSI_EXT.1</selectable>
							<selectable>a Certificate Revocation List (CRL) as specified in FDP_CSI_EXT.1</selectable>
						</selectables>.</h:li>
					<h:li>The TSF shall validate the extendedKeyUsage field according to the following
						rules:
						<h:ul>
							<h:li>Certificates used for trusted updates and executable code integrity
								verification shall have the Code Signing purpose (id-kp 3 with OID
								1.3.6.1.5.5.7.3.3),</h:li>
							<h:li>Client certificates presented for TLS shall have the Client Authentication
								purpose (id-kp 2 with OID 1.3.6.1.5.5.7.3.2) in the extendedKeyUsage
								field, </h:li>
							<h:li>Server certificates presented for TLS shall have the Server Authentication
								purpose (id-kp 1 with OID 1.3.6.1.5.5.7.3.1) in the extendedKeyUsage
								field.</h:li>
						</h:ul>
					</h:li>
				</h:ul>
			</title>
			<note role="application">
				The TSF may rely on the Operational Environment to perform certificate handling
				functionality in cases where the TOE relies on an environmental component to
				provide trusted remote communications.<h:br/><h:br/>
				FIA_X509_EXT.1 lists the rules for validating certificates. The ST authorshall select
				whether revocation status is verified using OCSP or CRLs. Depending on this
				selection, the appropriate CRL or OCSP requirements from Annex B must be
				included.<h:br/><h:br/>
				Certificates may optionally be used for trusted updates of TSF Software
				(FPT_TUD_EXT.1) and for data/software integrity verification (FPT_TST_EXT.2)
				and, if implemented, must be validated to contain the Code Signing purpose
				extendedKeyUsage. <h:br/><h:br/>
				Whenever TLS or HTTPS is used by the TSF to protect communications originating
				from external IT entities, certificates used to perform authentication must be
				validated to contain the Client Authentication purpose extendedKeyUsage.<h:br/><h:br/>
				Whenever the TOE originates messaging to external IT services using TLS or
				HTTPS, certificates must be used to perform the authentication and must be
				validated to contain the Server Authentication purpose extendedKeyUsage.<h:br/><h:br/>
				It should be noted that in all cases, the validation is expected to end in a trusted
				root certificate.<h:br/><h:br/>
			</note>
		</f-element>
		<f-element>
			<title>
				The TSF shall only treat a certificate as a CA certificate if the basicConstraints
				extension is present and the CA flag is set to TRUE.
			</title>
			<note role="application">
				This requirement applies to certificates that are used and processed by the TSF
				and restricts the certificates that may be added to the Trust Anchor Database.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it describes where the check of
					validity of the certificates takes place. The evaluator shall ensure the TSS also
					provides a description of the certificate path validation algorithm for each
					certificate format supported by the TOE.
				</TSS>
				<Guidance>
					There are no AGD assurance activities for this requirement beyond what is
					necessary to satisfy the requirements in [CEM].
				</Guidance>
				<Tests>
					The evaluator shall perform the following tests in conjunction with the other
					Certificate Services assurance activities, including the use cases in
					FIA_X509_EXT.2.1. The tests for the extendedKeyUsage rules are performed in
					conjunction with the uses that require those rules.<h:br/><h:br/>
					<testlist>
						<test>Test 1: The evaluator shall demonstrate that validating a certificate
							without a valid certification path results in the function (application
							validation, trusted channel setup, or trusted software update) failing.
							The evaluator shall then load a certificate or certificates needed to
							validate the certificate to be used in the function, and demonstrate
							that the function succeeds. The evaluator then shall delete one of the
							certificates, and show that the function fails. </test>
						<test>Test 2: The evaluator shall demonstrate that validating an expired
							certificate anywhere in a certificate path results in the function failing.</test>
						<test>Test 3: The evaluator shall test that the TOE can properly handle
							revoked certificates –conditional on whether CRL or OCSP is selected;
							if both are selected, and then a test is performed for each method. The 
							evaluator has to only test one up in the trust chain (future revisions
							may require to ensure the validation is done up the entire chain). The
							evaluator shall ensure that a valid certificate is used, and that the
							validation function succeeds. The evaluator shall then attempt the test
							with a certificate that will be revoked (for each method chosen in the
							selection) and verify that the validation function fails. </test>
						<test>Test 4: The evaluator shall construct a certificate path, such that the
							certificate of the CA issuing the CA’s certificate does not contain the
							basicConstraints extension. The validation of the certificate path fails.</test>
						<test>Test 5: The evaluator shall construct a certificate path, such that the
							certificate of the CA issuing the CA’s certificate has the cA flag in the
							basicConstraints extension not set. The validation of the certificate
							path fails.</test>
						<test>Test 6: The evaluator shall construct a certificate path, such that the
							certificate of the CA issuing the CA’s certificate has the cA flag in the
							basicConstraints extension set to TRUE. The validation of the certificate
							path succeeds.</test>
						<test>Test 7: The evaluator shall modify a single byte in the certificate and
							verify that the certificate fails to validate.</test>
					</testlist>
					<h:i>Equivalency</h:i><h:br/><h:br/>		
					Testing of the TOE may be performed on a subset of the platforms listed in the
					TOE’s ST. Justification must be provided for those platforms that were excluded
					from testing.<h:br/><h:br/>
				</Tests>
			</aactivity>
		</f-element>				
	</f-component>

	<!--               -->     
        <!-- FIA_X509_EXT.2 -->
	<!--               -->     
        <f-component cc-id="fia_x509_ext.2" name="Certificate-based Authentication">
		<f-element>
			<title>
				The TSF shall 
				<selectables>
					<selectable>use</selectable>
					<selectable>interface with the Operational Environment to use</selectable>
				</selectables>
				X.509v3 certificates as defined by RFC 5280 to support authentication for code
				signing for TOE updates, 
				<selectables>
					<selectable>IPsec</selectable>
					<selectable>TLS</selectable>
					<selectable>HTTPS</selectable>
					<selectable>SSH</selectable>
				</selectables>, and 
				<selectables>
					<selectable>integrity verification for TSF protected data</selectable>
					<selectable>integrity verification for TSF software and firmware</selectable>
					<selectable><assignable>other uses</assignable></selectable>
					<selectable>no additional uses</selectable>
				</selectables>.
			</title>
			<note role="application">
				The ST author‘s selection of trusted communication channel is expected to match
				the selections in FTP_TRP.1.1 and FTP_ITC.1.1 (if FTP_ITC.1 is included in the ST).
				Certificates may optionally be used for integrity verification (FPT_TST_EXT.2) and
				other uses.
			</note>
		</f-element>
		<f-element>
			<title>
				When the TSF cannot determine the current revocation status of a certificate, the
				TSF shall 
				<selectables>
					<selectable>allow the administrator to choose whether to accept the certificate</selectable>
					<selectable>accept the certificate</selectable>
					<selectable>not accept the certificate</selectable>
				</selectables>.
			</title>
			<note role="application">
				The TSF may rely on the Operational Environment to perform certificate handling
				functionality in cases where the TOE relies on an environmental component to 
				provide trusted remote communications. If the ST author selects SSH, the TSF shall
				be validated against the Extended Package for Secure Shell.<h:br/><h:br/>
				Often a connection must be established to perform a verification of the revocation
				status of a certificate - either to download a CRL or to perform OCSP. The selection
				is used to describe the behavior in the event that such a connection cannot be
				established (for example, due to a network error). If the TOE has determined the
				certificate valid according to all other rules in FIA_X509_EXT.1, the behavior
				indicated in the second selection shall determine the validity. The TOE must not
				accept the certificate if it fails any of the other validation rules in FIA_X509_EXT.1.
				If the administrator-configured option is selected by the ST author, the ST author
				must also select function 22 in FMT_SMF.1.
			</note>
		</f-element>
		<f-element>
			<title>
				The TSF shall not establish a trusted communication channel if the peer certificate
				is deemed invalid.
			</title>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it describes the certificate(s)
					used by the TOE, the different uses for each certificate, and how the TSF
					chooses which certificates to use. The evaluator shall examine the TSS to
					confirm that it describes the behavior of the TOE when a connection cannot be
					established during the validity check of a certificate used in establishing a
					trusted channel. 
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure clear
					instructions for configuring the operating environment so that the TOE can use
					the certificates which are provided. If the requirement is that the administrator
					is able to specify the default action if the peer certificate is deemed invalid,
					then the evaluator shall ensure that the operational guidance contains
					instructions on how this configuration action is performed.
				</Guidance>
				<Tests>
					The evaluator shall perform the following tests:
					<testlist>
						<test>
							Test 1: For each function listed in FIA_X509_EXT.2.1 that requires the
							use of certificates the evaluator shall demonstrate that using a
							certificate without a valid certification path results in the function
							failing. Using the operational guidance, the evaluator shall then load a
							certificate or certificates needed to validate the certificate to be used
							in the function, and demonstrate that the function succeeds. The 
							evaluator then shall delete one of the certificates, and show that the
							function fails.
						</test>
						<test>
							Test 2: The evaluator shall demonstrate that using a valid certificate
							that requires certificate validation checking to be performed in at least
							some part by communicating with a non-TOE entity. The evaluator
							shall then manipulate the environment so that the TOE is unable to
							verify the validity of the certificate, and observe that the action
							selected in FIA_X509_EXT.2.2 is performed. If the selected action is
							administrator-configurable, then the evaluator shall follow the
							operational guidance to determine that all supported administratorconfigurable options behave in their documented manner. 
						</test>
					</testlist>
					<h:i>Equivalency</h:i><h:br/><h:br/>		
					Testing of the TOE may be performed on a subset of the platforms listed in the
					TOE’s ST. Justification must be provided for those platforms that were excluded
					from testing.<h:br/><h:br/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
	
	<!--               -->     
        <!-- FIA_UAU_EXT.1 -->
	<!--               -->     
        <f-component cc-id="fia_uau_ext.1" name="Authentication Mechanism">
		<f-element>
			<title>
				The TSF shall 
				<selectables>
					<selectable>provide</selectable>
					<selectable>interface with the OE to provide</selectable>
				</selectables> a 
				<selectables>
					<selectable>password-based authentication mechanism</selectable>
					<selectable><assignable>other authentication mechanism(s)</assignable></selectable>
				</selectables>
				to perform privileged user authentication. 
			</title>
			<note role="application">
				Examples of “other authentication mechanisms” for the selection include onetime
				password mechanisms such as RSA SecurID, certificates, and biometrics.
			</note>
			<aactivity>
				<TSS>
					Assurance activities for this requirement are covered under those for
					FIA_UIA_EXT.1. If other authentication mechanisms are specified, the
					evaluator shall include those methods in the activities for FIA_UIA_EXT.1.
				</TSS>
			</aactivity>
		</f-element>
	</f-component>

	<!--               -->     
        <!-- FIA_UIA_EXT.1 -->
	<!--               -->     
        <f-component cc-id="fia_uia_ext.1" name="User Identification and Authentication">
		<f-element>
			<title>
				The TSF shall allow the following actions prior to requiring a non-TOE entity to
				initiate the identification and authentication process:
				<h:ul>
					<h:li>Display the warning banner in accordance with FTA_TAB.1;</h:li>
					<h:li>Obtain certificate status information;</h:li>
					<h:li>
						<selectables>
							<selectable>download certificate from repository</selectable>
							<selectable>no other actions</selectable>
							<selectable><assignable> list of services or actions
								performed by the TSF in response to
								non-TOE entity request</assignable></selectable>
						</selectables></h:li>
				</h:ul>
			</title>
			<note role="application">
				A “non-TOE entity” refers to users (privileged user, subscribers, and relying
				parties) of services available from the TOE directly. If the TOE is able to download
				certificates from the certificate repository prior to initiating the I&A process, the
				ST author includes that item in the ST. While it should be the case that few or no
				services are available to external entities prior to identification and 
				authentication, if there are some available to non-TOE entities, these should be
				listed in the assignment statement; otherwise “no other actions” should be
				selected.
			</note>
		</f-element>
		<f-element>
			<title>
				The TSF shall require each user to be successfully identified and authenticated
				before allowing any other TSF-mediated actions on behalf of that user, including
				subscriber certificate renewal, subscriber revocation requests, privileged user
				access, 
				<selectables>
					<selectable>no other actions</selectable>
					<selectable><assignable>other TSF-mediated actions</assignable></selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element>
			<title>
				For subscriber actions, the TSF shall verify that the DN of the certificate presented
				by the subscriber for authentication matches that of the certificate being affected
				by the subscriber’s actions.
			</title>
			<note role="application">
				Authentication can be password-based through the local console or through a
				protocol that supports passwords (such as SSH), or certificates (such as TLS).<h:br/><h:br/>
				Certificate renewal and certificate revocation requests can be performed by
				subscribers with valid certificates and are limited to actions on those certificates;
				subscribers cannot renew or revoke other users’ certificates. Privileged user access
				requires further authentication. If there are other actions available to
				authenticated users, these should be listed in the assignment; otherwise, “no
				other actions” should be selected.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it describes the logon process
					for each logon method (local, remote (HTTPS, SSH, etc.)) supported for the TOE.
					This description shall contain information pertaining to the credentials
					allowed/used, any protocol transactions that take place, and what constitutes
					a “successful logon”.<h:br/><h:br/>
					The evaluator shall examine the TSS to determine that it describes all actions
					that can be performed prior to I&A as well as all actions that require successful
					I&A, and by whom these actions can be performed. Any constraints on these
					services shall be documented in the TSS.
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to determine that any
					necessary preparatory steps (e.g., establishing credential material such as preshared keys, tunnels, certificates, etc.) to logging in are described. For each
					supported login method, the evaluator shall ensure the operational guidance
					provides clear instructions for successfully logging on. If configuration is
					necessary to ensure the services provided before login are limited, the
					evaluator shall determine that the operational guidance provides sufficient
					instruction on limiting all allowed services. The evaluator shall examine the
					operational guidance to verify that it describes how to configure the
					constraints on each type of subscriber self-service request. 
				</Guidance>
				<Tests>
					The evaluator shall perform the following tests for each method by which
					privileged users access the TOE (local and remote), as well as for each type of
					credential supported by the access method in accordance with the
					authentication mechanisms listed in FIA_UAU_EXT.1:
					<testlist>
						<test>
							Test 1: The evaluator shall use the operational guidance to
							configure the appropriate credential supported for the access
							method. For that credential/access method, the evaluator shall
							show that providing correct I&A information results in the ability
							to access the system, while providing incorrect information results
							in denial of access.
						</test>
						<test>
							Test 2: The evaluator shall configure the non-authenticated
							services allowed according to the operational guidance, and then
							determine the services available to an external remote entity
							(including subscribers and relying parties). The evaluator shall
							determine that the list of services available is limited to those
							specified in the requirement. The evaluator shall also verify that
							non-authenticated remote entities cannot access the services
							listed in FIA_UIA_EXT.1.2 that require I&A.
						</test>
						<test>
							Test 3: For local access, the evaluator shall exercise the services in
							accordance with FIA_UIA_EXT.1.1 available to a local privileged
							user prior to I&A, and make sure this list is consistent with the
							requirement.
						</test>
						<test>
							Test 4: The evaluator shall configure the constraints on subscriber
							self-service requests. The evaluator shall assume a CA Operations
							Staff or RA Staff role and issue a certificate to at least one unique
							subscriber. For each configured service, the evaluator shall request
							authorized activities using the issued certificates and verify that
							they can be performed.
						</test>
						<test>
							Test 5: The evaluator shall configure the constraints on subscriber
							self-service requests. The evaluator shall assume a CA Operations
							Staff or RA Staff role and issue a certificate to at least two unique
							subscribers. For each configured service, the evaluator shall
							request authorized activities using one issued certificate for the
							other subscriber’s information and shall verify that the request is
							denied. The evaluator shall request unauthorized activities using
							one issued certificate and shall verify that the request is denied.
						</test>
					</testlist>
					<h:i>Equivalency</h:i><h:br/><h:br/>		
					Testing of the TOE may be performed on a subset of the platforms listed in the
					TOE’s ST. Justification must be provided for those platforms that were excluded
					from testing.<h:br/><h:br/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>		
      </subsection>
		
 	<!--                             -->
	<!-- Class: FMT: Security Management  -->
        <!--                             -->
     <subsection title="Class: Security Management (FMT)" id="fmt">
	<note role="application">
		FMT_MOF.1 has been broken up into several iterations to define the specific
		management functions that are available to each of the roles defined by
		FMT_SMR.2. The FMT_MOF.1 iterations restrict some functions to a particular
		role, and allow the ST author to choose the role to which other functions may be
		restricted through selections in a particular iteration. The ST author should select
		those security management functions that belong to the roles supported by the
		TOE. All TSF management functions need to be specified as being able to be
		performed by at least one of the defined roles.
	</note>

	<!--               -->     
        <!-- FMT_MOF.1(1) -->
	<!--               -->     
        <f-component cc-id="fia_mof.1" iteration="1" name="Management of Security Functions Behavior (Administrator Functions)">
		<f-element>
			<title>
				<refinement>Refinement:</refinement>The 
				<refinement><selectables>
					<selectable>TSF</selectable>
					<selectable>Operational Environment</selectable>
					</selectables></refinement>
				shall restrict the abiulity to
				<refinement>
					<h:ol a="1">
						<h:li>manage the TOE locally and remotely;</h:li>
						<h:li>configure the audit mechanism;</h:li>
						<h:li>configure and manage certificate profiles;</h:li>
						<h:li>modify revocation configuration;</h:li>
						<h:li>perform updates to the TOE;</h:li>
						<h:li>perform on-demand integrity tests;</h:li>
						<h:li>import and remove X.509v3 certificates into/from the Trust Anchor
							Database;</h:i>
						<h:li><selectables><selectable>Import 
							<assignable> secret and private keys other than the CA’s signing keys</assignable>
							</selectable></selectables></h:li>
						<h:li>configure certificate revocation list function;</h:li>
						<h:li>configure OCSP function;</h:li>
						<h:li>disable deprecated algorithms;</h:li>
						<h:li>accept certificates whose validity cannot be determined;</h:li>
						<h:li><assignable>other security management functions</assignable></h:li>
					</h:ol>
				</refinement>
				to [<h:i>Administrators</h:i>].	
			</title>
			<note role="application">
				It is likely that some combination of the TOE and its Operational Environment are
				collectively responsible for implementing these management functions. In such
				cases, the ST author should specify, for each function, the component that
				enforces it.
			</note>
			<aactivity>
				<Tests>
					Testing for this requirement is defined under FMT_MOF.1(4). The only
					difference between the iterations of FMT_MOF.1 is the specific set of
					management functions that are available to each administrative role. Testing
					for this SFR is conducted sufficiently thoroughly if the evaluator can
					demonstrate that the assigned role can perform only the functions specified in
					the SFR.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>			
		
	<!--               -->     
        <!-- FMT_MOF.1(2) -->
	<!--               -->     
        <f-component cc-id="fia_mof.1" iteration="2" name="Management of Security Functions Behavior (CA/RA Functions)">
		<f-element>	     
			<title>
				<refinement>Refinement:</refinement>The
				<refinement><selectables>
					<selectable>TSF</selectable>
					<selectable>Operational Environment</selectable>
					</selectables></refinement>
				shall restrict the ability to<h:br/><h:br/>
				<refinement><h:ol a="1">
					<h:li>approve and execute the issuance of certificates;</h:li>
					<h:li>configure subscriber self-service request constraints;</h:li>
					<selectables>
						<selectable><h:li>configure automated certificate approval management;</h:li></selectable>
						<selectable><h:li>approve rulesets that govern the authorizations of AORs to manage
							particular certificates on behalf of an organization;</h:li></selectable>
						<selectable><h:li>accept, process and export CMC messages;</h:li></selectable>
						<selectable><h:li>no other function</h:li></selectable>
					</selectables></h:ol></refinement>
					to 
				<refinement>
					<selectables>
						<selectable>CA Operations Staff</selectable>
						<selectable>RA Staff</selectable>
				</selectables></refinement>
			</title>
			<aactivity>
				<Tests>
					Testing for this requirement is defined under FMT_MOF.1(4). The only
					difference between the iterations of FMT_MOF.1 is the specific set of
					management functions that are available to each administrative role. Testing
					for this SFR is conducted sufficiently thoroughly if the evaluator can
					demonstrate that the assigned role can perform only the functions specified in
					the SFR.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>				
	     
	<!--               -->     
        <!-- FMT_MOF.1(3) -->
	<!--               -->     
        <f-component cc-id="fia_mof.1" iteration="3" name="Management of Security Functions Behavior (CA Operations Functions)">
		<f-element>
			<title>
				<refinement:Refinement:</refinement>
				The <refinement>
				<selectables>
					<selectable>TSF</selectable>
					<selectable>Operational Environment</selectable>
				</selectables></refinement>
				shall restict the ability to
				<refinement>
					<h:ol a="1">
						<h:li>approve certificate revocation;</h:li>
						<selectables>
							<selectable><h:li>perform archival and recovery;</h:li></selectable>
							<selectable><h:li>import a key share to support recovery of a CA signing key;</h:li></selectable>
							<selectable><h:li>approve rulesets that govern the authorizations of RAs to manage
								particular certificates on behalf of an organization;</h:li></selectable>
							<selectable><h:li>export PKCS#10 certificate request;</h:li></selectable>
							<selectable><h:li>import CA certificate;</h:li></selectable>
							<selectable><h:li>no other function</h:li></selectable>
						</selectables>
					</h:ol>
				</refinement> to <refinement>[CA Operations Staff]</refinement>.
			</title>
			<aactivity>
				<Tests>
					Testing for this requirement is defined under FMT_MOF.1(4). The only
					difference between the iterations of FMT_MOF.1 is the specific set of
					management functions that are available to each administrative role. Testing
					for this SFR is conducted sufficiently thoroughly if the evaluator can
					demonstrate that the assigned role can perform only the functions specified in
					the SFR.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
<!-- **************   -->		
		
        <f-component cc-id="fcs_ckm.1" name="Cryptographic key generation">
          <f-element>
            <title> The TSF shall generate <refinement>asymmetric</refinement> cryptographic keys in
              accordance with a specified cryptographic key generation algorithm <selectables
                linebreak="yes">
                <selectable><refinement>RSA schemes using</refinement> cryptographic key sizes of
                    <refinement>2048-bit or greater</refinement> that meet <refinement>FIPS PUB
                    186-4, "Digital Signature Standard (DSS)", Appendix
                  B.3</refinement></selectable>
                <selectable><refinement>ECC schemes using </refinement><selectables linebreak="yes">
                    <selectable><refinement>"NIST curves" P-384 and </refinement><selectables>
                        <selectable><refinement>P-256</refinement></selectable>
                        <selectable><refinement>P-521</refinement></selectable>
                        <selectable exclusive="yes"><refinement>no other
                          curves</refinement></selectable>
                      </selectables> that meet the following: <refinement>FIPS PUB 186-4, "Digital
                        Signature Standard (DSS)", Appendix B.4</refinement></selectable>
                    <selectable><refinement>Curve25519 schemes that meet the following: RFC
                        7748</refinement></selectable>
                  </selectables>
                </selectable>
                <selectable><refinement>FFC schemes using </refinement><selectables>
                    <selectable>cryptographic key sizes of <refinement>2048-bit or
                        greater</refinement> that meet the following: <refinement>FIPS PUB 186-4,
                        "Digital Signature Standard (DSS)", Appendix B.1</refinement></selectable>
                    <selectable><refinement>Diffie-Hellman group 14 </refinement>that meet the
                        following:<refinement> RFC3526, Section 3</refinement></selectable>
                    <selectable><refinement>"safe-prime" groups</refinement> that meet the
                        following:<refinement> 'NIST Special Publication 800-56A Revision 3,
                        "Recommendation for Pair-Wise Key Establishment Schemes Using Discrete
                        Logarithm Cryptography"', and </refinement><selectables>
                        <selectable><refinement>RFC 3526</refinement></selectable>
                        <selectable><refinement>RFC 7919</refinement></selectable>
                      </selectables></selectable>
                  </selectables></selectable>
              </selectables>. </title>
            <note role="application"> The ST author shall select all key generation schemes used for
              key establishment and entity authentication. When key generation is used for key
              establishment, the schemes in FCS_CKM.2/UNLOCKED and selected cryptographic protocols
              must match the selection. When key generation is used for entity authentication, the
              public key may be associated with an X.509v3 certificate. <htm:br/><htm:br/> If the
              TOE acts as a receiver in the RSA key establishment scheme, the TOE does not need to
              implement RSA key generation. <htm:br/><htm:br/> Curve25519 can only be used for ECDH
              and in conjunction with FDP_DAR_EXT.2.2. </note>
            <aactivity>
              <TSS> The evaluator shall ensure that the TSS identifies the key sizes supported by
                the TOE. If the ST specifies more than one scheme, the evaluator shall examine the
                TSS to verify that it identifies the usage for each scheme. <htm:br/><htm:br/></TSS>
              <Guidance> The evaluator shall verify that the AGD guidance instructs the
                administrator how to configure the TOE to use the selected key generation scheme(s)
                and key size(s) for all uses defined in this PP.<htm:br/><htm:br/>
              </Guidance>
              <Tests>
                <htm:b>Assurance Activity Note:</htm:b> The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products.<htm:br/><htm:br/>
                <htm:i><htm:b>Key Generation for FIPS PUB 186-4 RSA
                Schemes</htm:b></htm:i><htm:br/><htm:br/> The evaluator shall verify the
                implementation of RSA Key Generation by the TOE using the Key Generation test. This
                test verifies the ability of the TSF to correctly produce values for the key
                components including the public verification exponent <htm:i>e</htm:i>, the private
                prime factors <htm:i>p</htm:i> and <htm:i>q</htm:i>, the public modulus n and the
                calculation of the private signature exponent <htm:i>d</htm:i>. <htm:br/><htm:br/>
                Key Pair generation specifies 5 ways (or methods) to generate the primes
                  <htm:i>p</htm:i> and <htm:i>q</htm:i>. These include: <htm:ol>
                  <htm:li>Random Primes: <htm:ul>
                      <htm:li>Provable primes</htm:li>
                      <htm:li>Probable primes</htm:li>
                    </htm:ul>
                  </htm:li>
                  <htm:li>Primes with Conditions: <htm:ul>
                      <htm:li>Primes p1, p2, q1,q2, p and q shall all be provable primes </htm:li>
                      <htm:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall
                        be probable primes</htm:li>
                      <htm:li>Primes p1, p2, q1,q2, p and q shall all be probable primes </htm:li>
                    </htm:ul>
                  </htm:li>
                </htm:ol> To test the key generation method for the Random Provable primes method
                and for all the Primes with Conditions methods, the evaluator must seed the TSF key
                generation routine with sufficient data to deterministically generate the RSA key
                pair. This includes the random seed(s), the public exponent of the RSA key, and the
                desired key length. For each key length supported, the evaluator shall have the TSF
                generate 25 key pairs. The evaluator shall verify the correctness of the TSF’s
                implementation by comparing values generated by the TSF with those generated from a
                known good implementation. <htm:br/><htm:br/> If possible, the Random Probable
                primes method should also be verified against a known good implementation as
                described above. Otherwise, the evaluator shall have the TSF generate 10 keys pairs
                for each supported key length nlen and verify: <htm:ul>
                  <htm:li>n = p*q</htm:li>
                  <htm:li>p and q are probably prime according to Miller-Rabin tests</htm:li>
                  <htm:li>GCD(p-1,e) = 1</htm:li>
                  <htm:li>GCD(q-1,e) = 1</htm:li>
                  <htm:li>2^16 &lt; e &lt; 2^256 and e is an odd integer</htm:li>
                  <htm:li>|p-q| > 2^(nlen/2 – 100)</htm:li>
                  <htm:li>p >= squareroot(2)*( 2^(nlen/2 -1) )</htm:li>
                  <htm:li>q >= squareroot(2)*( 2^(nlen/2 -1) )</htm:li>
                  <htm:li>2^(nlen/2) &lt; d &lt; LCM(p-1,q-1)</htm:li>
                  <htm:li>e*d = 1 mod LCM(p-1,q-1)</htm:li>
                </htm:ul>
                <htm:br/>
                <htm:i><htm:b>Key Generation for FIPS 186-4 Elliptic Curve Cryptography
                    (ECC)</htm:b></htm:i><htm:br/>
                <htm:i>FIPS 186-4 ECC Key Generation Test</htm:i><htm:br/><htm:br/> For each
                supported NIST curve, i.e. P-256, P-384 and P-521, the evaluator shall require the
                implementation under test (IUT) to generate 10 private/public key pairs. The private
                key shall be generated using an approved random bit generator (RBG). To determine
                correctness, the evaluator shall submit the generated key pairs to the public key
                verification (PKV) function of a known good implementation. <htm:br/><htm:br/>
                <htm:i>FIPS 186-4 Public Key Verification (PKV) Test</htm:i><htm:br/><htm:br/> For
                each supported NIST curve, i.e. P-256, P-384 and P-521, the evaluator shall generate
                10 private/public key pairs using the key generation function of a known good
                implementation and modify five of the public key values so that they are incorrect,
                leaving five values unchanged (i.e. correct). The evaluator shall obtain in response
                a set of 10 PASS/FAIL values. <htm:br/><htm:br/>
                <htm:i><htm:b>Key Generation for Curve25519</htm:b></htm:i><htm:br/><htm:br/> The
                evaluator shall require the implementation under test (IUT) to generate 10
                private/public key pairs. The private key shall be generated as specified in RFC
                7748 using an approved random bit generator (RBG) and shall be written in
                little-endian order (least significant byte first). To determine correctness, the
                evaluator shall submit the generated key pairs to the public key verification (PKV)
                function of a known good implementation. <htm:br/><htm:br/> Note: Assuming the PKV
                function of the good implementation will (using little-endian order): <htm:ol
                  type="a">
                  <htm:li>confirm the private and public keys are 32-byte values</htm:li>
                  <htm:li>confirm the three least significant bits of the first byte of the private
                    key are zero</htm:li>
                  <htm:li>confirm the most significant bit of the last byte is zero</htm:li>
                  <htm:li>confirm the second most significant bit of the last byte is one </htm:li>
                  <htm:li>calculate the expected public key from the private key and confirm it
                    matches the supplied public key</htm:li>
                </htm:ol>
                <htm:br/><htm:br/> The evaluator shall generate 10 private/public key pairs using
                the key generation function of a known good implementation and modify 5 of the
                public key values so that they are incorrect, leaving five values unchanged (i.e.
                correct). The evaluator shall obtain in response a set of 10 PASS/FAIL values. <htm:br/><htm:br/>
                <htm:i><htm:b>Key Generation for Finite-Field Cryptography
                (FFC)</htm:b></htm:i><htm:br/> The evaluator shall verify the implementation of the
                Parameters Generation and the Key Generation for FFC by the TOE using the Parameter
                Generation and Key Generation test. This test verifies the ability of the TSF to
                correctly produce values for the field prime p, the cryptographic prime q (dividing
                p-1), the cryptographic group generator g, and the calculation of the private key x
                and public key y.<htm:br/> The Parameter generation specifies 2 ways (or methods) to
                generate the cryptographic prime q and the field prime p:<htm:br/><htm:br/>
                Cryptographic and Field Primes:<htm:br/><htm:br/>
                <htm:ul>
                  <htm:li>Primes q and p shall both be provable primes</htm:li>
                  <htm:li>Primes q and field prime p shall both be probable primes</htm:li>
                </htm:ul> and two ways to generate the cryptographic group generator
                g:<htm:br/><htm:br/> Cryptographic Group Generator:<htm:br/><htm:br/>
                <htm:ul><htm:li>Generator g constructed through a verifiable process</htm:li>
                  <htm:li>Generator g constructed through an unverifiable process</htm:li>
                </htm:ul> The Key generation specifies 2 ways to generate the private key
                x:<htm:br/><htm:br/> Private Key:<htm:br/><htm:br/>
                <htm:ul>
                  <htm:li>len(q) bit output of RBG where 1 &lt;= x &lt;= q-1 </htm:li>
                  <htm:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation where
                    1&lt;= x&lt;=q-1</htm:li>
                </htm:ul> The security strength of the RBG must be at least that of the security
                offered by the FFC parameter set.<htm:br/><htm:br/> To test the cryptographic and
                field prime generation method for the provable primes method and/or the group
                generator g for a verifiable process, the evaluator must seed the TSF parameter
                generation routine with sufficient data to deterministically generate the parameter
                set.<htm:br/><htm:br/> For each key length supported, the evaluator shall have the
                TSF generate 25 parameter sets and key pairs. The evaluator shall verify the
                correctness of the TSF’s implementation by comparing values generated by the TSF
                with those generated from a known good implementation. Verification must also confirm<htm:br/>
                <htm:ul><htm:li>g != 0,1</htm:li>
                  <htm:li>q divides p-1</htm:li>
                  <htm:li>g^q mod p = 1</htm:li>
                  <htm:li>g^x mod p = y</htm:li>
                </htm:ul>
                <htm:br/> for each FFC parameter set and key pair. <htm:h4>Diffie-Hellman Group 14
                  and FFC Schemes using "safe-prime" groups</htm:h4> Testing for FFC Schemes using
                Diffie-Hellman group 14 and/or "safe-prime" groups is done as part of testing in
                FCS_CKM.2/UNLOCKED. </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm.2" iteration="UNLOCKED" name="Cryptographic key establishment">
          <f-element>
            <title>The TSF shall <refinement>perform</refinement> cryptographic <refinement>key
                establishment</refinement> in accordance with a specified cryptographic key
                <refinement>establishment</refinement> method <selectables linebreak="yes">
                <selectable><refinement>RSA-based key establishment schemes that meet the following
                      <selectables linebreak="yes">
                      <selectable>NIST Special Publication 800-56B, “Recommendation for Pair-Wise
                        Key Establishment Schemes Using Integer Factorization
                        Cryptography”</selectable>
                      <selectable>RSAES-PKCS1-v1_5 as specified in Section 7.2 of RFC 8017,
                        "Public-Key Cryptography Standards (PKCS) #1:RSA Cryptography Specifications
                        Version 2.1"</selectable>
                    </selectables></refinement></selectable>
                <selectable><refinement>Elliptic curve-based key establishment schemes</refinement>
                  that meets the following: <refinement>NIST Special Publication 800-56A Revision 3,
                    "Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm
                    Cryptography"</refinement></selectable>
                <selectable><refinement>Finite field-based key establishment schemes</refinement>
                  that meets the following: <refinement>NIST Special Publication 800-56A Revision 3,
                    "Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm
                    Cryptography"</refinement></selectable>
                <selectable><refinement>Key establishment schemes using Diffie-Hellman group 14 that
                    meets the following: RFC 3526, Section 3</refinement></selectable>
                <selectable><refinement>FFC schemes using "safe-prime" groups that meet the
                    following: 'NIST Special Publication 800-56A Revision 3, "Recommendation for
                    Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography"', and <selectables>
                      <selectable>RFC 3526</selectable>
                      <selectable>RFC 7919</selectable>
                    </selectables></refinement></selectable>
                <selectable exclusive="yes"><refinement>No other schemes</refinement></selectable>
              </selectables>. </title>
            <note role="application"> The ST author shall select all key establishment schemes used
              for the selected cryptographic protocols.<htm:br/><htm:br/> The RSA-based key
              establishment schemes are described in Section 9 of NIST SP 800-56B; however, Section
              9 relies on implementation of other sections in SP 800-56B. If the TOE acts as a
              receiver in the RSA key establishment scheme, the TOE does not need to implement RSA
              key generation.<htm:br/><htm:br/> The elliptic curves used for the key establishment
              scheme shall correlate with the curves specified in FCS_CKM.1.1. <htm:br/><htm:br/>
              The domain parameters used for the finite field-based key establishment scheme are
              specified by the key generation according to FCS_CKM.1.1. </note>
            <aactivity>
              <TSS> The evaluator shall ensure that the supported key establishment schemes
                correspond to the key generation schemes identified in FCS_CKM.1.1. If the ST
                specifies more than one scheme, the evaluator shall examine the TSS to verify that
                it identifies the usage for each scheme. <htm:br/><htm:br/> If Diffie-Hellman group
                14 is selected from FCS_CKM.2/UNLOCKED, the TSS shall describe how the implementation
                meets RFC 3526 Section 3.<htm:br/><htm:br/>
              </TSS>
              <Guidance> The evaluator shall verify that the AGD guidance instructs the
                administrator how to configure the TOE to use the selected key establishment
                scheme(s).<htm:br/><htm:br/>
              </Guidance>
              <Tests>
                <htm:b>Assurance Activity Note:</htm:b> The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products.<htm:br/><htm:br/>
                <htm:br/><htm:br/> The evaluator shall verify the implementation of the key
                establishment schemes supported by the TOE using the applicable tests below. <htm:br/><htm:br/>
                <htm:h3>SP800-56A Revision 3 Key Establishment Schemes</htm:h3>
                <htm:br/><htm:br/> The evaluator shall verify a TOE's implementation of SP800-56A
                Revision 3 key aestablishment schemes using the following Function and Validity
                tests. These validation tests for each key agreement scheme verify that a TOE has
                implemented the components of the key agreement scheme according to the
                specifications in the Recommendation. These components include the calculation of
                the DLC primitives (the shared secret value Z) and the calculation of the derived
                keying material (DKM) via the Key Derivation Function (KDF). If key confirmation is
                supported, the evaluator shall also verify that the components of key confirmation
                have been implemented correctly, using the test procedures described below. This
                includes the parsing of the DKM, the generation of MACdata and the calculation of
                MACtag. <htm:br/><htm:br/>
                <htm:i><htm:b>Function Test</htm:b></htm:i>
                <htm:br/><htm:br/> The Function test verifies the ability of the TOE to implement
                the key agreement schemes correctly. To conduct this test the evaluator shall
                generate or obtain test vectors from a known good implementation of the TOE
                supported schemes. For each supported key agreement scheme-key agreement role
                combination, KDF type, and, if supported, key confirmation role- key confirmation
                type combination, the tester shall generate 10 sets of test vectors. The data set
                consists of one set of domain parameter values (FFC) or the NIST approved curve
                (ECC) per 10 sets of public keys. These keys are static, ephemeral or both depending
                on the scheme being tested. <htm:br/><htm:br/> The evaluator shall obtain the DKM,
                the corresponding TOE’s public keys (static and/or ephemeral), the MAC tag(s), and
                any inputs used in the KDF, such as the Other Information field OI and TOE id
                fields. <htm:br/><htm:br/> If the TOE does not use a KDF defined in SP 800-56A
                Revision 3, the evaluator shall obtain only the public keys and the hashed value of
                the shared secret. <htm:br/><htm:br/> The evaluator shall verify the correctness of
                the TSF’s implementation of a given scheme by using a known good implementation to
                calculate the shared secret value, derive the keying material DKM, and compare
                hashes or MAC tags generated from these values.<htm:br/><htm:br/> If key
                confirmation is supported, the TSF shall perform the above for each implemented
                approved MAC algorithm. <htm:br/><htm:br/>
                <htm:i><htm:b>Validity Test</htm:b></htm:i>
                <htm:br/><htm:br/> The Validity test verifies the ability of the TOE to recognize
                another party’s valid and invalid key agreement results with or without key
                confirmation. To conduct this test, the evaluator shall obtain a list of the
                supporting cryptographic functions included in the SP800-56A Revision 3 key
                agreement implementation to determine which errors the TOE should be able to
                recognize. The evaluator generates a set of 24 (FFC) or 30 (ECC) test vectors
                consisting of data sets including domain parameter values or NIST approved curves,
                the evaluator’s public keys, the TOE’s public/private key pairs, MACTag, and any
                inputs used in the KDF, such as the other info and TOE id fields. <htm:br/><htm:br/>
                The evaluator shall inject an error in some of the test vectors to test that the TOE
                recognizes invalid key agreement results caused by the following fields being
                incorrect: the shared secret value Z, the DKM, the other information field OI, the
                data to be MACed, or the generated MACTag. If the TOE contains the full or partial
                (only ECC) public key validation, the evaluator will also individually inject errors
                in both parties’ static public keys, both parties’ ephemeral public keys and the
                TOE’s static private key to assure the TOE detects errors in the public key
                validation function and/or the partial key validation function (in ECC only). At
                least two of the test vectors shall remain unmodified and therefore should result in
                valid key agreement results (they should pass). <htm:br/><htm:br/> The TOE shall use
                these modified test vectors to emulate the key agreement scheme using the
                corresponding parameters. The evaluator shall compare the TOE’s results with the
                results using a known good implementation verifying that the TOE detects these
                errors. <htm:br/><htm:br/>
                <htm:h3>SP800-56B Key Establishment Schemes</htm:h3> The evaluator shall verify that
                the TSS describes whether the TOE acts as a sender, a recipient, or both for
                RSA-based key establishment schemes. <htm:br/><htm:br/> If the TOE acts as a sender,
                the following assurance activity shall be performed to ensure the proper operation
                of every TOE supported combination of RSA-based key establishment scheme: <htm:br/>
                To conduct this test the evaluator shall generate or obtain test vectors from a
                known good implementation of the TOE supported schemes. For each combination of
                supported key establishment scheme and its options (with or without key confirmation
                if supported, for each supported key confirmation MAC function if key confirmation
                is supported, and for each supported mask generation function if KTS-OAEP is
                supported), the tester shall generate 10 sets of test vectors. Each test vector
                shall include the RSA public key, the plaintext keying material, any additional
                input parameters if applicable, the MacKey and MacTag if key confirmation is
                incorporated, and the outputted ciphertext. For each test vector, the evaluator
                shall perform a key establishment encryption operation on the TOE with the same
                inputs (in cases where key confirmation is incorporated, the test shall use the
                MacKey from the test vector instead of the randomly generated MacKey used in normal
                operation) and ensure that the outputted ciphertext is equivalent to the ciphertext
                in the test vector. <htm:br/><htm:br/> If the TOE acts as a receiver, the following
                assurance activities shall be performed to ensure the proper operation of every TOE
                supported combination of RSA-based key establishment scheme: <htm:br/> To conduct
                this test the evaluator shall generate or obtain test vectors FCS_CKM.2.1/LOCKED from a
                known good implementation of the TOE supported schemes. For each combination of
                supported key establishment scheme and its options (with our without key
                confirmation if supported, for each supported key confirmation MAC function if key
                confirmation is supported, and for each supported mask generation function if
                KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test
                vector shall include the RSA private key, the plaintext keying material (KeyData),
                any additional input parameters if applicable, the MacTag in cases where key
                confirmation is incorporated, and the outputted ciphertext. For each test vector,
                the evaluator shall perform the key establishment decryption operation on the TOE
                and ensure that the outputted plaintext keying material (KeyData) is equivalent to
                the plaintext keying material in the test vector. In cases where key confirmation is
                incorporated, the evaluator shall perform the key confirmation steps and ensure that
                the outputted MacTag is equivalent to the MacTag in the test vector.
                <htm:br/><htm:br/> The evaluator shall ensure that the TSS describes how the TOE
                handles decryption errors. In accordance with NIST Special Publication 800-56B, the
                TOE must not reveal the particular error that occurred, either through the contents
                of any outputted or logged error message or through timing variations. If KTS-OAEP
                is supported, the evaluator shall create separate contrived ciphertext values that
                trigger each of the three decryption error checks described in NIST Special
                Publication 800-56B section 7.2.2.3, ensure that each decryption attempt results in
                an error, and ensure that any outputted or logged error message is identical for
                each. If KTS-KEMKWS is supported, the evaluator shall create separate contrived
                ciphertext values that trigger each of the three decryption error checks described
                in NIST Special Publication 800-56B section 7.2.3.3, ensure that each decryption
                attempt results in an error, and ensure that any outputted or logged error message
                is identical for each.<htm:br/><htm:br/>
                <htm:h3>RSAES-PKCS1-v1_5 Key Establishment Schemes</htm:h3> The evaluator shall
                verify the correctness of the TSF's implementation of RSAES-PKCS1-v1_5 by using a
                known good implementation for each protocol selected in FTP_ITC_EXT.1 that uses
                RSAES-PKCS1-v1_5. <htm:h3>Diffie-Hellman Group 14</htm:h3> The evaluator shall
                verify the correctness of the TSF's implementation of Diffie-Hellman group 14 by
                using a known good implementation for each protocol selected in FTP_ITC_EXT.1 that
                uses Diffie-Hellman Group 14. <htm:h3>FFC Schemes using "safe-prime" groups</htm:h3>
                The evaluator shall verify the correctness of the TSF's implementation of
                "safe-prime" groups by using a known good implementation for each protocol selected
                in FTP_ITC_EXT.1 that uses "safe-prime" groups. This test must be performed for each
                "safe-prime" group that each protocol uses. </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm.2" iteration="LOCKED" name="Cryptographic key establishment">
          <f-element>
            <title>The TSF shall <refinement>perform</refinement> cryptographic <refinement>key
                establishment</refinement> in accordance with a specified cryptographic key
                <refinement>establishment</refinement> method: <selectables linebreak="yes">
                <selectable><refinement>RSA-based key establishment schemes that meet the following:
                    NIST Special Publication 800-56B, “Recommendation for Pair-Wise Key
                    Establishment Schemes Using Integer Factorization
                  Cryptography”</refinement></selectable>
                <selectable><refinement>Elliptic curve-based key establishment schemes</refinement>
                  that meets the following: <selectables linebreak="yes">
                    <selectable><refinement>NIST Special Publication 800-56A Revision 3,
                        "Recommendation for Pair-Wise Key Establishment Schemes Using Discrete
                        Logarithm Cryptography"</refinement></selectable>
                    <selectable><refinement>RFC 7748, "Elliptic Curves for
                      Security"</refinement></selectable>
                  </selectables>
                </selectable>
                <selectable><refinement>Finite field-based key establishment schemes</refinement>
                  that meets the following: <refinement>NIST Special Publication 800-56A Revision 3,
                    "Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm
                    Cryptography"</refinement></selectable>
              </selectables>
              <refinement>for the purposes of encrypting sensitive data received while the device is
                locked.</refinement>
            </title>
            <note role="application"> The RSA-based key establishment schemes are described in
              Section 9 of NIST SP 800-56B; however, Section 9 relies on implementation of other
              sections in SP 800-56B. If the TOE acts as a receiver in the RSA key establishment
              scheme, the TOE does not need to implement RSA key generation. <htm:br/><htm:br/> The
              elliptic curves used for the key establishment scheme shall correlate with the curves
              specified in FCS_CKM.1.1. <htm:br/><htm:br/> The domain parameters used for the finite
              field-based key establishment scheme are specified by the key generation according to
              FCS_CKM.1.1. </note>
            <aactivity>
              <Tests> The test for SP800-56A Revision 3 and SP800-56B key establishment schemes is
                performed in association with FCS_CKM.2/UNLOCKED. <htm:br/><htm:br/>
                <htm:b>Curve25519 Key Establishment Schemes</htm:b><htm:br/><htm:br/> The evaluator
                shall verify a TOE's implementation of the key agreement scheme using the following
                Function and Validity tests. These validation tests for each key agreement scheme
                verify that a TOE has implemented the components of the key agreement scheme
                according to the specification. These components include the calculation of the
                shared secret K and the hash of K. <htm:br/><htm:br/>
                <htm:b>Function Test</htm:b><htm:br/><htm:br/> The Function test verifies the
                ability of the TOE to implement the key agreement schemes correctly. To conduct this
                test the evaluator shall generate or obtain test vectors from a known good
                implementation of the TOE supported schemes. For each supported key agreement role
                and hash function combination, the tester shall generate 10 sets of public keys.
                These keys are static, ephemeral or both depending on the scheme being tested.
                <htm:br/><htm:br/> The evaluator shall obtain the shared secret value K, and the
                hash of K.<htm:br/><htm:br/> The evaluator shall verify the correctness of the TSF’s
                implementation of a given scheme by using a known good implementation to calculate
                the shared secret value K and compare the hash generated from this value. <htm:br/><htm:br/>
                <htm:b> Validity Test</htm:b><htm:br/><htm:br/> The Validity test verifies the
                ability of the TOE to recognize another party’s valid and invalid key agreement
                results. To conduct this test, the evaluator generates a set of 30 test vectors
                consisting of data sets including the evaluator’s public keys and the TOE’s
                public/private key pairs. <htm:br/><htm:br/> The evaluator shall inject an error in
                some of the test vectors to test that the TOE recognizes invalid key agreement
                results caused by the following fields being incorrect: the shared secret value K or
                the hash of K. At least two of the test vectors shall remain unmodified and
                therefore should result in valid key agreement results (they should pass).
                <htm:br/><htm:br/> The TOE shall use these modified test vectors to emulate the key
                agreement scheme using the corresponding parameters. The evaluator shall compare the
                TOE’s results with the results using a known good implementation verifying that the
                TOE detects these errors. <htm:br/><htm:br/>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm_ext.1" name="Extended: Cryptographic Key Support">
          <f-element id="fel-mut-hard">
            <title>The TSF shall support <selectables>
                <selectable>immutable hardware</selectable>
                <selectable id="mutable_hardware">mutable hardware</selectable>
              </selectables> REK(s) with a <selectables>
                <selectable>symmetric</selectable>
                <selectable>asymmetric</selectable>
              </selectables> key of strength <selectables>
                <selectable>112 bits</selectable>
                <selectable>128 bits</selectable>
                <selectable>192 bits</selectable>
                <selectable>256 bits</selectable>
              </selectables>. </title>
          </f-element>
          <f-element>
            <title>Each REK shall be hardware-isolated from Rich OS on the TSF in runtime. </title>
          </f-element>
          <f-element>
            <title>Each REK shall be generated by a RBG in accordance with FCS_RBG_EXT.1. </title>
            <note role="application"> Either asymmetric or symmetric keys are allowed; the ST author
              makes the selection appropriate for the device. Symmetric keys must be of size 128 or
              256 bits in order to correspond with FCS_COP.1/ENCRYPT. Asymmetric keys may be of any
              strength corresponding to FCS_CKM.1. <htm:br/><htm:br/> The raw key material of
              "immutable hardware" REK(s) is computationally processed by hardware and software
              cannot access the raw key material. Thus if "immutable-hardware" is selected in
              FCS_CKM_EXT.1.1 it implicitly meets FCS_CKM_EXT.7. If "mutable-hardware" is selected
              in FCS_CKM_EXT.1.1, FCS_CKM_EXT.7 must be included in the ST. <htm:br/><htm:br/> The
              lack of a public/documented API for importing or exporting the REK, when a
              private/undocumented API exists, is not sufficient to meet this requirement.
              <htm:br/><htm:br/> The RBG used to generate a REK may be a RBG native to the hardware
              key container or may be an off-device RBG. If performed by an off-device RBG, the
              device manufacturer shall not be able to access a REK after the manufacturing process
              has been completed. The Evaluation Activities for these two cases differ. </note>
            <aactivity>
              <TSS> The evaluator shall review the TSS to determine that a REK is supported by the
                TOE, that the TSS includes a description of the protection provided by the TOE for a
                REK, and that the TSS includes a description of the method of generation of a REK.
                <htm:br/><htm:br/> The evaluator shall verify that the description of the protection
                of a REK describes how any reading, import, and export of that REK is prevented.
                (For example, if the hardware protecting the REK is removable, the description
                should include how other devices are prevented from reading the REK.) The evaluator
                shall verify that the TSS describes how encryption/decryption/derivation actions are
                isolated so as to prevent applications and system-level processes from reading the
                REK while allowing encryption/decryption/derivation by the key.<htm:br/><htm:br/>
                The evaluator shall verify that the description includes how the Rich OS is
                prevented from accessing the memory containing REK key material, which software is
                allowed access to the REK, how any other software in the execution environment is
                prevented from reading that key material, and what other mechanisms prevent the REK
                key material from being written to shared memory locations between the Rich OS and
                the separate execution environment. <htm:br/><htm:br/> If key derivation is
                performed using a REK, the evaluator shall ensure that the TSS description includes
                a description of the key derivation function and shall verify the key derivation
                uses an approved derivation mode and key expansion algorithm according to
                FCS_CKM_EXT.3.2. <htm:br/><htm:br/> The evaluator shall verify that the generation
                of a REK meets the FCS_RBG_EXT.1.1 and FCS_RBG_EXT.1.2 requirements: <htm:br/>
                <htm:ul>
                  <htm:li>If REK(s) is/are generated on-device, the TSS shall include a description
                    of the generation mechanism including what triggers a generation, how the
                    functionality described by FCS_RBG_EXT.1 is invoked, and whether a separate
                    instance of the RBG is used for REK(s).</htm:li>
                  <htm:li>If REK(s) is/are generated off-device, the TSS shall include evidence that
                    the RBG meets FCS_RBG_EXT.1. This will likely necessitate a second set of RBG
                    documentation equivalent to the documentation provided for the RBG Evaluation
                    Activities. In addition, the TSS shall describe the manufacturing process that
                    prevents the device manufacturer from accessing any REK(s).</htm:li>
                </htm:ul>
              </TSS>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm_ext.2" name="Extended: Cryptographic Key Random Generation">
          <f-element>
            <title>All DEKs shall be <selectables>
                <selectable>randomly generated</selectable>
                <selectable> from the combination of a randomly generated DEK with another DEK or
                  salt in a way that preserves the effective entropy of each factor by <selectables>
                    <selectable>using an XOR operation</selectable>
                    <selectable> concatenating the keys and using a KDF (as described in SP
                      800-108)</selectable>
                    <selectable>concatenating the keys and using a KDF (as described in SP
                      800-56C)</selectable>
                  </selectables></selectable>
              </selectables> with entropy corresponding to the security strength of AES key sizes of <selectables>
                <selectable>128</selectable>
                <selectable>256</selectable>
              </selectables> bits. </title>
            <note role="application"> The intent of this requirement is to ensure that the DEK
              cannot be recovered with less work than a full exhaust of the key space for AES. The
              key generation capability of the TOE uses a RBG implemented on the TOE device
              (FCS_RBG_EXT.1). Either 128-bit or 256-bit (or both) are allowed; the ST author makes
              the selection appropriate for the device. A DEK is used in addition to the KEK so that
              authentication factors can be changed without having to re-encrypt all of the user
              data on the device.<htm:br/><htm:br/> The ST author selects all applicable DEK
              generation types implemented by the TOE.<htm:br/><htm:br/> If combined, the ST author
              shall describe which method of combination is used in order to justify that the
              effective entropy of each factor is preserved, and the ST author shall describe that
              each combined value was originally generated from an Approved DRBG described in
              FCS_RBG_EXT.1 <htm:br/><htm:br/> The documentation of the product's encryption key
              management should be detailed enough that, after reading, the evaluator will
              thoroughly understand the product's key management and how it meets the requirements
              to ensure the keys are adequately protected. This documentation should include an
              essay and diagram(s). This documentation is not required to be part of the TSS - it
              can be submitted as a separate document and marked as developer
              proprietary.<htm:br/><htm:br/> SP 800-56C specifies a two-step key derivation
              procedure that employs an extraction-then-expansion technique for deriving keying
              material from a shared secret generated during a key establishment scheme. The
              Randomness Extraction step as described in Section 5 of SP 800-56C is followed by Key
              Expansion using the key derivation functions defined in SP 800-108 (as described in
              Section 6 of SP 800-56C).<htm:br/><htm:br/>
            </note>
            <aactivity>
              <TSS> The evaluator shall examine the key hierarchy section of the TSS to ensure that
                the formation of all DEKs is described and that the key sizes match that described
                by the ST author. The evaluator shall examine the key hierarchy section of the TSS
                to ensure that each DEK is generated or combined from keys of equal or greater
                security strength using one of the selected methods.<htm:br/>
                <htm:ul>
                  <htm:li>If the symmetric DEK is generated by an RBG, the evaluator shall review
                    the TSS to determine that it describes how the functionality described by
                    FCS_RBG_EXT.1 is invoked. The evaluator uses the description of the RBG
                    functionality in FCS_RBG_EXT.1 or documentation available for the operational
                    environment to determine that the key size being requested is greater than or
                    equal to the key size and mode to be used for the encryption/decryption of the
                    data.</htm:li>
                  <htm:li>If the DEK is formed from a combination, the evaluator shall verify that
                    the TSS describes the method of combination and that this method is either an
                    XOR, or a KDF.</htm:li>
                  <htm:li>If “concatenating the keys and using a KDF (as described in (SP 800-56C)”
                    is selected, the evaluator shall ensure the TSS includes a description of the
                    randomness extraction step.</htm:li>
                </htm:ul> The description must include how an approved untruncated MAC function is
                being used for the randomness extraction step and the evaluator must verify the TSS
                describes that the output length (in bits) of the MAC function is at least as large
                as the targeted security strength (in bits) of the parameter set employed by the key
                establishment scheme (see Tables 1-3 of SP 800-56C).<htm:br/><htm:br/> The
                description must include how the MAC function being used for the randomness
                extraction step is related to the PRF used in the key expansion and verify the TSS
                description includes the correct MAC function:<htm:ul>
                  <htm:li>If an HMAC-hash is used in the randomness extraction step, then the same
                    HMAC-hash (with the same hash function hash) is used as the PRF in the key
                    expansion step.</htm:li>
                  <htm:li>If an AES-CMAC (with key length 128, 192, or 256 bits) is used in the
                    randomness extraction step, then AES-CMAC with a 128-bit key is used as the PRF
                    in the key expansion step.</htm:li>
                  <htm:li>The description must include the lengths of the salt values being used in
                    the randomness extraction step and the evaluator shall verify the TSS
                    description includes correct salt lengths:</htm:li>
                  <htm:li>If an HMAC-hash is being used as the MAC, the salt length can be any value
                    up to the maximum bit length permitted for input to the hash function
                    hash.</htm:li>
                  <htm:li>If an AES-CMAC is being used as the MAC, the salt length shall be the same
                    length as the AES key (i.e. 128, 192, or 256 bits).</htm:li>
                </htm:ul> (conditional) If a KDF is used, the evaluator shall ensure that the TSS
                includes a description of the key derivation function and shall verify the key
                derivation uses an approved derivation mode and key expansion algorithm according to
                SP 800-108 or SP 800-56C.<htm:br/><htm:br/>
              </TSS>
              <Guidance> The evaluator uses the description of the RBG functionality in
                FCS_RBG_EXT.1 or documentation available for the operational environment to
                determine that the key size being generated or combined is identical to the key size
                and mode to be used for the encryption/decryption of the
                data.<htm:br/><htm:br/></Guidance>
              <Tests> If a KDF is used, the evaluator shall perform one or more of the following
                tests to verify the correctness of the key derivation function, depending on the
                mode(s) that are supported. <ctr-ref ref-id="notations"/> maps the data fields to the
                notations used in SP 800-108 and SP 800-56C.<htm:br/><htm:br/>
                <htm:b>
                  <ctr ctr-type="Table" id="notations">: Notations used in SP 800-108 and SP
                    800-56C</ctr>
                </htm:b><htm:br/>
                <htm:table>
                  <htm:tr class="header"><htm:td>Data Fields</htm:td><htm:td>Notations
                    </htm:td><htm:td/></htm:tr>
                  <htm:tr class="header"><htm:td/><htm:td>SP 800-108</htm:td><htm:td>SP
                      800-56C</htm:td></htm:tr>
                  <htm:tr><htm:td>Pseudorandom
                      function</htm:td><htm:td>PRF</htm:td><htm:td>PRF</htm:td></htm:tr>
                  <htm:tr><htm:td>Counter
                    length</htm:td><htm:td>r</htm:td><htm:td>r</htm:td></htm:tr>
                  <htm:tr><htm:td>Length of output of
                      PRF</htm:td><htm:td>h</htm:td><htm:td>h</htm:td></htm:tr>
                  <htm:tr><htm:td>Length of derived keying
                      material</htm:td><htm:td>L</htm:td><htm:td>L</htm:td></htm:tr>
                  <htm:tr><htm:td>Length of input values</htm:td><htm:td>l length</htm:td><htm:td>l
                      length</htm:td></htm:tr>
                  <htm:tr><htm:td>Pseudorandom input values I</htm:td><htm:td>K1 (key derivation
                      key)</htm:td><htm:td>Z (shared secret)</htm:td></htm:tr>
                  <htm:tr><htm:td>Pseudorandom salt
                      values</htm:td><htm:td>n/a</htm:td><htm:td>s</htm:td></htm:tr>
                  <htm:tr><htm:td>Randomness extraction
                      MAC</htm:td><htm:td>n/a</htm:td><htm:td>MAC</htm:td></htm:tr>
                </htm:table>
                <htm:br/><htm:br/>
                <htm:b>Counter Mode Tests:</htm:b><htm:br/><htm:br/> The evaluator shall determine
                the following characteristics of the key derivation function:<htm:ul>
                  <htm:li>One or more pseudorandom functions that are supported by the
                    implementation (PRF).</htm:li>
                  <htm:li>One or more of the values {8, 16, 24, 32} that equal the length of the
                    binary representation of the counter (r).</htm:li>
                  <htm:li>The length (in bits) of the output of the PRF (h).</htm:li>
                  <htm:li>Minimum and maximum values for the length (in bits) of the derived keying
                    material (L). These values can be equal if only one value of L is supported.
                    These must be evenly divisible by h.</htm:li>
                  <htm:li>Up to two values of L that are NOT evenly divisible by h.</htm:li>
                  <htm:li>Location of the counter relative to fixed input data: before, after, or in
                    the middle.</htm:li>
                  <htm:ul>
                    <htm:li>Counter before fixed input data: fixed input data string length (in
                      bytes), fixed input data string value.</htm:li>
                    <htm:li>Counter after fixed input data: fixed input data string length (in
                      bytes), fixed input data string value.</htm:li>
                    <htm:li> Counter in the middle of fixed input data: length of data before
                      counter (in bytes), length of data after counter (in bytes), value of string
                      input before counter, value of string input after counter.</htm:li>
                  </htm:ul>
                  <htm:li>The length (I_length) of the input values I.</htm:li>
                </htm:ul> For each supported combination of I_length, MAC, salt, PRF, counter
                location, value of r, and value of L, the evaluator shall generate 10 test vectors
                that include pseudorandom input values I, and pseudorandom salt values. If there is
                only one value of L that is evenly divisible by h, the evaluator shall generate 20
                test vectors for it. For each test vector, the evaluator shall supply this data to
                the TOE in order to produce the keying material output. <htm:br/><htm:br/> The
                results from each test may either be obtained by the evaluator directly or by
                supplying the inputs to the implementer and receiving the results in response. To
                determine correctness, the evaluator shall compare the resulting values to those
                obtained by submitting the same inputs to a known good implementation. <htm:br/><htm:br/>
                <htm:b> Feedback Mode Tests:</htm:b><htm:br/><htm:br/> The evaluator shall determine
                the following characteristics of the key derivation function: <htm:ul>
                  <htm:li>One or more pseudorandom functions that are supported by the
                    implementation (PRF).</htm:li>
                  <htm:li>The length (in bits) of the output of the PRF (h).</htm:li>
                  <htm:li>Minimum and maximum values for the length (in bits) of the derived keying
                    material (L). These values can be equal if only one value of L is supported.
                    These must be evenly divisible by h.</htm:li>
                  <htm:li>Up to two values of L that are NOT evenly divisible by h.</htm:li>
                  <htm:li>Whether or not zero-length IVs are supported.</htm:li>
                  <htm:li> Whether or not a counter is used, and if so:</htm:li>
                  <htm:ul>
                    <htm:li>One or more of the values {8, 16, 24, 32} that equal the length of the
                      binary representation of the counter (r).</htm:li>
                    <htm:li> Location of the counter relative to fixed input data: before, after, or
                      in the middle.</htm:li>
                    <htm:ul>
                      <htm:li>Counter before fixed input data: fixed input data string length (in
                        bytes), fixed input data string value.</htm:li>
                      <htm:li>Counter after fixed input data: fixed input data string length (in
                        bytes), fixed input data string value.</htm:li>
                      <htm:li>Counter in the middle of fixed input data: length of data before
                        counter (in bytes), length of data after counter (in bytes), value of string
                        input before counter, value of string input after counter.</htm:li>
                    </htm:ul>
                  </htm:ul>
                  <htm:li>The length (I_length) of the input values I.</htm:li>
                </htm:ul> For each supported combination of I_length, MAC, salt, PRF, counter
                location (if a counter is used), value of r (if a counter is used), and value of L,
                the evaluator shall generate 10 test vectors that include pseudorandom input values
                I and pseudorandom salt values. If the KDF supports zero-length IVs, five of these
                test vectors will be accompanied by pseudorandom IVs and the other five will use
                zero-length IVs. If zero-length IVs are not supported, each test vector will be
                accompanied by an pseudorandom IV. If there is only one value of L that is evenly
                divisible by h, the evaluator shall generate 20 test vectors for
                it.<htm:br/><htm:br/> For each test vector, the evaluator shall supply this data to
                the TOE in order to produce the keying material output. The results from each test
                may either be obtained by the evaluator directly or by supplying the inputs to the
                implementer and receiving the results in response. To determine correctness, the
                evaluator shall compare the resulting values to those obtained by submitting the
                same inputs to a known good implementation.<htm:br/><htm:br/>
                <htm:b> Double Pipeline Iteration Mode Tests:</htm:b><htm:br/><htm:br/> The
                evaluator shall determine the following characteristics of the key derivation
                function: <htm:ul>
                  <htm:li>One or more pseudorandom functions that are supported by the
                    implementation (PRF).</htm:li>
                  <htm:li>The length (in bits) of the output of the PRF (h).</htm:li>
                  <htm:li>Minimum and maximum values for the length (in bits) of the derived keying
                    material (L). These values can be equal if only one value of L is supported.
                    These must be evenly divisible by h.</htm:li>
                  <htm:li>Up to two values of L that are NOT evenly divisible by h.</htm:li>
                  <htm:li>Whether or not a counter is used, and if so:</htm:li>
                  <htm:ul>
                    <htm:li> One or more of the values {8, 16, 24, 32} that equal the length of the
                      binary representation of the counter (r).</htm:li>
                    <htm:li>Location of the counter relative to fixed input data: before, after, or
                      in the middle.</htm:li>
                    <htm:ul>
                      <htm:li> Counter before fixed input data: fixed input data string length (in
                        bytes), fixed input data string value.</htm:li>
                      <htm:li> Counter after fixed input data: fixed input data string length (in
                        bytes), fixed input data string value.</htm:li>
                      <htm:li> Counter in the middle of fixed input data: length of data before
                        counter (in bytes), length of data after counter (in bytes), value of string
                        input before counter, value of string input after counter.</htm:li>
                    </htm:ul>
                  </htm:ul>
                  <htm:li>The length (I_length) of the input values I.</htm:li>
                </htm:ul> For each supported combination of I_length, MAC, salt, PRF, counter
                location (if a counter is used), value of r (if a counter is used), and value of L,
                the evaluator shall generate 10 test vectors that include pseudorandom input values
                I, and pseudorandom salt values. If there is only one value of L that is evenly
                divisible by h, the evaluator shall generate 20 test vectors for
                it.<htm:br/><htm:br/> For each test vector, the evaluator shall supply this data to
                the TOE in order to produce the keying material output. The results from each test
                may either be obtained by the evaluator directly or by supplying the inputs to the
                implementer and receiving the results in response. To determine correctness, the
                evaluator shall compare the resulting values to those obtained by submitting the
                same inputs to a known good implementation.<htm:br/><htm:br/>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm_ext.3" name="Extended: Cryptographic Key Generation">
          <f-element>
            <title>The TSF shall use <selectables>
                <selectable>asymmetric KEKs of <assignable>security strength greater than or equal
                    to 112 bits</assignable> security strength</selectable>
                <selectable>symmetric KEKs of <selectables>
                    <selectable>128-bit</selectable>
                    <selectable>256-bit</selectable>
                  </selectables> security strength corresponding to at least the security strength
                  of the keys encrypted by the KEK</selectable>
              </selectables>. </title>
            <note role="application"> The ST author selects all applicable KEK types implemented by
              the TOE. </note>
          </f-element>
          <f-element>
            <title>The TSF shall generate all KEKs using one of the following methods:
                  <htm:ul><htm:li>Derive the KEK from a Password Authentication Factor according to
                  FCS_COP.1.1/CONDITION and </htm:li></htm:ul>
              <selectables linebreak="yes">
                <selectable>Generate the KEK using an RBG that meets this profile (as specified in
                  FCS_RBG_EXT.1)</selectable>
                <selectable>Generate the KEK using a key generation scheme that meets this profile
                  (as specified in FCS_CKM.1)</selectable>
                <selectable>Combine the KEK from other KEKs in a way that preserves the effective
                  entropy of each factor by <selectables>
                    <selectable>using an XOR operation</selectable>
                    <selectable>concatenating the keys and using a KDF (as described in SP
                      800-108)</selectable>
                    <selectable>concatenating the keys and using a KDF (as described in SP
                      800-56C)</selectable>
                    <selectable>encrypting one key with another</selectable>
                  </selectables>
                </selectable>
              </selectables>. </title>
            <note role="application"> The conditioning of passwords is performed in accordance with
              FCS_COP.1/CONDITION. <htm:br/><htm:br/> It is expected that key generation derived
              from conditioning, using an RBG or generation scheme, and through combination, will
              each be necessary to meet the requirements set out in this document. In particular,
                <figref ref-id="Keys"/> has KEKs of each type: KEK_3 is generated, KEK_1 is derived
              from a Password Authentication Factor, and KEK_2 is combined from two KEKs. In <figref
                ref-id="Keys"/>, KEK_3 may either be a symmetric key generated from an RBG or an
              asymmetric key generated using a key generation scheme according to FCS_CKM.1.
              <htm:br/><htm:br/> If combined, the ST author shall describe which method of
              combination is used in order to justify that the effective entropy of each factor is
              preserved. <htm:br/><htm:br/> The documentation of the product's encryption key
              management should be detailed enough that, after reading, the evaluator will
              thoroughly understand the product's key management and how it meets the requirements
              to ensure the keys are adequately protected. This documentation should include an
              essay and diagram(s). This documentation is not required to be part of the TSS - it
              can be submitted as a separate document and marked as developer proprietary.
              <htm:br/><htm:br/> SP 800-56C specifies a two-step key derivation procedure that
              employs an extraction-then-expansion technique for deriving keying material from a
              shared secret generated during a key establishment scheme. The Randomness Extraction
              step as described in Section 5 of SP 800-56C is followed by Key Expansion using the
              key derivation functions defined in SP 800-108 (as described in Section 6 of SP
              800-56C). </note>
            <aactivity>
              <TSS> The evaluator shall examine the key hierarchy section of the TSS to ensure that
                the formation of all KEKs are described and that the key sizes match that described
                by the ST author. The evaluator shall examine the key hierarchy section of the TSS
                to ensure that each key (DEKs, software-based key storage, and KEKs) is encrypted by
                keys of equal or greater security strength using one of the selected
                methods.<htm:br/><htm:br/> The evaluator shall review the TSS to verify that it
                contains a description of the conditioning used to derive KEKs. This description must
                include the size and storage location of salts. This activity may be performed in
                combination with that for FCS_COP.1/CONDITION.<htm:br/><htm:br/> (conditional) If
                the symmetric KEK is generated by an RBG, the evaluator shall review the TSS to
                determine that it describes how the functionality described by FCS_RBG_EXT.1 is
                invoked. The evaluator uses the description of the RBG functionality in
                FCS_RBG_EXT.1 or documentation available for the operational environment to
                determine that the key size being requested is greater than or equal to the key size
                and mode to be used for the encryption/decryption of the data.<htm:br/><htm:br/>
                (conditional) If the KEK is generated according to an asymmetric key scheme, the
                evaluator shall review the TSS to determine that it describes how the functionality
                described by FCS_CKM.1 is invoked. The evaluator uses the description of the key
                generation functionality in FCS_CKM.1 or documentation available for the operational
                environment to determine that the key strength being requested is greater than or
                equal to 112 bits.<htm:br/><htm:br/> (conditional) If the KEK is formed from a
                combination, the evaluator shall verify that the TSS describes the method of
                combination and that this method is either an XOR, a KDF, or
                encryption.<htm:br/><htm:br/> (conditional) If a KDF is used, the evaluator shall
                ensure that the TSS includes a description of the key derivation function and shall
                verify the key derivation uses an approved derivation mode and key expansion
                algorithm according to SP 800-108. <htm:br/><htm:br/> (conditional) If
                "concatenating the keys and using a KDF (as described in (SP 800-56C)" is selected,
                the evaluator shall ensure the TSS includes a description of the randomness
                extraction step. The description must include <htm:ul>
                  <htm:li>How an approved untruncated MAC function is being used for the randomness
                    extraction step and the evaluator must verify the TSS describes that the output
                    length (in bits) of the MAC function is at least as large as the targeted
                    security strength (in bits) of the parameter set employed by the key
                    establishment scheme (see Tables 1-3 of SP 800-56C).</htm:li>
                  <htm:li>How the MAC function being used for the randomness extraction step is
                    related to the PRF used in the key expansion and verify the TSS description
                    includes the correct MAC function:</htm:li>
                  <htm:ul>
                    <htm:li>If an HMAC-hash is used in the randomness extraction step, then the same
                      HMAC-hash (with the same hash function hash) is used as the PRF in the key
                      expansion step.</htm:li>
                    <htm:li>If an AES-CMAC (with key length 128, 192, or 256 bits) is used in the
                      randomness extraction step, then AES-CMAC with a 128-bit key is used as the
                      PRF in the key expansion step.</htm:li>
                  </htm:ul>
                  <htm:li>The lengths of the salt values being used in the randomness extraction
                    step and the evaluator shall verify the TSS description includes correct salt
                    lengths:</htm:li>
                  <htm:ul>
                    <htm:li>If an HMAC-hash is being used as the MAC, the salt length can be any
                      value up to the maximum bit length permitted for input to the hash function
                      hash.</htm:li>
                    <htm:li>If an AES-CMAC is being used as the MAC, the salt length shall be the
                      same length as the AES key (i.e. 128, 192, or 256 bits). </htm:li>
                  </htm:ul>
                </htm:ul><htm:br/>
              </TSS>
              <Tests> If a KDF is used, the evaluator shall perform one or more of the following
                tests to verify the correctness of the key derivation function, depending on the
                mode(s) that are supported. <ctr-ref ref-id="KDF"/> maps the data fields to the
                notations used in SP 800-108 and SP 800-56C. <htm:br/><htm:br/>
                <htm:b>
                  <ctr ctr-type="Table" id="KDF">: Notations used in SP 800-108 and SP 800-56C</ctr>
                </htm:b><htm:br/>
                <htm:table>
                  <htm:tr class="header"><htm:td>Data Fields</htm:td><htm:td colspan="2"
                      >Notations</htm:td></htm:tr>
                  <htm:tr class="header"><htm:td/><htm:td>SP 800-108</htm:td><htm:td>SP
                      800-56C</htm:td></htm:tr>
                  <htm:tr><htm:td>Pseudorandom
                      function</htm:td><htm:td>PRF</htm:td><htm:td>PRF</htm:td></htm:tr>
                  <htm:tr><htm:td>Counter
                    length</htm:td><htm:td>r</htm:td><htm:td>r</htm:td></htm:tr>
                  <htm:tr><htm:td>Length of output of
                      PRF</htm:td><htm:td>h</htm:td><htm:td>h</htm:td></htm:tr>
                  <htm:tr><htm:td>Length of derived keying
                      material</htm:td><htm:td>L</htm:td><htm:td>L</htm:td></htm:tr>
                  <htm:tr><htm:td>Length of input
                      values</htm:td><htm:td>I_length</htm:td><htm:td>I_length</htm:td></htm:tr>
                  <htm:tr><htm:td>Pseudorandom input values I</htm:td><htm:td>K<htm:sub>1</htm:sub>
                      (key derivation key)</htm:td><htm:td>Z (shared secret)</htm:td></htm:tr>
                  <htm:tr><htm:td>Pseudorandom salt
                      values</htm:td><htm:td>n/a</htm:td><htm:td>s</htm:td></htm:tr>
                  <htm:tr><htm:td>Randomness extraction
                      MAC</htm:td><htm:td>n/a</htm:td><htm:td>MAC</htm:td></htm:tr>
                </htm:table>
                <htm:br/><htm:br/>
                <htm:b>Counter Mode Tests:</htm:b>
                <htm:br/><htm:br/> The evaluator shall determine the following characteristics of
                the key derivation function:<htm:ul>
                  <htm:li>One or more pseudorandom functions that are supported by the
                    implementation (PRF).</htm:li>
                  <htm:li>One or more of the values {8, 16, 24, 32} that equal the length of the
                    binary representation of the counter (r).</htm:li>
                  <htm:li>The length (in bits) of the output of the PRF (h).</htm:li>
                  <htm:li>Minimum and maximum values for the length (in bits) of the derived keying
                    material (L). These values can be equal if only one value of L is supported.
                    These must be evenly divisible by h.</htm:li>
                  <htm:li>Up to two values of L that are NOT evenly divisible by h.</htm:li>
                  <htm:li>Location of the counter relative to fixed input data: before, after, or in
                    the middle.<htm:ul>
                      <htm:li>Counter before fixed input data: fixed input data string length (in
                        bytes), fixed input data string value.</htm:li>
                      <htm:li>Counter after fixed input data: fixed input data string length (in
                        bytes), fixed input data string value.</htm:li>
                      <htm:li>Counter in the middle of fixed input data: length of data before
                        counter (in bytes), length of data after counter (in bytes), value of string
                        input before counter, value of string input after counter.</htm:li>
                    </htm:ul></htm:li>
                  <htm:li>The length (I_length) of the input values I.</htm:li>
                </htm:ul><htm:br/> For each supported combination of I_length, MAC, salt, PRF,
                counter location, value of r, and value of L, the evaluator shall generate 10 test
                vectors that include pseudorandom input values I, and pseudorandom salt values. If
                there is only one value of L that is evenly divisible by h, the evaluator shall
                generate 20 test vectors for it. For each test vector, the evaluator shall supply
                this data to the TOE in order to produce the keying material
                output.<htm:br/><htm:br/> The results from each test may either be obtained by the
                evaluator directly or by supplying the inputs to the implementer and receiving the
                results in response. To determine correctness, the evaluator shall compare the
                resulting values to those obtained by submitting the same inputs to a known good
                implementation. <htm:br/><htm:br/>
                <htm:b>Feedback Mode Tests:</htm:b>
                <htm:br/> The evaluator shall determine the following characteristics of the key
                derivation function:<htm:br/><htm:ul>
                  <htm:li>One or more pseudorandom functions that are supported by the
                    implementation (PRF).</htm:li>
                  <htm:li>The length (in bits) of the output of the PRF (h).</htm:li>
                  <htm:li>Minimum and maximum values for the length (in bits) of the derived keying
                    material (L). These values can be equal if only one value of L is supported.
                    These must be evenly divisible by h.</htm:li>
                  <htm:li>Up to two values of L that are NOT evenly divisible by h.</htm:li>
                  <htm:li>Whether or not zero-length IVs are supported.</htm:li>
                  <htm:li>Whether or not a counter is used, and if so: <htm:ul>
                      <htm:li>One or more of the values {8, 16, 24, 32} that equal the length of the
                        binary representation of the counter (r).</htm:li>
                      <htm:li>Location of the counter relative to fixed input data: before, after,
                        or in the middle.</htm:li>
                      <htm:ul>
                        <htm:li>Counter before fixed input data: fixed input data string length (in
                          bytes), fixed input data string value.</htm:li>
                        <htm:li>Counter after fixed input data: fixed input data string length (in
                          bytes), fixed input data string value.</htm:li>
                        <htm:li>Counter in the middle of fixed input data: length of data before
                          counter (in bytes), length of data after counter (in bytes), value of
                          string input before counter, value of string input after counter.</htm:li>
                      </htm:ul>
                    </htm:ul>
                  </htm:li>
                  <htm:li>The length (I_length) of the input values I.</htm:li>
                </htm:ul><htm:br/> For each supported combination of I_length, MAC, salt, PRF,
                counter location (if a counter is used), value of r (if a counter is used), and
                value of L, the evaluator shall generate 10 test vectors that include pseudorandom
                input values I and pseudorandom salt values. If the KDF supports zero-length IVs,
                five of these test vectors will be accompanied by pseudorandom IVs and the other
                five will use zero-length IVs. If zero-length IVs are not supported, each test
                vector will be accompanied by an pseudorandom IV. If there is only one value of L
                that is evenly divisible by h, the evaluator shall generate 20 test vectors for
                it.<htm:br/><htm:br/> For each test vector, the evaluator shall supply this data to
                the TOE in order to produce the keying material output. The results from each test
                may either be obtained by the evaluator directly or by supplying the inputs to the
                implementer and receiving the results in response. To determine correctness, the
                evaluator shall compare the resulting values to those obtained by submitting the
                same inputs to a known good implementation.<htm:br/><htm:br/>
                <htm:b>Double Pipeline Iteration Mode Tests:</htm:b><htm:br/> The evaluator shall
                determine the following characteristics of the key derivation function:<htm:br/><htm:ul>
                  <htm:li>One or more pseudorandom functions that are supported by the
                    implementation (PRF).</htm:li>
                  <htm:li>The length (in bits) of the output of the PRF (h).</htm:li>
                  <htm:li>Minimum and maximum values for the length (in bits) of the derived keying
                    material (L). These values can be equal if only one value of L is supported.
                    These must be evenly divisible by h.</htm:li>
                  <htm:li>Up to two values of L that are NOT evenly divisible by h.</htm:li>
                  <htm:li>Whether or not a counter is used, and if so:<htm:ul>
                      <htm:li>One or more of the values {8, 16, 24, 32} that equal the length of the
                        binary representation of the counter (r).</htm:li>
                      <htm:li>Location of the counter relative to fixed input data: before, after,
                        or in the middle. <htm:ul>
                          <htm:li>Counter before fixed input data: fixed input data string length
                            (in bytes), fixed input data string value.</htm:li>
                          <htm:li>Counter after fixed input data: fixed input data string length (in
                            bytes), fixed input data string value.</htm:li>
                          <htm:li>Counter in the middle of fixed input data: length of data before
                            counter (in bytes), length of data after counter (in bytes), value of
                            string input before counter, value of string input after
                            counter.</htm:li>
                        </htm:ul>
                      </htm:li>
                    </htm:ul>
                  </htm:li>
                  <htm:li>The length (I_length) of the input values I.</htm:li>
                </htm:ul><htm:br/> For each supported combination of I_length, MAC, salt, PRF,
                counter location (if a counter is used), value of r (if a counter is used), and
                value of L, the evaluator shall generate 10 test vectors that include pseudorandom
                input values I, and pseudorandom salt values. If there is only one value of L that
                is evenly divisible by h, the evaluator shall generate 20 test vectors for it.
                <htm:br/><htm:br/> For each test vector, the evaluator shall supply this data to the
                TOE in order to produce the keying material output. The results from each test may
                either be obtained by the evaluator directly or by supplying the inputs to the
                implementer and receiving the results in response. To determine correctness, the
                evaluator shall compare the resulting values to those obtained by submitting the
                same inputs to a known good implementation. </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm_ext.4" name="Extended: Key Destruction">
          <f-element>
            <title>The TSF shall destroy cryptographic keys in accordance with the specified cryptographic key destruction methods: <htm:br/>
              <htm:ul>
                <htm:li>by clearing the KEK encrypting the target key</htm:li>
                <htm:li>in accordance with the following rules 
                  <htm:ul><htm:li> For volatile memory, the destruction shall be executed by a single direct overwrite <selectables>
                        <selectable>consisting of a pseudo-random pattern using the TSF’s
                          RBG</selectable>
                        <selectable>consisting of zeroes</selectable>
                      </selectables>.</htm:li>
                    <htm:li>For non-volatile EEPROM, the destruction shall be executed by a single
                      direct overwrite consisting of a pseudo random pattern using the TSF’s RBG (as
                      specified in FCS_RBG_EXT.1), followed by a read-verify.</htm:li>
                    <htm:li>For non-volatile flash memory, that is not wear-leveled, the destruction
                      shall be executed <selectables>
                        <selectable>by a single direct overwrite consisting of zeros followed by a
                          read-verify</selectable>
                        <selectable>by a block erase that erases the reference to memory that stores
                          data as well as the data itself </selectable>
                      </selectables>.</htm:li>
                    <htm:li>For non-volatile flash memory, that is wear-leveled, the destruction
                      shall be executed <selectables>
                        <selectable>by a single direct overwrite consisting of zeros</selectable>
                        <selectable>by a block erase</selectable>
                      </selectables>.</htm:li>
                    <htm:li>For non-volatile memory other than EEPROM and flash, the destruction
                      shall be executed by a single direct overwrite with a random pattern that is
                      changed before each write.</htm:li>
                  </htm:ul>
                </htm:li>
              </htm:ul>
            </title>
            <note role="application"> The clearing indicated above applies to each intermediate
              storage area for plaintext key/cryptographic critical security parameter (i.e. any
              storage, such as memory buffers, that is included in the path of such data) upon the
              transfer of the key/cryptographic critical security parameter to another location.
              <htm:br/><htm:br/> Because plaintext key material is not allowed to be written to
              non-volatile memory (FPT_KST_EXT.1), the second selection only applies to key material
              written to volatile memory. </note>
          </f-element>
          <f-element>
            <title>The TSF shall destroy all plaintext keying material and critical security
              parameters when no longer needed. </title>
            <note role="application"> For the purposes of this requirement, plaintext keying
              material refers to authentication data, passwords, secret/private symmetric keys,
              private asymmetric keys, data used to derive keys, values derived from passwords, etc.
              If a BAF is selected in FIA_UAU.5.1 the enrollment or authentication templates are not
              subject to this requirement, since templates are not suitable for deriving keying
              material. However, source biometric data (i.e. fingerprint image or friction ridge
              pattern), the features an algorithm uses to perform biometric authentication for
              enrollment or verification (e.g. location of minutia), threshold values used in making
              the match adjudication, intermediate values calculated while building an enrollment or
              authentication template (i.e. direction maps, minutia counts, binarized and
              skeletonized representations of friction ridge patterns, etc.), and final match scores
              are examples of critical security parameters that must be destroyed when no longer
              needed. <htm:br/><htm:br/> Key destruction procedures are performed in accordance with
              FCS_CKM_EXT.4.1. <htm:br/><htm:br/> There are multiple situations in which plaintext
              keying material is no longer necessary, including when the TOE is powered off, when
              the wipe function is performed, when trusted channels are disconnected, when keying
              material is no longer needed by the trusted channel per the protocol, and when
              transitioning to the locked state (for those values derived from the Password
              Authentication Factor or that key material which is protected by the password-derived
              or biometric-unlocked KEK according to FCS_STG_EXT.2 – see <figref ref-id="Keys"/>).
              For keys (or key material used to derive those keys) protecting sensitive data
              received in the locked state, "no longer needed" includes "while in the locked state."
              <htm:br/><htm:br/> Trusted channels may include TLS, HTTPS, DTLS, IPsec VPNs,
              Bluetooth BR/EDR, and Bluetooth LE. The plaintext keying material for these channels
              includes (but is not limited to) master secrets, and Security Associations (SAs).
              <htm:br/><htm:br/> If REK(s) are processed in a separate execution environment on the
              same Application Processor as the Rich OS, REK key material must be cleared from RAM
              immediately after use, and at least, must be wiped when the device is locked, as the
              REK is part of the key hierarchy protecting sensitive data. </note>
            <aactivity>
              <TSS> The evaluator shall check to ensure the TSS lists each type of plaintext key
                material (DEKs, software-based key storage, KEKs, trusted channel keys, passwords,
                etc.) and its generation and storage location. <htm:br/><htm:br/> The evaluator
                shall verify that the TSS describes when each type of key material is cleared (for
                example, on system power off, on wipe function, on disconnection of trusted
                channels, when no longer needed by the trusted channel per the protocol, when
                transitioning to the locked state, and possibly including immediately after use,
                while in the locked state, etc.). <htm:br/><htm:br/> The evaluator shall also verify
                that, for each type of key, the type of clearing procedure that is performed
                (cryptographic erase, overwrite with zeros, overwrite with random pattern, or block
                erase) is listed. If different types of memory are used to store the materials to be
                protected, the evaluator shall check to ensure that the TSS describes the clearing
                procedure in terms of the memory in which the data are stored. <htm:br/><htm:br/>
              </TSS>
              <Tests>
                <htm:b>Evaluation Activity Note:</htm:b>The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products. <htm:br/><htm:br/> For each software and
                firmware key clearing situation (including on system power off, on wipe function, on
                disconnection of trusted channels, when no longer needed by the trusted channel per
                the protocol, when transitioning to the locked state, and possibly including
                immediately after use, while in the locked state) the evaluator shall repeat the
                following tests. <htm:br/><htm:br/> For these tests the evaluator shall utilize
                appropriate development environment (e.g. a Virtual Machine) and development tools
                (debuggers, simulators, etc.) to test that keys are cleared, including all copies of
                the key that may have been created internally by the TOE during normal cryptographic
                processing with that key. <htm:br/><htm:br/>
                <testlist>
                  <test> Applied to each key held as plaintext in volatile memory and subject to
                    destruction by overwrite by the TOE (whether or not the plaintext value is
                    subsequently encrypted for storage in volatile or non-volatile memory). In the
                    case where the only selection made for the destruction method key was removal of
                    power, then this test is unnecessary. The evaluator shall: <htm:br/>
                    <htm:ol>
                      <htm:li>Record the value of the key in the TOE subject to clearing.</htm:li>
                      <htm:li>Cause the TOE to perform a normal cryptographic processing with the
                        key from Step #1.</htm:li>
                      <htm:li>Cause the TOE to clear the key.</htm:li>
                      <htm:li>Cause the TOE to stop the execution but not exit.</htm:li>
                      <htm:li>Cause the TOE to dump the entire memory of the TOE into a binary
                        file.</htm:li>
                      <htm:li>Search the content of the binary file created in Step #5 for instances
                        of the known key value from Step #1.</htm:li>
                      <htm:li>Break the key value from Step #1 into 3 similar sized pieces and
                        perform a search using each piece.</htm:li>
                    </htm:ol>
                    <htm:br/> Steps 1-6 ensure that the complete key does not exist anywhere in
                    volatile memory. If a copy is found, then the test fails. <htm:br/><htm:br/>
                    Step 7 ensures that partial key fragments do not remain in memory. If a fragment
                    is found, there is a minuscule chance that it is not within the context of a key
                    (e.g., some random bits that happen to match). If this is the case the test
                    should be repeated with a different key in Step #1. If a fragment is found the
                    test fails. <htm:br/><htm:br/>
                  </test>
                  <test> Applied to each key held in non-volatile memory and subject to destruction
                    by overwrite by the TOE. The evaluator shall use special tools (as needed),
                    provided by the TOE developer if necessary, to view the key storage location: <htm:br/>
                    <htm:ol>
                      <htm:li>Record the value of the key in the TOE subject to clearing.</htm:li>
                      <htm:li>Cause the TOE to perform a normal cryptographic processing with the
                        key from Step #1.</htm:li>
                      <htm:li>Cause the TOE to clear the key.</htm:li>
                      <htm:li>Search the non-volatile memory the key was stored in for instances of
                        the known key value from Step #1. If a copy is found, then the test
                        fails.</htm:li>
                      <htm:li>Break the key value from Step #1 into 3 similar sized pieces and
                        perform a search using each piece. If a fragment is found then the test is
                        repeated (as described for test 1 above), and if a fragment is found in the
                        repeated test then the test fails.</htm:li>
                    </htm:ol>
                    <htm:br/><htm:br/>
                  </test>
                  <test> Applied to each key held as non-volatile memory and subject to destruction
                    by overwrite by the TOE. The evaluator shall use special tools (as needed),
                    provided by the TOE developer if necessary, to view the key storage location: <htm:br/>
                    <htm:ol>
                      <htm:li>Record the storage location of the key in the TOE subject to
                        clearing.</htm:li>
                      <htm:li>Cause the TOE to perform a normal cryptographic processing with the
                        key from Step #1.</htm:li>
                      <htm:li>Cause the TOE to clear the key.</htm:li>
                      <htm:li>Read the storage location in Step #1 of non-volatile memory to ensure
                        the appropriate pattern is utilized. </htm:li>
                    </htm:ol>
                    <htm:br/> The test succeeds if correct pattern is used to overwrite the key in
                    the memory location. If the pattern is not found the test fails. </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm_ext.5" name="Extended: TSF Wipe">
          <f-element>
            <title>The TSF shall wipe all protected data by <selectables linebreak="yes">
               <selectable>Cryptographically erasing the encrypted DEKs and/or the KEKs in non-volatile memory by following the requirements in FCS_CKM_EXT.4.1</selectable>
                <selectable>Overwriting all PD according to the following rules: <htm:ul>
                    <htm:li>For EEPROM, the destruction shall be executed by a single direct overwrite consisting of a pseudo random pattern using the TSF’s RBG (as specified in FCS_RBG_EXT.1, followed by a read-verify. </htm:li>
                    <htm:li>For flash memory, that is not wear-leveled, the destruction shall be executed <selectables>
                        <selectable>by a single direct overwrite consisting of zeros followed by a read-verify</selectable>
                        <selectable>by a block erase that erases the reference to memory that stores data as well as the data itself</selectable>
                      </selectables>. </htm:li>
                    <htm:li>For flash memory, that is wear-leveled, the destruction shall be executed <selectables>
                        <selectable>by a single direct overwrite consisting of zeros</selectable>
                        <selectable>by a block erase</selectable>
                      </selectables>. </htm:li>
                   <htm:li>For non-volatile memory other than EEPROM and flash, the destruction shall be executed by a single direct overwrite with a random pattern that is changed before each write. </htm:li>
                  </htm:ul>
                </selectable>
              </selectables>. 
            </title>
            <note role="Application"> 
              Protected data is all non-TSF data, including all user or enterprise data. Some or all of this data may be considered sensitive data as well.
            </note>
          </f-element>
          <f-element>
            <title>The TSF shall perform a power cycle on conclusion of the wipe procedure. </title>
            <note role="application"> 
              The ST author shall select which method of wipe the TSF performs.</note>
            <aactivity>
              <TSS> 
                The evaluator shall check to ensure the TSS describes how the device is wiped; and the type of clearing procedure that is performed (cryptographic erase or overwrite) and, if overwrite is performed, the overwrite procedure (overwrite with zeros, overwrite three or more times by a different alternating pattern, overwrite with random pattern, or block erase). If different types of memory are used to store the data to be protected, the evaluator shall check to ensure that the TSS describes the clearing procedure in terms of the memory in which the data are stored (for example, data stored on flash are cleared by overwriting once with zeros, while data stored on the internal persistent storage device are cleared by overwriting three times with a random pattern that is changed before each write). <htm:br/><htm:br/>
              </TSS>
              <Tests>
                <htm:b>Evaluation Activity Note:</htm:b> 
                The following test may require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on consumer Mobile Device products. <htm:br/><htm:br/> 
                <testlist>
                  <test>The evaluator shall perform one of the following tests. The test before and after the wipe command shall be identical. This test shall be repeated for each type of memory used to store the data to be protected. <htm:br/><htm:br/>
                  <testlist>
                    <test><htm:b>For File-based Methods:</htm:b><htm:br/>
                      The evaluator shall enable encryption according to the AGD guidance. The evaluator shall create a user data (protected data or sensitive data) file, for example, by using an application. The evaluator shall use a tool provided by the developer to examine this data stored in memory (for example, by examining a decrypted files). The evaluator shall initiate the wipe command according to the AGD guidance provided for FMT_SMF_EXT.1. The evaluator shall use a tool provided by the developer to examine the same data location in memory to verify that the data has been wiped according to the method described in the TSS (for example, the files are still encrypted and cannot be accessed). </test>
                    <test><htm:b>For Volume-based Methods:</htm:b><htm:br/>
                      The evaluator shall enable encryption according to the AGD guidance. The evaluator shall create a unique data string, for example, by using an application. The evaluator shall use a tool provided by the developer to search decrypted data for the unique string. The evaluator shall initiate the wipe command according to the AGD guidance provided for FMT_SMF_EXT.1. The evaluator shall use a tool provided by the developer to search for the same unique string in decrypted memory to verify that the data has been wiped according to the method described in the TSS (for example, the files are still encrypted and cannot be accessed).</test>
                  </testlist>               
                  </test>
                  <test>
                    The evaluator shall cause the device to wipe and verify that the wipe concludes with a power cycle.                                 
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm_ext.6" name="Extended: Salt Generation">
          <f-element>
            <title>The TSF shall generate all salts using a RBG that meets FCS_RBG_EXT.1. </title>
            <note role="application">This requirement refers only to salt generation. In the
              examples given, a salt may be used as part of the scheme/algorithm. Requirements on
              nonces and/or ephemeral keys are provided elsewhere, if needed. The list below is
              provided for clarity, in order to give examples of where the TSF may be generating
              cryptographic salts; it is not exhaustive nor is it intended to mandate implementation
              of all of these schemes/algorithms. Cryptographic salts are generated for various uses
              including: <htm:ul>
                <htm:li>RSASSA-PSS signature generation</htm:li>
                <htm:li>DSA signature generation</htm:li>
                <htm:li>ECDSA signature generation</htm:li>
                <htm:li>DH static key agreement scheme</htm:li>
                <htm:li>PBKDF</htm:li>
                <htm:li>Key Agreement Scheme in NIST SP 800-56B</htm:li>
                <htm:li>AES GCM</htm:li>
              </htm:ul>
            </note>
            <aactivity>
              <TSS> The evaluator shall verify that the TSS contains a description regarding the
                salt generation, including which algorithms on the TOE require salts. The evaluator
                shall confirm that the salt is generated using an RBG described in FCS_RBG_EXT.1.
                For PBKDF derivation of KEKs, this Evaluation Activity may be performed in
                conjunction with FCS_CKM_EXT.3.2. </TSS>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_ckm_ext.7" name="Extended: Cryptographic Key Support (REK)" status="sel-based">
          <selection-depends req="fel-mut-hard" ids="mutable_hardware"/>
          <f-element>
            <title>A REK shall not be able to be read from or exported from the hardware. </title>
            <note role="application">If "mutable-hardware" is selected in FCS_CKM_EXT.1.1,
              FCS_CKM_EXT.7 must be included in the ST. Note that if "immutable-hardware" is
              selected in FCS_CKM_EXT.1.1 it implicitly meets FCS_CKM_EXT.7. <htm:br/><htm:br/> The
              lack of a public/documented API for importing or exporting, when a
              private/undocumented API exists, is not sufficient to meet this requirement. </note>
            <aactivity>
              <Tests>The Evaluation Activity for this element is performed in conjunction with the
                Evaluation Activity for FCS_CKM_EXT.1. </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_cop.1" name="Cryptographic operation" iteration="ENCRYPT">
          <f-element>
            <title>The TSF shall perform encryption/decryption in accordance with a specified
              cryptographic algorithm: <htm:br/>
              <htm:ul>
                <htm:li><refinement>AES-CBC (as defined in FIPS PUB 197, and NIST SP 800-38A) mode</refinement></htm:li> 
                <htm:li><refinement>AES-CCMP (as defined in FIPS PUB 197, NIST SP 800-38C and IEEE 802.11-2012), and</refinement></htm:li> 
                <htm:li><selectables linebreak="yes"> 
                  <selectable><refinement>AES Key Wrap (KW) (as defined in NIST SP 800-38F)</refinement></selectable> 
                  <selectable><refinement>AES Key Wrap with Padding (KWP) (as defined in NIST SP 800-38F)</refinement></selectable> 
                  <selectable><refinement>AES-GCM (as defined in NIST SP 800-38D)</refinement></selectable> 
                  <selectable><refinement>AES-CCM (as defined in NIST SP 800-38C)</refinement></selectable> 
                  <selectable><refinement>AES-XTS (as defined in NIST SP 800-38E) mode</refinement></selectable> 
                  <selectable><refinement>AES-CCMP-256 (as defined in NIST SP800-38C and IEEE 802.11ac-2013)</refinement></selectable> 
                  <selectable><refinement>AES-GCMP-256 (as defined in NIST SP800-38D and IEEE 802.11ac-2013)</refinement></selectable> 
                  <selectable exclusive="yes"><refinement>no other modes</refinement></selectable> </selectables></htm:li>
              </htm:ul> and cryptographic key sizes 128-bit key sizes and <selectables>
                <selectable><refinement>256-bit key sizes</refinement></selectable>
                <selectable exclusive="yes"><refinement>no other key sizes</refinement></selectable>
              </selectables>. </title>
            <note role="application">
              For the first selection, the ST author should choose the mode or modes in which AES operates. For the second selection, the ST author should choose the key sizes that are supported by this functionality. 128-bit CBC and CCMP are required in order to comply with WLAN Client Extended Package. <htm:br/><htm:br/> 
              Note that to comply with the WLAN Client EP, AES CCMP (which uses AES in CCM as specified in SP 800-38C) with cryptographic key size of 128 bits must be implemented. If CCM is only implemented to support CCMP for WLAN, AES-CCM does not need be selected. Optionally, AES-CCMP-256 or AES-GCMP-256 with cryptographic key size of 256 bits may be implemented. 
            </note>
            <aactivity>
              <Tests>
                <htm:b>Evaluation Activity Note:</htm:b> The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products. <htm:br/><htm:br/>
                <testlist><htm:b><htm:u>AES-CBC Tests</htm:u></htm:b>
                  <test>AES-CBC Known Answer Tests <htm:br/><htm:br/> There are four Known Answer
                    Tests (KATs), described below. In all KATs, the plaintext, ciphertext, and IV
                    values shall be 128-bit blocks. The results from each test may either be
                    obtained by the evaluator directly or by supplying the inputs to the implementer
                    and receiving the results in response. To determine correctness, the evaluator
                    shall compare the resulting values to those obtained by submitting the same
                    inputs to a known good implementation. <testlist>
                      <htm:br/>
                      <test>KAT-1. To test the encrypt functionality of AES-CBC, the evaluator shall
                        supply a set of 10 plaintext values and obtain the ciphertext value that
                        results from AES-CBC encryption of the given plaintext using a key value of
                        all zeros and an IV of all zeros. Five plaintext values shall be encrypted
                        with a 128-bit all-zeros key, and the other five shall be encrypted with a
                        256-bit all-zeros key. <htm:br/><htm:br/> To test the decrypt functionality
                        of AES-CBC, the evaluator shall perform the same test as for encrypt, using
                        10 ciphertext values as input and AES-CBC decryption. </test>
                      <htm:br/>
                      <test>KAT-2. To test the encrypt functionality of AES-CBC, the evaluator shall
                        supply a set of 10 key values and obtain the ciphertext value that results
                        from AES-CBC encryption of an all-zeros plaintext using the given key value
                        and an IV of all zeros. Five of the keys shall be 128-bit keys, and the
                        other five shall be 256-bit keys. <htm:br/><htm:br/> To test the decrypt
                        functionality of AES-CBC, the evaluator shall perform the same test as for
                        encrypt, using an all-zero ciphertext value as input and AES-CBC decryption. </test>
                      <htm:br/>
                      <test>KAT-3. To test the encrypt functionality of AES-CBC, the evaluator shall
                        supply the two sets of key values described below and obtain the ciphertext
                        value that results from AES encryption of an all-zeros plaintext using the
                        given key value and an IV of all zeros. The first set of keys shall have 128
                        128-bit keys, and the second set shall have 256 256-bit keys. Key i in each
                        set shall have the leftmost i bits be ones and the rightmost N-i bits be
                        zeros, for i in [1,N]. <htm:br/><htm:br/> To test the decrypt functionality
                        of AES-CBC, the evaluator shall supply the two sets of key and ciphertext
                        value pairs described below and obtain the plaintext value that results from
                        AES-CBC decryption of the given ciphertext using the given key and an IV of
                        all zeros. The first set of key/ciphertext pairs shall have 128 128-bit
                        key/ciphertext pairs, and the second set of key/ciphertext pairs shall have
                        256 256-bit key/ciphertext pairs. Key i in each set shall have the leftmost
                        i bits be ones and the rightmost N-i bits be zeros, for i in [1,N]. The
                        ciphertext value in each pair shall be the value that results in an
                        all-zeros plaintext when decrypted with its corresponding key. </test>
                      <htm:br/>
                      <test>KAT-4. To test the encrypt functionality of AES-CBC, the evaluator shall
                        supply the set of 128 plaintext values described below and obtain the two
                        ciphertext values that result from AES-CBC encryption of the given plaintext
                        using a 128-bit key value of all zeros with an IV of all zeros and using a
                        256-bit key value of all zeros with an IV of all zeros, respectively.
                        Plaintext value i in each set shall have the leftmost i bits be ones and the
                        rightmost 128-i bits be zeros, for i in [1,128]. <htm:br/><htm:br/> To test
                        the decrypt functionality of AES-CBC, the evaluator shall perform the same
                        test as for encrypt, using ciphertext values of the same form as the
                        plaintext in the encrypt test as input and AES-CBC decryption. </test>
                    </testlist>
                  </test>
                  <htm:br/>
                  <test>AES-CBC Multi-Block Message Test<htm:br/><htm:br/> The evaluator shall test
                    the encrypt functionality by encrypting an i-block message where 1 &lt; i &lt;=
                    10. The evaluator shall choose a key, an IV and plaintext message of length i
                    blocks and encrypt the message, using the mode to be tested, with the chosen key
                    and IV. The ciphertext shall be compared to the result of encrypting the same
                    plaintext message with the same key and IV using a known good implementation.
                    <htm:br/><htm:br/> The evaluator shall also test the decrypt functionality for
                    each mode by decrypting an i-block message where 1 &lt; i &lt;= 10. The
                    evaluator shall choose a key, an IV and a ciphertext message of length i blocks
                    and decrypt the message, using the mode to be tested, with the chosen key and
                    IV. The plaintext shall be compared to the result of decrypting the same
                    ciphertext message with the same key and IV using a known good implementation. </test>
                  <htm:br/>
                  <test>AES-CBC Monte Carlo Tests<htm:br/><htm:br/> The evaluator shall test the
                    encrypt functionality using a set of 200 plaintext, IV, and key 3-tuples. 100 of
                    these shall use 128 bit keys, and 100 shall use 256 bit keys. The plaintext and
                    IV values shall be 128-bit blocks. For each 3-tuple, 1000 iterations shall be
                    run as follows: <htm:br/><htm:br/>
                    <htm:pre> # Input: PT, IV, Key for i = 1 to 1000: if i == 1: CT[1] =
                      AES-CBC-Encrypt(Key, IV, PT) PT = IV else: CT[i] = AES-CBC-Encrypt(Key, PT) PT
                      = CT[i-1] </htm:pre>
                    <htm:br/> The ciphertext computed in the 1000<htm:sup>th</htm:sup> iteration
                    (i.e. CT[1000]) is the result for that trial. This result shall be compared to
                    the result of running 1000 iterations with the same values using a known good
                    implementation. <htm:br/><htm:br/> The evaluator shall test the decrypt
                    functionality using the same test as for encrypt, exchanging CT and PT and
                    replacing AES-CBC-Encrypt with AES-CBC-Decrypt. </test>
                </testlist>
                <htm:br/>
                <testlist><htm:b><htm:u>AES-CCM Tests</htm:u></htm:b>
                  <test> The evaluator shall test the generation-encryption and
                    decryption-verification functionality of AES-CCM for the following input
                    parameter and tag lengths: <htm:br/><htm:br/>
                    <htm:ul style="list-style-type:none">
                      <htm:li><htm:b>128 bit and 256 bit keys</htm:b></htm:li>
                      <htm:br/>
                      <htm:li><htm:b>Two payload lengths.</htm:b> One payload length shall be the
                        shortest supported payload length, greater than or equal to zero bytes. The
                        other payload length shall be the longest supported payload length, less
                        than or equal to 32 bytes (256 bits). </htm:li>
                      <htm:br/>
                      <htm:li><htm:b>Two or three associated data lengths.</htm:b> One associated
                        data length shall be 0, if supported. One associated data length shall be
                        the shortest supported payload length, greater than or equal to zero bytes.
                        One associated data length shall be the longest supported payload length,
                        less than or equal to 32 bytes (256 bits). If the implementation supports an
                        associated data length of 2<htm:sup>16</htm:sup> bytes, an associated data
                        length of 2<htm:sup>16</htm:sup> bytes shall be tested. </htm:li>
                      <htm:br/>
                      <htm:li><htm:b>Nonce lengths.</htm:b> All supported nonce lengths between 7
                        and 13 bytes, inclusive, shall be tested. </htm:li>
                      <htm:br/>
                      <htm:li><htm:b>Tag lengths.</htm:b> All supported tag lengths of 4, 6, 8, 10,
                        12, 14 and 16 bytes shall be tested.</htm:li>
                    </htm:ul> To test the generation-encryption functionality of AES-CCM, the
                    evaluator shall perform the following four tests: <htm:br/>
                    <testlist>
                      <test>For EACH supported key and associated data length and ANY supported
                        payload, nonce and tag length, the evaluator shall supply one key value, one
                        nonce value and 10 pairs of associated data and payload values and obtain
                        the resulting ciphertext.</test>
                      <htm:br/>
                      <test>For EACH supported key and payload length and ANY supported associated
                        data, nonce and tag length, the evaluator shall supply one key value, one
                        nonce value and 10 pairs of associated data and payload values and obtain
                        the resulting ciphertext.</test>
                      <htm:br/>
                      <test>For EACH supported key and nonce length and ANY supported associated
                        data, payload and tag length, the evaluator shall supply one key value and
                        10 associated data, payload and nonce value 3-tuples and obtain the
                        resulting ciphertext.</test>
                      <htm:br/>
                      <test>For EACH supported key and tag length and ANY supported associated data,
                        payload and nonce length, the evaluator shall supply one key value, one
                        nonce value and 10 pairs of associated data and payload values and obtain
                        the resulting ciphertext.</test>
                    </testlist> To determine correctness in each of the above tests, the evaluator
                    shall compare the ciphertext with the result of generation-encryption of the
                    same inputs with a known good implementation. <htm:br/><htm:br/> To test the
                    decryption-verification functionality of AES-CCM, for EACH combination of
                    supported associated data length, payload length, nonce length and tag length,
                    the evaluator shall supply a key value and 15 nonce, associated data and
                    ciphertext 3-tuples and obtain either a FAIL result or a PASS result with the
                    decrypted payload. The evaluator shall supply 10 tuples that should FAIL and 5
                    that should PASS per set of 15. </test>
                </testlist>
                <htm:br/>
                <testlist><htm:b><htm:u>AES-GCM Test</htm:u></htm:b><htm:br/> The evaluator shall
                  test the authenticated encrypt functionality of AES-GCM for each combination of
                  the following input parameter lengths: <htm:br/><htm:br/>
                  <htm:ul style="list-style-type:none">
                    <htm:li><htm:b>128 bit and 256 bit keys</htm:b></htm:li>
                    <htm:br/>
                    <htm:li><htm:b>Two plaintext lengths.</htm:b> One of the plaintext lengths shall
                      be a non-zero integer multiple of 128 bits, if supported. The other plaintext
                      length shall not be an integer multiple of 128 bits, if supported. </htm:li>
                    <htm:br/>
                    <htm:li><htm:b>Three AAD lengths.</htm:b> One AAD length shall be 0, if
                      supported. One AAD length shall be a non-zero integer multiple of 128 bits, if
                      supported. One AAD length shall not be an integer multiple of 128 bits, if
                      supported. </htm:li>
                    <htm:br/>
                    <htm:li><htm:b>Two IV lengths.</htm:b> If 96 bit IV is supported, 96 bits shall
                      be one of the two IV lengths tested. </htm:li>
                  </htm:ul>
                  <test>The evaluator shall test the encrypt functionality using a set of 10 key,
                    plaintext, AAD, and IV tuples for each combination of parameter lengths above
                    and obtain the ciphertext value and tag that results from AES-GCM authenticated
                    encrypt. Each supported tag length shall be tested at least once per set of 10.
                    The IV value may be supplied by the evaluator or the implementation being
                    tested, as long as it is known. </test>
                  <htm:br/>
                  <test>The evaluator shall test the decrypt functionality using a set of 10 key,
                    ciphertext, tag, AAD, and IV 5-tuples for each combination of parameter lengths
                    above and obtain a Pass/Fail result on authentication and the decrypted
                    plaintext if Pass. The set shall include five tuples that Pass and five that
                    Fail. </test>
                  <htm:br/> The results from each test may either be obtained by the evaluator
                  directly or by supplying the inputs to the implementer and receiving the results
                  in response. To determine correctness, the evaluator shall compare the resulting
                  values to those obtained by submitting the same inputs to a known good
                  implementation. </testlist><htm:br/>
                <testlist><htm:b><htm:u>XTS-AES Test</htm:u></htm:b><htm:br/>
                  <test>The evaluator shall test the encrypt functionality of XTS-AES for each
                    combination of the following input parameter lengths: <htm:br/><htm:br/>
                    <htm:ul style="list-style-type:none">
                      <htm:li><htm:b>256 bit (for AES-128) and 512 bit (for AES-256)
                        keys</htm:b></htm:li><htm:br/>
                      <htm:li><htm:b>Three data unit (i.e. plaintext) lengths.</htm:b> One of the
                        data unit lengths shall be a non-zero integer multiple of 128 bits, if
                        supported. One of the data unit lengths shall be an integer multiple of 128
                        bits, if supported. The third data unit length shall be either the longest
                        supported data unit length or 216 bits, whichever is smaller.
                      </htm:li><htm:br/>
                    </htm:ul> using a set of 100 (key, plaintext and 128-bit random tweak value)
                    3-tuples and obtain the ciphertext that results from XTS-AES encrypt.
                    <htm:br/><htm:br/> The evaluator may supply a data unit sequence number instead
                    of the tweak value if the implementation supports it. The data unit sequence
                    number is a base-10 number ranging between 0 and 255 that implementations
                    convert to a tweak value internally. </test><htm:br/>
                  <test>The evaluator shall test the decrypt functionality of XTS-AES using the same
                    test as for encrypt, replacing plaintext values with ciphertext values and
                    XTS-AES encrypt with XTS-AES decrypt. </test>
                </testlist><htm:br/>
                <testlist><htm:b><htm:u>AES Key Wrap (AES-KW) and Key Wrap with Padding (AES-KWP)
                      Test</htm:u></htm:b>
                  <test>The evaluator shall test the authenticated encryption functionality of
                    AES-KW for EACH combination of the following input parameter lengths: <htm:br/><htm:br/>
                    <htm:ul style="list-style-type:none">
                      <htm:li><htm:b>128 and 256 bit key encryption keys (KEKs)</htm:b></htm:li><htm:br/>
                      <htm:li><htm:b>Three plaintext lengths.</htm:b> One of the plaintext lengths
                        shall be two semi-blocks (128 bits). One of the plaintext lengths shall be
                        three semi-blocks (192 bits). The third data unit length shall be the
                        longest supported plaintext length less than or equal to 64 semi-blocks
                        (4096 bits).</htm:li>
                    </htm:ul> using a set of 100 key and plaintext pairs and obtain the ciphertext
                    that results from AES-KW authenticated encryption. To determine correctness, the
                    evaluator shall use the AES-KW authenticated-encryption function of a known good
                    implementation. </test><htm:br/>
                  <test>The evaluator shall test the authenticated-decryption functionality of
                    AES-KW using the same test as for authenticated-encryption, replacing plaintext
                    values with ciphertext values and AES-KW authenticated-encryption with AES-KW
                    authenticated-decryption. </test><htm:br/>
                  <test>The evaluator shall test the authenticated-encryption functionality of
                    AES-KWP using the same test as for AES-KW authenticated-encryption with the
                    following change in the three plaintext lengths: <htm:ul>
                      <htm:li>One plaintext length shall be one octet. One plaintext length shall be
                        20 octets (160 bits).</htm:li><htm:br/>
                      <htm:li>One plaintext length shall be the longest supported plaintext length
                        less than or equal to 512 octets (4096 bits).</htm:li>
                    </htm:ul>
                  </test>
                  <test>The evaluator shall test the authenticated-decryption functionality of
                    AES-KWP using the same test as for AES-KWP authenticated-encryption, replacing
                    plaintext values with ciphertext values and AES-KWP authenticated-encryption
                    with AES-KWP authenticated-decryption. </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_cop.1" name="Cryptographic operation" iteration="HASH">
          <f-element>
            <title>The TSF shall perform <refinement>cryptographic hashing</refinement> in
              accordance with a specified cryptographic algorithm <refinement>SHA-1 and <selectables>
                  <selectable>SHA-256</selectable>
                  <selectable>SHA-384</selectable>
                  <selectable>SHA-512</selectable>
                  <selectable exclusive="yes">no other algorithms</selectable>
                </selectables></refinement> and <refinement>message digest</refinement> sizes
                <refinement>160 and <selectables>
                  <selectable>256</selectable>
                  <selectable>384</selectable>
                  <selectable>512 bits</selectable>
                  <selectable exclusive="yes">no other message digest sizes</selectable>
                </selectables></refinement> that meet the following: <refinement>FIPS Pub
                180-4</refinement>. </title>
            <note role="application">Per NIST SP 800-131A, SHA-1 for generating digital signatures
              is no longer allowed, and SHA-1 for verification of digital signatures is strongly
              discouraged as there may be risk in accepting these signatures. It is expected that
              vendors will implement SHA-2 algorithms in accordance with SP
              800-131A.<htm:br/><htm:br/> SHA-1 is currently required in order to comply with the
              WLAN Client Extended Package. Vendors are strongly encouraged to implement updated
              protocols that support the SHA-2 family; until updated protocols are supported, this
              PP allows support for SHA-1 implementations in compliance with SP
              800-131A.<htm:br/><htm:br/> The intent of this requirement is to specify the hashing
              function. The hash selection must support the message digest size selection. The hash
              selection should be consistent with the overall strength of the algorithm used (for
              example, SHA 256 for 128-bit keys). <htm:br/><htm:br/> The TSF hashing functions can
              be implemented in one of two modes. The first mode is the byte­oriented mode. In this
              mode the TSF only hashes messages that are an integral number of bytes in length; i.e.
              the length (in bits) of the message to be hashed is divisible by 8. The second mode is
              the bit­oriented mode. In this mode the TSF hashes messages of arbitrary length. The
              TSF may implement either bit-oriented or byte-oriented; both implementations are not
              required. </note>
            <aactivity>
              <TSS> The evaluator shall check that the association of the hash function with other
                TSF cryptographic functions (for example, the digital signature verification
                function) is documented in the TSS. The evalutator shall check that the TSS
                indicates if the hashing function is implemented in bit-oriented and/or
                byte-oriented mode. <htm:br/><htm:br/>
              </TSS>
              <Guidance> The evaluator checks the AGD documents to determine that any configuration
                that is required to be done to configure the functionality for the required hash
                sizes is present.<htm:br/><htm:br/>
              </Guidance>
              <Tests>
                <htm:b>Evaluation Activity Note:</htm:b> The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products. <htm:br/><htm:br/> The evaluator shall
                perform all of the following tests for each hash algorithm implemented by the TSF
                and used to satisfy the requirements of this PP. As there are different tests for
                each mode, an indication is given in the following sections for the bit­oriented vs.
                the byte­oriented testmacs.<htm:br/><htm:br/>
                <testlist>
                  <test><htm:i>Short Messages Test: Bit-oriented Mode</htm:i><htm:br/> The
                    evaluators devise an input set consisting of m+1 messages, where m is the block
                    length of the hash algorithm. The length of the messages ranges sequentially
                    from 0 to m bits. The message text shall be pseudorandomly generated. The
                    evaluators compute the message digest for each of the messages and ensure that
                    the correct result is produced when the messages are provided to the TSF. </test><htm:br/>
                  <test><htm:i>Short Messages Test: Byte-oriented Mode</htm:i><htm:br/> The
                    evaluators devise an input set consisting of m/8+1 messages, where m is the
                    block length of the hash algorithm. The length of the messages range
                    sequentially from 0 to m/8 bytes, with each message being an integral number of
                    bytes. The message text shall be pseudorandomly generated. The evaluators
                    compute the message digest for each of the messages and ensure that the correct
                    result is produced when the messages are provided to the TSF. </test><htm:br/>
                  <test><htm:i>Selected Long Messages Test: Bit-oriented Mode</htm:i><htm:br/> The
                    evaluators devise an input set consisting of m messages, where m is the block
                    length of the hash algorithm. The length of the i<htm:sup>th</htm:sup> message
                    is 512 + 99*i, where 1 ≤ i ≤ m. The message text shall be pseudorandomly
                    generated. The evaluators compute the message digest for each of the messages
                    and ensure that the correct result is produced when the messages are provided to
                    the TSF. </test><htm:br/>
                  <test><htm:i>Selected Long Messages Test: Byte-oriented Mode</htm:i><htm:br/> The
                    evaluators devise an input set consisting of m/8 messages, where m is the block
                    length of the hash algorithm. The length of the i<htm:sup>th</htm:sup> message
                    is 512 + 8*99*i, where 1 ≤ i ≤ m/8. The message text shall be pseudorandomly
                    generated. The evaluators compute the message digest for each of the messages
                    and ensure that the correct result is produced when the messages are provided to
                    the TSF. </test><htm:br/>
                  <test><htm:i>Pseudorandomly Generated Messages Test: Byte-oriented
                    Mode</htm:i><htm:br/> This test is for byte­oriented implementations only. The
                    evaluators randomly generate a seed that is n bits long, where n is the length
                    of the message digest produced by the hash function to be tested. The evaluators
                    then formulate a set of 100 messages and associated digests by following the
                    algorithm provided in Figure 1 of SHAVS. The evaluators then ensure that the
                    correct result is produced when the messages are provided to the TSF. </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_cop.1" name="Cryptographic operation" iteration="SIGN">
          <f-element>
            <title>The TSF shall perform <refinement>cryptographic signature services (generation
                and verification)</refinement> in accordance with a specified cryptographic
                algorithm<selectables linebreak="yes">
                <selectable><refinement>RSA schemes using cryptographic key sizes of 2048-bit or
                    greater that meet the following: FIPS PUB 186-4, "Digital Signature Standard
                    (DSS)", Section 4</refinement></selectable>
                <selectable><refinement>ECDSA schemes using "NIST curves" P-384 and <selectables>
                      <selectable>P-256</selectable>
                      <selectable>P-521</selectable>
                      <selectable exclusive="yes">no other curves</selectable>
                    </selectables> that meet the following: FIPS PUB 186-4, "Digital Signature
                    Standard (DSS)", Section 5</refinement></selectable>
                <selectable exclusive="yes">No other algorithms</selectable>
              </selectables>. </title>
            <note role="application">The ST Author should choose the algorithm implemented to
              perform digital signatures; if more than one algorithm is available, this requirement
              should be iterated to specify the functionality. For the algorithm chosen, the ST
              author should make the appropriate assignments/selections to specify the parameters
              that are implemented for that algorithm. </note>
            <aactivity>
              <Tests>
                <htm:b>Evaluation Activity Note:</htm:b> The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products. <htm:br/><htm:br/>
                <testlist>
                  <test><htm:b>ECDSA Algorithm Tests</htm:b><htm:br/>
                    <testlist>
                      <test><htm:b>ECDSA FIPS 186-4 Signature Generation Test</htm:b><htm:br/> For
                        each supported NIST curve (i.e. P-256, P-384 and P-521) and SHA function
                        pair, the evaluator shall generate 10 1024-bit long messages and obtain for
                        each message a public key and the resulting signature values R and S. To
                        determine correctness, the evaluator shall use the signature verification
                        function of a known good implementation. </test><htm:br/>
                      <test><htm:b>ECDSA FIPS 186-4 Signature Verification Test</htm:b><htm:br/> For
                        each supported NIST curve (i.e. P-256, P-384 and P-521) and SHA function
                        pair, the evaluator shall generate a set of 10 1024-bit message, public key
                        and signature tuples and modify one of the values (message, public key or
                        signature) in five of the 10 tuples. The evaluator shall obtain in response
                        a set of 10 PASS/FAIL values. </test>
                    </testlist>
                  </test>
                  <test><htm:b>RSA Signature Algorithm Tests</htm:b><htm:br/>
                    <testlist>
                      <test><htm:b>Signature Generation Test</htm:b><htm:br/> The evaluator shall
                        verify the implementation of RSA Signature Generation by the TOE using the
                        Signature Generation Test. To conduct this test the evaluator must generate
                        or obtain 10 messages from a trusted reference implementation for each
                        modulus size/SHA combination supported by the TSF. The evaluator shall have
                        the TOE use their private key and modulus value to sign these messages.
                        <htm:br/><htm:br/> The evaluator shall verify the correctness of the TSF’s
                        signature using a known good implementation and the associated public keys
                        to verify the signatures. </test><htm:br/>
                      <test><htm:b>Signature Verification Test</htm:b><htm:br/> The evaluator shall
                        perform the Signature Verification test to verify the ability of the TOE to
                        recognize another party’s valid and invalid signatures. The evaluator shall
                        inject errors into the test vectors produced during the Signature
                        Verification Test by introducing errors in some of the public keys e,
                        messages, IR format, and/or signatures. The TOE attempts to verify the
                        signatures and returns success or failure. </test>
                    </testlist>
                  </test>
                </testlist> The evaluator shall use these test vectors to emulate the signature
                verification test using the corresponding parameters and verify that the TOE detects
                these errors. </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_cop.1" name="Cryptographic operation" iteration="KEYHMAC">
          <f-element>
            <title>The TSF shall perform <refinement>keyed-hash message authentication</refinement>
              in accordance with a specified cryptographic algorithm <refinement>HMAC-SHA-1 and <selectables>
                  <selectable>HMAC-SHA-256</selectable>
                  <selectable>HMAC-SHA-384</selectable>
                  <selectable>HMAC-SHA-512</selectable>
                  <selectable exclusive="yes">no other algorithms</selectable>
                </selectables></refinement> and cryptographic key sizes <assignable>key size (in
                bits) used in HMAC</assignable><refinement> and message digest sizes 160 and <selectables>
                  <selectable>256</selectable>
                  <selectable>384</selectable>
                  <selectable>512</selectable>
                  <selectable exclusive="yes">no other</selectable>
                </selectables> bits</refinement> that meet the following: <refinement>FIPS Pub
                198-1, "The Keyed-Hash Message Authentication Code", and FIPS Pub 180-4, "Secure
                Hash Standard"</refinement>. </title>
            <note role="application"> The selection in this requirement must be consistent with the
              key size specified for the size of the keys used in conjunction with the keyed-hash
              message authentication. HMAC-SHA-1 is currently required in order to comply with the
              WLAN Client EP.</note>
            <aactivity>
              <TSS> The evaluator shall examine the TSS to ensure that it specifies the following
                values used by the HMAC function: key length, hash function used, block size, and
                output MAC length used. <htm:br/><htm:br/></TSS>
              <Tests>
                <htm:b>Evaluation Activity Note:</htm:b> The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products. <htm:br/><htm:br/> For each of the
                supported parameter sets, the evaluator shall compose 15 sets of test data. Each set
                shall consist of a key and message data. The evaluator shall have the TSF generate
                HMAC tags for these sets of test data. The resulting MAC tags shall be compared to
                the result of generating HMAC tags with the same key and IV using a known good
                implementation.</Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_cop.1" name="Cryptographic operation" iteration="CONDITION">
          <f-element>
            <title>The TSF shall perform <refinement>conditioning</refinement> in accordance with a
              specified cryptographic algorithm <refinement>HMAC-<selectables>
                  <selectable>SHA-256</selectable>
                  <selectable>SHA-384</selectable>
                  <selectable>SHA-512</selectable>
                </selectables> using a salt, and <selectables>
                  <selectable>PBKDF2 with <assignable>number of iterations</assignable>
                    iterations</selectable>
                  <selectable><assignable>key stretching funtion</assignable></selectable>
                  <selectable>no other function</selectable>
                </selectables> and output</refinement> cryptographic key sizes<refinement>
                <selectables>
                  <selectable>128</selectable>
                  <selectable>256</selectable>
                </selectables></refinement> that meet the following: <refinement><selectables>
                  <selectable>NIST SP 800-132</selectable>
                  <selectable>no standard</selectable>
                </selectables>.</refinement>
            </title>
            <note role="application">The key cryptographic key sizes in the third selection should
              be made to correspond to the KEK key sizes selected in FCS_CKM_EXT.3.
              <htm:br/><htm:br/> This password must be conditioned into a string of bits that forms
              the submask to be used as input into the KEK. Conditioning can be performed using one
              of the identified hash functions and may include a key stretching function; the method
              used is selected by the ST Author. If selected, NIST SP 800-132 requires the use of a
              pseudo-random function (PRF) consisting of HMAC with an approved hash function. The ST
              author selects the hash function used, also includes the appropriate requirements for
              HMAC and the hash function. <htm:br/><htm:br/> Appendix A of NIST SP 800-132
              recommends setting the iteration count in order to increase the computation needed to
              derive a key from a password and, therefore, increase the workload of performing a
              dictionary attack. </note>
            <aactivity>
              <TSS>The evaluator shall check that the TSS describes the method by which the password
                is first encoded and then fed to the SHA algorithm and verify the SHA algorithm
                matches the first selection.<htm:br/><htm:br/> If a key stretching function, such as
                PBKDF2, is selected the settings for the algorithm (padding, blocking, etc.) shall
                be described. The evaluator shall verify that the TSS contains a description of how
                the output of the hash function or key stretching function is used to form the
                submask that will be input into the function and is the same length as the KEK as
                specified in FCS_CKM_EXT.3. <htm:br/><htm:br/> If any manipulation of the key is
                performed in forming the submask that will be used to form the KEK, that process
                shall be described in the TSS. <htm:br/><htm:br/> No explicit testing of the
                formation of the submask from the input password is required. <htm:br/><htm:br/>
              </TSS>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_https_ext.1" name="Extended: HTTPS Protocol">
          <f-element>
            <title>The TSF shall implement the HTTPS protocol that complies with RFC 2818. </title>
          </f-element>
          <f-element>
            <title>The TSF shall implement HTTPS using TLS as defined in the Package for Transport Layer Security. </title>
            <note role="application"> 
              The Package for Transport Layer Security shall be included in the ST, with the following selections made: <htm:ul>
                <htm:li>FCS_TLS_EXT.1:</htm:li>
                <htm:ul>
                  <htm:li>TLS shall be selected</htm:li>
                  <htm:li>Client shall be selected</htm:li>
                </htm:ul>
              </htm:ul>
            </note>
          </f-element>
          <f-element>
            <title>The TSF shall notify the application and <selectables>
                <selectable>not establish the connection</selectable>
                <selectable>request application authorization to establish the
                  connection</selectable>
                <selectable exclusive="yes">no other action</selectable>
              </selectables> if the peer certificate is deemed invalid. </title>
            <note role="application"> Validity is determined by the certificate path, the expiration
              date, and the revocation status in accordance with RFC 5280. <htm:br/><htm:br/> If
              "not establish the connection" is selected then "with no exceptions" shall be selected
              for FCS_TLSC_EXT.1.3 in the Package for Transport Layer Security. If "request
              application authorization to establish the connection" is selected then "except when
              override is authorized" shall be selected for FCS_TLSC_EXT.1.3 in the Package for
              Transport Layer Security. If "no other action" is selected either selection can be
              made in FCS_TLSC_EXT.1.3.<htm:br/><htm:br/> FMT_SMF_EXT.1 Function <ctr-ref
                ref-id="certInvalid"/> configures whether to allow/disallow the establishment of a
              trusted channel if the peer certificate is deemed invalid. </note>
            <aactivity>
              <!-- TODO: Need to fix EA and interweave FMT_SMF_EXT function certInvalid -->
              <Tests>
                <testlist>
                  <test>The evaluator shall attempt to establish an HTTPS connection with a
                    webserver, observe the traffic with a packet analyzer, and verify that the
                    connection succeeds and that the traffic is identified as TLS or HTTPS.
                    <htm:br/><htm:br/> Other tests are performed in conjunction with testing in the
                    Package for Transport Layer Security. <htm:br/><htm:br/> Certificate validity
                    shall be tested in accordance with testing performed for FIA_X509_EXT.1, and the
                    evaluator shall perform the following test: </test><htm:br/><htm:br/>
                  <test>The evaluator shall demonstrate that using a certificate without a valid
                    certification path results in an application notification. Using the
                    administrative guidance, the evaluator shall then load a certificate or
                    certificates to the Trust Anchor Database needed to validate the certificate to
                    be used in the function, and demonstrate that the function succeeds. The
                    evaluator then shall delete one of the certificates, and show that the
                    application is notified of the validation failure.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_iv_ext.1" name="Extended: Initialization Vector Generation">
          <f-element>
            <title>The TSF shall generate IVs in accordance with <ctr-ref ref-id="ivtable"/>:
              References and IV Requirements for NIST-approved Cipher Modes. </title>
            <note role="application">
              <ctr-ref ref-id="ivtable"/> lists the requirements for composition of IVs according to
              the NIST Special Publications for each cipher mode. The composition of IVs generated
              for encryption according to a cryptographic protocol is addressed by the protocol.
              Thus, this requirement addresses only IVs generated for key storage and data storage
              encryption. </note>
            <aactivity>
              <TSS> The evaluator shall examine the key hierarchy section of the TSS to ensure that
                the encryption of all keys is described and the formation of the IVs for each key
                encrypted by the same KEK meets FCS_IV_EXT.1. </TSS>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_rbg_ext.1" name="Extended: Cryptographic Operation (Random Bit Generation)">
          <f-element>
            <title>The TSF shall perform all deterministic random bit generation services in
              accordance with NIST Special Publication 800-90A using <selectables>
                <selectable>Hash_DRBG (any)</selectable>
                <selectable>HMAC_DRBG (any)</selectable>
                <selectable>CTR_DRBG (AES)</selectable>
              </selectables>. </title>
          </f-element>
          <f-element>
            <title>The deterministic RBG shall be seeded by an entropy source that accumulates
              entropy from <selectables>
                <selectable>a software-based noise source</selectable>
                <selectable>TSF-hardware-based noise source</selectable>
              </selectables> with a minimum of <selectables>
                <selectable>128 bits</selectable>
                <selectable>256 bits</selectable>
              </selectables> of entropy at least equal to the greatest security strength (according
              to NIST SP 800-57) of the keys and hashes that it will generate. </title>
          </f-element>
          <f-element>
            <title>The TSF shall be capable of providing output of the RBG to applications running
              on the TSF that request random bits. </title>
            <note role="application">SP 800-90A contains three different methods of generating
              random numbers; each of these, in turn, depends on underlying cryptographic primitives
              (hash functions/ciphers). The ST author will select the function used, and include the
              specific underlying cryptographic primitives used in the requirement or in the TSS.
              While any of the identified hash functions (SHA-224, SHA-256, SHA-384, SHA-512) are
              allowed for Hash_DRBG or HMAC_DRBG, only AES-based implementations for CTR_DRBG are
              allowed. <htm:br/><htm:br/> The ST author must also ensure that any underlying
              functions are included in the baseline requirements for the TOE. <htm:br/><htm:br/>
              Health testing of the DRBGs is performed in conjunction with the self-tests required
              in FPT_TST_EXT.1.1. <htm:br/><htm:br/> For the selection in FCS_RBG_EXT.1.2, the ST
              author selects the appropriate number of bits of entropy that corresponds to the
              greatest security strength of the algorithms included in the ST. Security strength is
              defined in Tables 2 and 3 of NIST SP 800-57A. For example, if the implementation
              includes 2048-bit RSA (security strength of 112 bits), AES 128 (security strength 128
              bits), and HMAC-SHA-256 (security strength 256 bits), then the ST author would select
              256 bits. <htm:br/><htm:br/> The ST author may select either software or hardware
              noise sources. A hardware noise source is a component that produces data that cannot
              be explained by a deterministic rule, due to its physical nature. In other words, a
              hardware based noise source generates sequences of random numbers from a physical
              process that cannot be predicted. For example, a sampled ring oscillator consists of
              an odd number of inverter gates chained into a loop, with an electrical pulse
              traveling from inverter to inverter around the loop. The inverters are not clocked, so
              the precise time required for a complete circuit around the loop varies slightly as
              various physical effects modify the small delay time at each inverter on the line to
              the next inverter. This variance results in an approximate natural frequency that
              contains drift and jitter over time. The output of the ring oscillator consists of the
              oscillating binary value sampled at a constant rate from one of the inverters – a rate
              that is significantly slower than the oscillator’s natural frequency. </note>
            <aactivity> Documentation shall be produced and the evaluator shall perform the
              activities in accordance with <appref linkend="entropy"/>, the "Clarification to the
              Entropy Documentation and Assessment". <htm:br/><htm:br/> The evaluator shall verify
              that the API documentation provided according to <secref linkend="adv"/>, includes the
              security functions described in FCS_RBG_EXT.1.3. <htm:br/><htm:br/>
              <Guidance> The evaluator shall also confirm that the operational guidance contains
                appropriate instructions for configuring the RNG functionality.<htm:br/><htm:br/>
              </Guidance>
              <Tests>
                <htm:b>Evaluation Activity Note:</htm:b> The following tests require the developer to
                provide access to a test platform that provides the evaluator with tools that are
                typically not found on factory products. <htm:br/><htm:br/> The evaluator shall
                perform 15 trials for the RNG implementation. If the RNG is configurable, the
                evaluator shall perform 15 trials for each configuration. <htm:br/><htm:br/> If the
                RNG has prediction resistance enabled, each trial consists of (1) instantiate DRBG,
                (2) generate the first block of random bits (3) generate a second block of random
                bits (4) uninstantiate. The evaluator verifies that the second block of random bits
                is the expected value. The evaluator shall generate eight input values for each
                trial. The first is a count (0 – 14). The next three are entropy input, nonce, and
                personalization string for the instantiate operation. The next two are additional
                input and entropy input for the first call to generate. The final two are additional
                input and entropy input for the second call to generate. These values are randomly
                generated. "generate one block of random bits" means to generate random bits with
                number of returned bits equal to the Output Block Length (as defined in NIST
                SP800-90A). <htm:br/><htm:br/> If the RNG does not have prediction resistance, each
                trial consists of (1) instantiate DRBG, (2) generate the first block of random bits
                (3) reseed, (4) generate a second block of random bits (5) uninstantiate. The
                evaluator verifies that the second block of random bits is the expected value. The
                evaluator shall generate eight input values for each trial. The first is a count (0
                – 14). The next three are entropy input, nonce, and personalization string for the
                instantiate operation. The fifth value is additional input to the first call to
                generate. The sixth and seventh are additional input and entropy input to the call
                to reseed. The final value is additional input to the second generate call.
                <htm:br/><htm:br/> The following paragraphs contain more information on some of the
                input values to be generated/selected by the evaluator. <htm:br/><htm:br/>
                <htm:ul style="list-style-type:none">
                  <htm:li><htm:b>Entropy input: </htm:b>the length of the entropy input value must
                    equal the seed length.</htm:li>
                  <htm:li><htm:b>Nonce: </htm:b>If a nonce is supported (CTR_DRBG with no Derivation
                    Function does not use a nonce), the nonce bit length is one-half the seed
                    length.</htm:li>
                  <htm:li><htm:b>Personalization string: </htm:b>The length of the personalization
                    string must be &#2264; seed length. If the implementation only supports one
                    personalization string length, then the same length can be used for both values.
                    If more than one string length is support, the evaluator shall use
                    personalization strings of two different lengths. If the implementation does not
                    use a personalization string, no value needs to be supplied.</htm:li>
                  <htm:li><htm:b>Additional input: </htm:b>the additional input bit lengths have the
                    same defaults and restrictions as the personalization string lengths.</htm:li>
                </htm:ul>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_rbg_ext.2" name="Extended: Cryptographic Operation (Random Bit Generation)" status="objective">
          <f-element>
            <title>The TSF shall save the state of the deterministic RBG at power-off, and shall use
              this state as input to the deterministic RBG at startup.</title>
            <note role="application"> The capability to add the state saved at power-off as input to
              the RBG prevents an RBG that is slow to gather entropy from producing the same output
              regularly and across reboots. Since there is no guarantee of the protections provided
              when the state is stored (or a requirement for any such protection), it is assumed
              that the state is 'known', and therefore cannot contribute entropy to the RBG, but can
              introduce enough variation that the initial RBG values are not predictable and
              exploitable. </note>
            <aactivity>
              <TSS>The evaluation activity for this requirement is captured in the RBG documentation
                for <appref linkend="entropy"/>. The evaluator shall verify that the documentation
                describes how the state is generated so as to be available for the next startup, how
                the state is used as input to the DRBG, and any protection measures used for the
                state while the TOE is powered off. </TSS>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_rbg_ext.3" name="Extended: Cryptographic Operation (Random Bit Generation)" status="objective">
          <f-element>
            <title>The TSF shall allow applications to add data to the deterministic RBG using the
              Personalization String as defined in SP 800-90A. </title>
            <note role="application"> As specified in SP 800-90A the TSF shall not count data input
              from an application towards the entropy required by FCS_RBG_EXT.1. Thus, the TSF shall
              not allow the only input to the RBG seed to be from an application. </note>
            <aactivity> The evaluator shall verify that this function is included as an interface to
              the RBG in the documentation required by <appref linkend="entropy"/> and that the
              behavior of the RBG following a call to this interface is described. The evaluator
              shall also verify that the documentation of the RBG describes the conditions of use
              and possible values for the Personalization String input to the SP 800-90A specified
              DRBG. <Tests>
                <testlist>
                  <test>The evaluator shall write, or the developer shall provide, an application
                    that adds data to the RBG via the Personalization String. The evaluator shall
                    verify that the request succeeds.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_srv_ext.1" name="Extended: Cryptographic Algorithm Services">
          <f-element>
            <title>The TSF shall provide a mechanism for applications to request the TSF to perform
              the following cryptographic operations: <htm:ul>
                <htm:li>All mandatory and <selectables>
                    <selectable>selected algorithms</selectable>
                    <selectable> selected algorithms with the exception of ECC over curve
                      25519-based algorithms</selectable>
                  </selectables> in FCS_CKM.2/LOCKED</htm:li>
                <htm:li>The following algorithms in FCS_COP.1/ENCRYPT: AES-CBC, <selectables>
                    <selectable>AES Key Wrap</selectable>
                    <selectable>AES Key Wrap with Padding</selectable>
                    <selectable>AES-GCM</selectable>
                    <selectable>AES-CCM</selectable>
                    <selectable exclusive="yes">no other modes</selectable>
                  </selectables>
                </htm:li>
                <htm:li>All mandatory and selected algorithms in FCS_COP.1/SIGN</htm:li>
                <htm:li>All mandatory and selected algorithms in FCS_COP.1/HASH</htm:li>
                <htm:li>All mandatory and selected algorithms in FCS_COP.1/KEYHMAC</htm:li>
                <htm:li>
                  <selectables linebreak="yes">
                    <selectable>All mandatory and <selectables>
                        <selectable>selected algorithms</selectable>
                        <selectable>selected algorithms with the exception of ECC over curve
                          25519-based algorithms</selectable>
                      </selectables> in FCS_CKM.1</selectable>
                    <selectable>The selected algorithms in FCS_COP.1/CONDITION</selectable>
                    <selectable exclusive="yes">No other cryptographic operations</selectable>
                  </selectables>
                </htm:li>
              </htm:ul>
            </title><note role="application"> 
              For each of the listed FCS components in the bulleted list, the intent is that the TOE will make available all algorithms specified for that component in the ST. For example, if for FCS_COP.1/HASH the ST author selects SHA-256, then the TOE would have to make available an interface to perform SHA-1 (the "mandatory" portion of FCS_COP.1/HASH) and SHA-256 (the "selected" portion of FCS_COP.1/HASH).<htm:br/><htm:br/> 
              The exception is for FCS_COP.1/ENCRYPT. The TOE is not required to make available AES_CCMP, AES_XTS, AES_GCMP-256, or AES_CCMP_256 even though they may be implemented to perform TSF-related functions. It is acceptable for the platform to not provide AES Key Wrap (KW) and AES Key Wrap with Padding (KWP) to applications even if selected in FCS_COP.1/ENCRYPT. <!-- NIAP: I do not want to remove Key Wrap from selection, but I am basically negating the SFR in the app note.  --> However, the ST author is expected to select AES-GCM and/or AES-CCM if it is selected in the ST for the FCS_COP.1/ENCRYPT component. 
            </note>
            <aactivity> The evaluator shall verify that the API documentation provided according to
                <secref linkend="adv"/> includes the security functions (cryptographic algorithms)
              described in these requirements.<htm:br/><htm:br/>
              <Tests> The evaluator shall write, or the developer shall provide access to, an
                application that requests cryptographic operations by the TSF. The evaluator shall
                verify that the results from the operation match the expected results according to
                the API documentation. This application may be used to assist in verifying the
                cryptographic operation Evaluation Activities for the other algorithm services
                requirements. </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <f-component cc-id="fcs_srv_ext.2" name="Extended: Cryptographic Algorithm Services" status="objective">
          <f-element>
            <title>The TSF shall provide a mechanism for applications to request the TSF to perform
              the following cryptographic operations: <htm:ul>
                <htm:li>Algorithms in FCS_COP.1/ENCRYPT</htm:li>
                <htm:li>Algorithms in FCS_COP.1/SIGN</htm:li>
              </htm:ul> by keys stored in the secure key storage. </title>
            <note role="application">The TOE will, therefore, be required to perform cryptographic
              operations on behalf of applications using the keys stored in the TOE’s secure key
              storage. </note>
            <aactivity> The evaluator shall verify that the API documentation for the secure key
              storage includes the cryptographic operations by the stored keys. <htm:br/><htm:br/>
              <Tests> The evaluator shall write, or the developer shall provide access to, an
                application that requests cryptographic operations of stored keys by the TSF. The
                evaluator shall verify that the results from the operation match the expected
                results according to the API documentation. The evaluator shall use these APIs to
                test the functionality of the secure key storage according to the Evaluation
                Activities in FCS_STG_EXT.1. </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="Cryptographic Storage (FCS_STG)" id="FCS_STG">
          The following requirements describe how keys are protected. All keys
          must ultimately be protected by a REK, and may optionally be protected by the user’s
          authentication factor. Each key’s confidentiality and integrity must be protected. This
          section also describes the secure key storage services to be provided by the Mobile
          Device for use by applications and users, applying the same level of protection for
          these keys as keys internal to the OS.
          <!--   <htm:div class="comp">
          <htm:h3>FCS_STG Cryptographic Storage</htm:h3>
          <htm:p class="comp"> 
            The following requirements describe how keys are protected. All keys
            must ultimately be protected by a REK, and may optionally be protected by the user’s
            authentication factor. Each key’s confidentiality and integrity must be protected. This
            section also describes the secure key storage services to be provided by the Mobile
            Device for use by applications and users, applying the same level of protection for
            these keys as keys internal to the OS. </htm:p>
        </htm:div>-->
          <f-component cc-id="fcs_stg_ext.1" name="Extended: Cryptographic Key Storage">
            <f-element>
              <title>The TSF shall provide <selectables>
                <selectable>mutable hardware</selectable>
                <selectable>software-based</selectable>
              </selectables> secure key storage for asymmetric private keys and <selectables>
                <selectable>symmetric keys</selectable>
                <selectable>persistent secrets</selectable>
                <selectable exclusive="yes">no other keys</selectable>
              </selectables>. </title>
              <note role="application">A hardware keystore can be exposed to the TSF through a variety
                of interfaces, including embedded on the motherboard, USB, microSD, and Bluetooth.
                <htm:br/><htm:br/> Immutable hardware is considered outside of this requirement and
                will be covered elsewhere. <htm:br/><htm:br/> If the secure key storage is implemented
                in software that is protected as required by FCS_STG_EXT.2, the ST author shall select
                "software-based." If "software-based" is selected, the ST author shall select "all
                software-based key storage" in FCS_STG_EXT.2. <htm:br/><htm:br/> Support for secure
                key storage for all symmetric keys and persistent secrets will be required in future
                revisions. </note>
            </f-element>
            <f-element>
              <title>The TSF shall be capable of importing keys/secrets into the secure key storage
                upon request of <selectables>
                  <selectable>the user</selectable>
                  <selectable>the administrator</selectable>
                </selectables> and <selectables>
                  <selectable>applications running on the TSF</selectable>
                  <selectable exclusive="yes">no other subjects</selectable>
                </selectables>. </title>
              <note role="application"> If the ST Author selects only user, the ST Author shall select
                function <ctr-ref ref-id="keyStorage"/> in FMT_MOF_EXT.1.1. </note>
            </f-element>
            <f-element>
              <title>The TSF shall be capable of destroying keys/secrets in the secure key storage
                upon request of <selectables>
                  <selectable>the user</selectable>
                  <selectable>the administrator</selectable>
                </selectables>. </title>
              <note role="application">If the ST Author selects only user, the ST Author shall select
                function <ctr-ref ref-id="keyWipe"/> in FMT_MOF_EXT.1.1. </note>
            </f-element>
            <f-element>
              <title>The TSF shall have the capability to allow only the application that imported the
                key/secret the use of the key/secret. Exceptions may only be explicitly authorized by <selectables>
                  <selectable>the user</selectable>
                  <selectable>the administrator</selectable>
                  <selectable>a common application developer</selectable>
                </selectables>. </title>
              <note role="application">If the ST Author selects user or administrator, the ST Author
                must also select function <ctr-ref ref-id="sharedKeys"/> in FMT_SMF_EXT.1.1. If the ST
                Author selects only user, the ST Author shall select function <ctr-ref
                  ref-id="sharedKeys"/> in FMT_MOF_EXT.1.1. </note>
            </f-element>
            <f-element>
              <title>The TSF shall allow only the application that imported the key/secret to request
                that the key/secret be destroyed. Exceptions may only be explicitly authorized by <selectables>
                  <selectable>the user</selectable>
                  <selectable>the administrator</selectable>
                  <selectable>a common application developer</selectable>
                </selectables>. </title>
              <note role="application">If the ST Author selects user or administrator, the ST Author
                must also select function <ctr-ref ref-id="keyWipeRules"/> in FMT_SMF_EXT.1.1. If the
                ST Author selects only user, the ST Author shall select function <ctr-ref
                  ref-id="keyWipeRules"/> in FMT_MOF_EXT.1.1. </note>
              <aactivity> The evaluator shall verify that the API documentation provided according to
                <secref linkend="adv"/> includes the security functions (import, use, and
                destruction) described in these requirements. The API documentation shall include the
                method by which applications restrict access to their keys/secrets in order to meet
                FCS_STG_EXT.1.4". <htm:br/><htm:br/>
                <TSS> The evaluator shall review the TSS to determine that the TOE implements the
                  required secure key storage. The evaluator shall ensure that the TSS contains a
                  description of the key storage mechanism that justifies the selection of "mutable
                  hardware" or "software-based". <htm:br/><htm:br/>
                </TSS>
                <Guidance> The evaluator shall review the AGD guidance to determine that it describes
                  the steps needed to import or destroy keys/secrets.<htm:br/><htm:br/>
                </Guidance>
                <Tests> The evaluator shall test the functionality of each security function: <testlist>
                  <test>The evaluator shall import keys/secrets of each supported type according to
                    the AGD guidance. The evaluator shall write, or the developer shall provide
                    access to, an application that generates a key/secret of each supported type and
                    calls the import functions. The evaluator shall verify that no errors occur
                    during import.</test><htm:br/>
                  <test>The evaluator shall write, or the developer shall provide access to, an
                    application that uses an imported key/secret: <htm:br/>
                    <htm:ul>
                      <htm:li>For RSA, the secret shall be used to sign data.</htm:li>
                      <htm:li>For ECDSA, the secret shall be used to sign data</htm:li>
                    </htm:ul>
                    <htm:br/> In the future additional types will be required to be tested: <htm:br/>
                    <htm:ul>
                      <htm:li>For symmetric algorithms, the secret shall be used to encrypt
                        data.</htm:li>
                      <htm:li>For persistent secrets, the secret shall be compared to the imported
                        secret. </htm:li>
                    </htm:ul>
                    <htm:br/> The evaluator shall repeat this test with the application-imported
                    keys/secrets and a different application’s imported keys/secrets. The evaluator
                    shall verify that the TOE requires approval before allowing the application to
                    use the key/secret imported by the user or by a different application: <htm:br/>
                    <htm:ul>
                      <htm:li>The evaluator shall deny the approvals to verify that the application
                        is not able to use the key/secret as described. </htm:li>
                      <htm:li>The evaluator shall repeat the test, allowing the approvals to verify
                        that the application is able to use the key/secret as described.</htm:li>
                    </htm:ul>
                    <htm:br/> If the ST Author has selected "common application developer", this
                    test is performed by either using applications from different developers or
                    appropriately (according to API documentation) not authorizing sharing.<htm:br/>
                  </test>
                  <test>The evaluator shall destroy keys/secrets of each supported type according to
                    the AGD guidance. The evaluator shall write, or the developer shall provide
                    access to, an application that destroys an imported key/secret.
                    <htm:br/><htm:br/> The evaluator shall repeat this test with the
                    application-imported keys/secrets and a different application’s imported
                    keys/secrets. The evaluator shall verify that the TOE requires approval before
                    allowing the application to destroy the key/secret imported by the administrator
                    or by a different application: <htm:br/><htm:br/>
                    <htm:ul>
                      <htm:li>The evaluator shall deny the approvals and verify that the application
                        is still able to use the key/secret as described. </htm:li>
                      <htm:li>The evaluator shall repeat the test, allowing the approvals and
                        verifying that the application is no longer able to use the key/secret as
                        described.</htm:li>
                    </htm:ul>
                    <htm:br/> If the ST Author has selected "common application developer", this
                    test is performed by either using applications from different developers or
                    appropriately (according to API documentation) not authorizing sharing. </test>
                </testlist>
                </Tests>
              </aactivity>
            </f-element>
          </f-component>
          <f-component cc-id="fcs_stg_ext.2" name="Extended: Encrypted Cryptographic Key Storage">
            <f-element>
              <title>The TSF shall encrypt all DEKs, KEKs, <assignable>any long-term trusted channel
                key material</assignable> and <selectables>
                  <selectable>all software-based key storage</selectable>
                  <selectable exclusive="yes">no other keys</selectable>
                </selectables> by KEKs that are <selectables linebreak="yes">
                  <selectable>Protected by the REK with <selectables linebreak="yes">
                    <selectable>encryption by a REK</selectable>
                    <selectable>encryption by a KEK chaining from a REK</selectable>
                    <selectable>encryption by a KEK that is derived from a REK</selectable>
                  </selectables>
                  </selectable>
                  <selectable>Protected by the REK and the password with <selectables linebreak="yes">
                    <selectable>encryption by a REK and the password-derived KEK</selectable>
                    <selectable>encryption by a KEK chaining to a REK and the password-derived or
                      biometric-unlocked KEK</selectable>
                    <selectable>encryption by a KEK that is derived from a REK and the
                      password-derived or biometric-unlocked KEK</selectable>
                  </selectables>
                  </selectable>
                </selectables>. </title>
              <note role="application">The ST author must select "all software-based key storage" if
                "software-based" is selected in FCS_STG_EXT.1.1. If the ST author selects "mutable
                hardware" in FCS_STG_EXT.1.1, the secure key storage is not subject to this
                requirement. REKs are not subject to this requirement. <htm:br/><htm:br/> A REK and
                the password-derived KEK may be combined to form a combined KEK (as described in
                FCS_CKM_EXT.3) in order to meet this requirement. <htm:br/><htm:br/> Sensitive data is
                protected by the REK and the password or biometric. Sensitive data includes some or
                all user or enterprise data. Software-based key storage itself shall be considered
                sensitive data and be protected accordingly, i.e. by the password or biometric and
                REK. <htm:br/><htm:br/> All keys must ultimately be protected by a REK. Sensitive data
                must be protected by the password or biometric (selection 2). In particular, <figref
                  ref-id="Keys"/> has KEKs protected according to these requirements: DEK_1 meets 2a
                and would be appropriate for sensitive data, DEK_2 meets 1b and would not be
                appropriate for sensitive data, K_1 meets 1a and is not considered a sensitive key,
                and K_2 meets 2b and is considered a sensitive key. <htm:br/><htm:br/> Long-term
                trusted channel key material includes WPA2 (PSKs), IPsec (PSKs and client
                certificates) and Bluetooth keys. These keys shall not be protected by the password,
                as they may be necessary in the locked state. For clarity, the ST author must assign
                any Long-term trusted channel key material supported by the TOE . At a minimum, a TOE
                must support at least WPA2 and Bluetooth keys. <htm:br/><htm:br/> The documentation of
                the product's encryption key management should be detailed enough that, after reading,
                the evaluator will thoroughly understand the product's key management and how it meets
                the requirements to ensure the keys are adequately protected. This documentation
                should include an essay and diagram(s). This documentation is not required to be part
                of the TSS - it can be submitted as a separate document and marked as developer
                proprietary. </note>
              <aactivity>
                <TSS>The evaluator shall review the TSS to determine that the TSS includes key
                  hierarchy description of the protection of each DEK for data-at-rest, of
                  software-based key storage, of long-term trusted channel keys, and of KEK related to
                  the protection of the DEKs, long-term trusted channel keys, and software-based key
                  storage. This description must include a diagram illustrating the key hierarchy
                  implemented by the TOE in order to demonstrate that the implementation meets
                  FCS_STG_EXT.2. The description shall indicate how the functionality described by
                  FCS_RBG_EXT.1 is invoked to generate DEKs (FCS_CKM_EXT.2), the key size
                  (FCS_CKM_EXT.2 and FCS_CKM_EXT.3) for each key, how each KEK is formed (generated,
                  derived, or combined according to FCS_CKM_EXT.3), the integrity protection method
                  for each encrypted key (FCS_STG_EXT.3), and the IV generation for each key encrypted
                  by the same KEK (FCS_IV_EXT.1). More detail for each task follows the corresponding
                  requirement. </TSS>
              </aactivity>
            </f-element>
            <f-element>
              <title>DEKs, KEKs, <assignable>any long-term trusted channel key material</assignable>
                and <selectables>
                  <selectable>all software-based key storage</selectable>
                  <selectable exclusive="yes">no other keys</selectable>
                </selectables> shall be encrypted using one of the following methods: <selectables>
                  <selectable>using a SP800-56B key establishment scheme</selectable>
                  <selectable>using AES in the <selectables>
                    <selectable>Key Wrap (KW) mode</selectable>
                    <selectable>Key Wrap with Padding (KWP) mode</selectable>
                    <selectable>GCM</selectable>
                    <selectable>CCM</selectable>
                    <selectable>CBC mode</selectable>
                  </selectables></selectable>
                </selectables> . </title>
              <note role="application">The ST author selects which key encryption schemes are used by
                the TOE. This requirement refers only to KEKs as defined this PP and does not refer to
                those KEKs specified in other standards. The ST author must assign the same Long-term
                trusted channel key material assigned in FCS_STG_EXT.2.1.</note>
              <aactivity>
                <TSS>The evaluator shall examine the key hierarchy description in the TSS section to
                  verify that each DEK and software-stored key is encrypted according to
                  FCS_STG_EXT.2.</TSS>
              </aactivity>
            </f-element>
          </f-component>
          <f-component cc-id="fcs_stg_ext.3" name="Extended: Integrity of encrypted key storage">
            <f-element>
              <title>The TSF shall protect the integrity of any encrypted DEKs and KEKs and <selectables>
                <selectable>long-term trusted channel key material</selectable>
                <selectable>all software-based key storage</selectable>
                <selectable exclusive="yes">no other keys</selectable>
              </selectables> by <selectables linebreak="yes">
                <selectable><selectables>
                  <selectable>GCM</selectable>
                  <selectable>CCM</selectable>
                  <selectable>Key Wrap</selectable>
                  <selectable>Key Wrap with Padding</selectable>
                </selectables> cipher mode for encryption according to FCS_STG_EXT.2</selectable>
                <selectable>a hash (FCS_COP.1/HASH) of the stored key that is encrypted by a key
                  protected by FCS_STG_EXT.2</selectable>
                <selectable>a keyed hash (FCS_COP.1/KEYHMAC) using a key protected by a key
                  protected by FCS_STG_EXT.2</selectable>
                <selectable>a digital signature of the stored key using an asymmetric key protected
                  according to FCS_STG_EXT.2</selectable>
                <selectable>an immediate application of the key for decrypting the protected data
                  followed by a successful verification of the decrypted data with previously known
                  information</selectable>
              </selectables>. </title>
              <note role="application">The ST author must assign the same Long-term trusted channel
                key material assigned in FCS_STG_EXT.2.1.</note>
            </f-element>
            <f-element>
              <title>The TSF shall verify the integrity of the <selectables>
                <selectable>hash</selectable>
                <selectable>digital signature</selectable>
                <selectable>MAC</selectable>
              </selectables> of the stored key prior to use of the key. </title>
              <note role="application">This requirement is not applicable to derived keys that are not
                stored. It is not expected that a single key will be protected from corruption by
                multiple of these methods; however, a product may use one integrity-protection method
                for one type of key and a different method for other types of keys. The explicit
                Evaluation Activities for each of the options will be addressed in each of the
                requirements (FCS_COP.1.1/HASH, FCS_COP.1.1/KEYHMAC). <htm:br/><htm:br/> Key Wrapping
                shall be implemented per SP800-38F.<htm:br/><htm:br/> The documentation of the
                product's encryption key management should be detailed enough that, after reading, the
                evaluator will thoroughly understand the product's key management and how it meets the
                requirements to ensure the keys are adequately protected. This documentation should
                include an essay and diagram(s). This documentation is not required to be part of the
                TSS - it can be submitted as a separate document and marked as developer proprietary. </note>
              <aactivity>
                <TSS>The evaluator shall examine the key hierarchy description in the TSS section to
                  verify that each encrypted key is integrity protected according to one of the
                  options in FCS_STG_EXT.3. </TSS>
              </aactivity>
            </f-element>
          </f-component>
        </subsection>

	      
	      
	      
	      
	      <f-component cc-id="fqq_qqq.4" name="UQQQQQ" status="sel-based">
          <selection-depends req="a-unique-id" ids="aaa"/>
          <f-element>
            <title> The TOE shall do something great.</title>
            <note role="application"></note>
            <aactivity>
              <TSS>
Activities assoiated with the TSS.
              </TSS>
	    </aactivity>
          </f-element>
        </f-component>
			
        <f-component cc-id="fqq_qqq.6" name="WQQQQQ">
          <depends on="implements" ref-id="a-feature-id"/>
          <f-element>
            <title> The TOE shall do something with regards to some implementation.</title>
            <note role="application"></note>
            <aactivity>
              <TSS>
Activities assoiated with the TSS.
              </TSS>
	    </aactivity>
          </f-element>
        </f-component>
      </subsection>

      <subsection title="Security Management (FMT)" id="fmt-2">
          <f-component cc-id="fmt_smf.1" iteration="HOST" name="Specification of Management Functions (EDR Management of Host Agent)">
            <f-element>
              <title>The EDR shall be capable of performing the following functions that control
                behavior of the Host Agent:<h:br/>
                <management-function-set default="O">
                  <manager cid="a">Administrator</manager>
                  <manager cid="s">SOC Analyst</manager>
                  <manager cid="u">Read-Only User</manager>
                  <management-function>
                    <text>Configure the time frame for sending Host Agent data to the EDR
                        <assignable>list of configurable time frames</assignable>
                    </text>
                    <M ref="a"/><O ref="s"/><_ ref="u"/>
                  </management-function>
                  <management-function>
                    <text>Assign a label or tag to categorize or group individual endpoint systems </text>
                    <M ref="a"/><O ref="s"/><_ ref="u"/>
                  </management-function>
                </management-function-set>
              </title>
              <note role="application">This requirement captures all the configuration
                functionality the EDR provides the administrator to configure the
                EDR Host Agents. <h:br/><h:br/>
              Chart legend: X = Mandatory, O = Optional, - = N/A</note>
              <aactivity>
                <TSS>The evaluator shall verify the ST contains a list of roles and what functions they can perform.  
                  The evaluator shall verify the list matches the chart in the requirement.</TSS>
                <Guidance>The evaluator shall review the operational guidance to verify that the EDR has
                documented capabilities to perform the management functions.</Guidance>
                <Tests>The evaluator shall perform the below tests:
                 <testlist>
                   <test>The evaluator shall modify the time frame for sending Host Agent data to the EDR
                   and verify that an affected Host Agent is sending data at the intended interval.</test>
                   <test>The evaluator shall tag or categorize a group of individual endpoint systems and
                   verify that the tag or categorization persists within the EDR management dashboard for
                   other users.</test>
                   <test>The evaluator shall attempt each function with each role and verify access conforms with the chart in the requirement.</test>
                 </testlist>
                </Tests>
              </aactivity>
            </f-element>
          </f-component>
         </subsection> 
                
    </section>
    <section title="Security Assurance Requirements" id="SARs">
      The Security Objectives in 
      <secref linkend="obj"/> were constructed to address threats identified in
      <secref linkend="threats"/>. The Security Functional Requirements (<abbr linkend="SFR"/>s)
      in <secref linkend="SFRs"/> are a formal instantiation of the Security Objectives. The PP
      identifies the Security Assurance Requirements (<abbr linkend="SAR"/>s) to frame the extent to
      which the evaluator assesses the documentation applicable for the evaluation and performs
      independent testing. <h:br/> This section lists the set of <abbr linkend="SAR"/>s from CC part 3
      that are required in evaluations against this PP. Individual Assurance Activities
      <!--(AAs). Never use these again --> to be performed are specified both in <secref
        linkend="req"/> as well as in this section. <h:br/> The general model for evaluation of <abbr
        linkend="OS"/>s against STs written to conform to this PP is as follows: <h:br/> After the
        <abbr linkend="ST"/> has been approved for evaluation, the <abbr class="expanded"
        title="Information Technology Security Evaluation Facility">ITSEF</abbr> will obtain the
        <abbr linkend="OS"/>, supporting environmental IT, and the administrative/user guides for
      the OS. The ITSEF is expected to perform actions mandated by the Common Evaluation
      Methodology (CEM) for the ASE and ALC SARs. The ITSEF also performs the Assurance Activities
      contained within <secref linkend="req"/>, which are intended to be an interpretation of the
      other CEM assurance requirements as they apply to the specific technology instantiated in the
      OS. The Assurance Activities that are captured in <secref linkend="req"/> also provide
      clarification as to what the developer needs to provide to demonstrate the OS is compliant
      with the PP. <subsection title="Class ASE: Security Target" id="ase">As per ASE activities
        defined in <cite linkend="bibCEM"/>.</subsection>
      <subsection title="Class ADV: Development" id="adv">The information about the <abbr
          linkend="OS"/> is contained in the guidance documentation available to the end user as
        well as the <abbr linkend="TSS"/> portion of the <abbr linkend="ST"/>. The <abbr
          linkend="OS"/> developer must concur with the description of the product that is
        contained in the TSS as it relates to the functional requirements. The Assurance Activities
        contained in <secref linkend="SFRs"/> should provide the <abbr linkend="ST"/> authors with
        sufficient information to determine the appropriate content for the TSS section.
          <a-component cc-id="adv_fsp.1" name="Basic Functional Specification (ADV_FSP.1)">The
          functional specification describes the <abbr title="TSF Interface">TSFI</abbr>s. It is not
          necessary to have a formal or complete specification of these interfaces. Additionally,
          because <abbr linkend="OS"/>s conforming to this PP will necessarily have interfaces to
          the Operational Environment that are not directly invokable by <abbr linkend="OS"/>
          users, there is little point specifying that such interfaces be described in and of
          themselves since only indirect testing of such interfaces may be possible. For this PP,
          the activities for this family should focus on understanding the interfaces presented in
          the <abbr linkend="TSS"/> in response to the functional requirements and the interfaces
          presented in the AGD documentation. No additional “functional specification” documentation
          is necessary to satisfy the assurance activities specified. The interfaces that need to be
          evaluated are characterized through the information needed to perform the assurance
          activities listed, rather than as an independent, abstract list. 
            <a-element type="D">
              <title>The developer shall provide a functional specification.</title>
            </a-element>
            <a-element type="C">
              <title>The developer shall provide a tracing from the functional specification to the
              SFRs.</title>
              <note role="application">As indicated in the introduction to this section, the
              functional specification is comprised of the information contained in the AGD_OPE and
              AGD_PRE documentation. The developer may reference a website accessible to application
              developers and the evaluator. The assurance activities in the functional requirements
              point to evidence that should exist in the documentation and <abbr linkend="TSS"/>
              section; since these are directly associated with the SFRs, the tracing in element
              ADV_FSP.1.2D is implicitly already done and no additional documentation is
              necessary.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The functional specification shall describe the purpose and method of use for
              each SFR-enforcing and SFR-supporting <abbr title="TSF Interface">TSFI</abbr>.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall identify all parameters associated with each
              SFR-enforcing and SFR-supporting <abbr title="TSF Interface">TSFI</abbr>.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall provide rationale for the implicit
              categorization of interfaces as SFR-non-interfering.</title>
            </a-element>
            <a-element type="C">
              <title>
		The tracing shall demonstrate that the SFRs trace to 
		<abbr title="TSF Interface">TSFI</abbr>s 
		in the functional specification.
	      </title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall determine that the functional specification is an accurate
              and complete instantiation of the SFRs.</title>
              <aactivity>There are no specific assurance activities associated with these SARs, except
              ensuring the information is provided. The functional specification documentation is
              provided to support the evaluation activities described in <secref linkend="SFRs"/>, and
              other activities described for AGD, ATE, and AVA SARs. The requirements on the content
              of the functional specification information is implicitly assessed by virtue of the
              other assurance activities being performed; if the evaluator is unable to perform an
              activity because there is insufficient interface information, then an adequate
              functional specification has not been provided.
	      </aactivity>
            </a-element>
	  
        </a-component>
      </subsection>
      <subsection id="agd" title="Class AGD: Guidance Documentation">The guidance documents will be
        provided with the <abbr linkend="ST"/>. Guidance must include a description of how the IT
        personnel verifies that the Operational Environment can fulfill its role for the security
        functionality. The documentation should be in an informal style and readable by the IT
        personnel. Guidance must be provided for every operational environment that the product
        supports as claimed in the <abbr linkend="ST"/>. This guidance includes instructions to
        successfully install the <abbr linkend="TSF"/> in that environment; and Instructions to
        manage the security of the <abbr linkend="TSF"/> as a product and as a component of the
        larger operational environment. Guidance pertaining to particular security functionality is
        also provided; requirements on such guidance are contained in the assurance activities
        specified with each requirement. 
	<a-component cc-id="agd_ope.1" name="Operational User Guidance (AGD_OPE.1)">
	    <a-element type="D">
	      <title>The developer shall provide operational user guidance.</title>
	      <note role="application">The operational user guidance does not have to be contained in a
	      single document. Guidance to users, administrators and application developers can be
              spread among documents or web pages. 
	      Rather than repeat information here, the developer should
              review the assurance activities for this component to ascertain the specifics of the
              guidance that the evaluator will be checking for. This will provide the necessary
              information for the preparation of acceptable guidance.</note>
            </a-element>
          
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the
              user-accessible functions and privileges that should be controlled in a secure
              processing environment, including appropriate warnings.</title>
              <note role="application">User and administrator are to be considered in the definition
              of user role.</note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, how to use the
              available interfaces provided by the <abbr linkend="OS"/> in a secure manner.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the available
              functions and interfaces, in particular all security parameters under the control of
              the user, indicating secure values as appropriate.</title>
              <note role="application">
		This portion of the operational user guidance should be presented
		in the form of a checklist that can be quickly executed by IT personnel (or end-users, 
		when necessary) and suitable for use in compliance activities.
		When possible, this guidance is to be expressed in the eXtensible Configuration 
		Checklist Description Format (XCCDF) to
		support security automation.  
		Minimally, it should be presented in a structured 
		format which includes a title for each configuration item, 
		instructions for achieving the secure configuration, and any relevant rationale.  
              </note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, clearly present each
              type of security-relevant event relative to the user-accessible functions that need to
              be performed, including changing the security characteristics of entities under the
              control of the <abbr linkend="TSF"/>.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall identify all possible modes of operation of
              the <abbr linkend="OS"/> (including operation following failure or operational
              error), their consequences, and implications for maintaining secure operation.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, describe the security
              measures to be followed in order to fulfill the security objectives for the
              operational environment as described in the <abbr linkend="ST"/>.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall be clear and reasonable.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence. </title>
              <aactivity>Some of the contents of the operational guidance are verified by the
              assurance activities in <secref linkend="SFRs"/> and evaluation of the <abbr
              linkend="OS"/> according to the <cite linkend="bibCEM"/>. The following additional
              information is also required. If cryptographic functions are provided by the <abbr
              linkend="OS"/>, the operational guidance shall contain instructions for configuring
              the cryptographic engine associated with the evaluated configuration of the <abbr
              linkend="OS"/>. It shall provide a warning to the administrator that use of other
              cryptographic engines was not evaluated nor tested during the CC evaluation of the
              <abbr linkend="OS"/>. The documentation must describe the process for verifying
              updates to the <abbr linkend="OS"/> by verifying a digital signature – this may be
              done by the <abbr linkend="OS"/> or the underlying platform. The evaluator will
              verify that this process includes the following steps: Instructions for obtaining the
              update itself. This should include instructions for making the update accessible to
              the <abbr linkend="OS"/> (e.g., placement in a specific directory). Instructions for
              initiating the update process, as well as discerning whether the process was
              successful or unsuccessful. This includes generation of the hash/digital signature.
              The <abbr linkend="OS"/> will likely contain security functionality that does not
              fall in the scope of evaluation under this PP. The operational guidance shall make it
              clear to an administrator which security functionality is covered by the evaluation
              activities. </aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="agd_pre.1" name="Preparative Procedures (AGD_PRE.1)">
            <a-element type="D">
              <title>The developer shall provide the <abbr linkend="OS"/>, including its preparative
              procedures.</title>
              <note role="application">As with the operational guidance, the developer should look to
              the assurance activities to determine the required content with respect to preparative
              procedures.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              acceptance of the delivered <abbr linkend="OS"/> in accordance with the developer's
              delivery procedures.</title>
            </a-element>
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              installation of the <abbr linkend="OS"/> and for the secure preparation of the
              operational environment in accordance with the security objectives for the operational
              environment as described in the <abbr linkend="ST"/>.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall apply the preparative procedures to confirm that the <abbr
              linkend="OS"/> can be prepared securely for operation.</title>
              <aactivity>As indicated in the introduction above, there are significant expectations
              with respect to the documentation—especially when configuring the operational
              environment to support <abbr linkend="OS"/> functional requirements. The evaluator
              shall check to ensure that the guidance provided for the <abbr linkend="OS"/>
              adequately addresses all platforms claimed for the <abbr linkend="OS"/> in the <abbr
              linkend="ST"/>. </aactivity>
            </a-element>
	  
        </a-component>
      </subsection>
      <subsection id="alc" title="Class ALC: Life-cycle Support"> At the assurance level provided
        for OSs conformant to this PP, life-cycle support is limited to end-user-visible aspects of
        the life-cycle, rather than an examination of the OS vendor’s development and configuration
        management process. This is not meant to diminish the critical role that a developer’s
        practices play in contributing to the overall trustworthiness of a product; rather, it is a
        reflection on the information to be made available for evaluation at this assurance level.
          <a-component cc-id="alc_cmc.1" name="Labeling of the TOE (ALC_CMC.1)">This component is
          targeted at identifying the <abbr linkend="OS"/> such that it can be distinguished from
          other products or versions from the same vendor and can be easily specified when being
          procured by an end user. 
            <a-element type="D">
              <title>The developer shall provide the <abbr linkend="OS"/> and a reference for the
              <abbr linkend="OS"/>.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The <abbr linkend="OS"/> shall be labeled with a unique reference.</title>
              <note role="application">Unique reference information includes: 
	      <h:ul>
		<h:li>OS Name</h:li>
		<h:li>OS Version</h:li>
		<h:li>OS Description</h:li>
		<h:li>Software Identification (SWID) tags, if available</h:li>
              </h:ul>
              </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The evaluator will check the <abbr linkend="ST"/> to ensure that it contains
              an identifier (such as a product name/version number) that specifically identifies the
              version that meets the requirements of the <abbr linkend="ST"/>. Further, the
              evaluator will check the AGD guidance and <abbr linkend="OS"/> samples received for
              testing to ensure that the version number is consistent with that in the <abbr
              linkend="ST"/>. If the vendor maintains a web site advertising the <abbr
              linkend="OS"/>, the evaluator will examine the information on the web site to
              ensure that the information in the <abbr linkend="ST"/> is sufficient to distinguish
              the product.</aactivity>
            </a-element>
	  
        </a-component>
        <a-component cc-id="alc_cms.1" name="TOE CM Coverage (ALC_CMS.1)">
	  Given the scope of the <abbr linkend="OS"/> and its associated evaluation 
	  evidence requirements, this component’s assurance activities are covered 
	  by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>
		The developer shall provide a configuration list for the  <abbr linkend="OS"/>.
	      </title>
            </a-element>
	  
            <a-element type="C">
              <title>The configuration list shall include the following: the <abbr linkend="OS"/>
              itself; and the evaluation evidence required by the SARs.</title>
            </a-element>
            <a-element type="C">
              <title>The configuration list shall uniquely identify the configuration items.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The "evaluation evidence required by the SARs" in this PP is limited to the
              information in the <abbr linkend="ST"/> coupled with the guidance provided to
              administrators and users under the AGD requirements. By ensuring that the <abbr
              linkend="OS"/> is specifically identified and that this identification is
              consistent in the <abbr linkend="ST"/> and in the AGD guidance (as done in the
              assurance activity for ALC_CMC.1), the evaluator implicitly confirms the information
              required by this component. Life-cycle support is targeted aspects of the developer’s
              life-cycle and instructions to providers of applications for the developer’s devices,
              rather than an in-depth examination of the <abbr linkend="TSF"/> manufacturer’s
              development and configuration management process. This is not meant to diminish the
              critical role that a developer’s practices play in contributing to the overall
              trustworthiness of a product; rather, it’s a reflection on the information to be made
              available for evaluation. <h:br/> The evaluator will ensure that the developer has
              identified (in guidance documentation for application developers concerning the
              targeted platform) one or more development environments appropriate for use in
              developing applications for the developer’s platform. For each of these development
              environments, the developer shall provide information on how to configure the
              environment to ensure that buffer overflow protection mechanisms in the environment(s)
              are invoked (e.g., compiler and linker flags). The evaluator will ensure that this documentation
              also includes an indication of whether such protections are on by default, or have to
              be specifically enabled. The evaluator will ensure that the <abbr linkend="TSF"/> is
              uniquely identified (with respect to other products from the <abbr linkend="TSF"/>
              vendor), and that documentation provided by the developer in association with the
              requirements in the <abbr linkend="ST"/> is associated with the <abbr linkend="TSF"/>
              using this unique identification.</aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="alc_tsu_ext.1" name="Timely Security Updates"> This component requires the
          OS developer, in conjunction with any other necessary parties, to provide information as
          to how the end-user devices are updated to address security issues in a timely manner. The
          documentation describes the process of providing updates to the public from the time a
          security flaw is reported/discovered, to the time an update is released. This description
          includes the parties involved (e.g., the developer, carriers(s)) and the steps that are
          performed (e.g., developer testing, carrier testing), including worst case time periods,
          before an update is made available to the public. 
            <a-element type="D">
              <title>The developer shall provide a description in the TSS of how timely security
              updates are made to the <abbr linkend="OS"/>.</title>
            </a-element>
            <a-element type="D">
              <title> The developer shall provide a description in the TSS of how users are notified
              when updates change security properties or the configuration of the product. </title>
            </a-element>
	  
            <a-element type="C">
              <title>The description shall include the process for creating and deploying security
              updates for the <abbr linkend="OS"/> software.</title>
            </a-element>
            <a-element type="C">
              <title>The description shall include the mechanisms publicly available for reporting
              security issues pertaining to the <abbr linkend="OS"/>.</title>
              <note> The reporting mechanism could include web sites, email addresses, as well as a
              means to protect the sensitive nature of the report (e.g., public keys that could be
              used to encrypt the details of a proof-of-concept exploit). </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all
              requirements for content and presentation of evidence.</title>
              <aactivity> The evaluator will verify that the TSS contains a description of the timely
              security update process used by the developer to create and deploy security updates.
              The evaluator will verify that this description addresses the entire application. The
              evaluator will also verify that, in addition to the OS developer’s process, any
              third-party processes are also addressed in the description. The evaluator will also
              verify that each mechanism for deployment of security updates is described. <h:br/> The
              evaluator will verify that, for each deployment mechanism described for the update
              process, the TSS lists a time between public disclosure of a vulnerability and public
              availability of the security update to the OS patching this vulnerability, to include
              any third-party or carrier delays in deployment. The evaluator will verify that this
              time is expressed in a number or range of days. <h:br/> The evaluator will verify that
              this description includes the publicly available mechanisms (including either an email
              address or website) for reporting security issues related to the OS. The evaluator
              shall verify that the description of this mechanism includes a method for protecting
              the report either using a public key for encrypting email or a trusted channel for a
              website. </aactivity>
            </a-element>
	  
        </a-component>
      </subsection>
      <subsection id="ate" title="Class ATE: Tests">Testing is specified for functional aspects of
        the system as well as aspects that take advantage of design or implementation weaknesses.
        The former is done through the ATE_IND family, while the latter is through the AVA_VAN
        family. At the assurance level specified in this PP, testing is based on advertised
        functionality and interfaces with dependency on the availability of design information. One
        of the primary outputs of the evaluation process is the test report as specified in the
        following requirements. <a-component cc-id="ate_ind.1"
          name="Independent Testing – Conformance (ATE_IND.1)"> Testing is performed to confirm the
          functionality described in the <abbr linkend="TSS"/> as well as the administrative
          (including configuration and operational) documentation provided. The focus of the testing
          is to confirm that the requirements specified in <secref linkend="SFRs"/> being met,
          although some additional testing is specified for SARs in <secref linkend="SARs"/>. The
          Assurance Activities identify the additional testing activities associated with these
          components. The evaluator produces a test report documenting the plan for and results of
          testing, as well as coverage arguments focused on the platform/<abbr linkend="OS"/>
          combinations that are claiming conformance to this PP. Given the scope of the <abbr
            linkend="OS"/> and its associated evaluation evidence requirements, this component’s
          assurance activities are covered by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>The developer shall provide the <abbr linkend="OS"/> for testing.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The <abbr linkend="OS"/> shall be suitable for testing.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator <h:i>shall confirm</h:i> that the information provided meets all
              requirements for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall test a subset of the <abbr linkend="TSF"/> to confirm that
              the <abbr linkend="TSF"/> operates as specified.</title>
              <note role="application">The evaluator will test the OS on the most current fully
              patched version of the platform.</note>
              <aactivity>The evaluator will prepare a test plan and report documenting the testing
              aspects of the system, including any application crashes during testing. The evaluator
              shall determine the root cause of any application crashes and include that information
              in the report. The test plan covers all of the testing actions contained in the <cite
                linkend="bibCEM"/> and the body of this PP’s Assurance Activities. <h:br/> While it is
              not necessary to have one test case per test listed in an Assurance Activity, the
              evaluator must document in the test plan that each applicable testing requirement in
              the <abbr linkend="ST"/> is covered. The test plan identifies the platforms to be
              tested, and for those platforms not included in the test plan but included in the
                <abbr linkend="ST"/>, the test plan provides a justification for not testing the
              platforms. This justification must address the differences between the tested
              platforms and the untested platforms, and make an argument that the differences do not
              affect the testing to be performed. It is not sufficient to merely assert that the
              differences have no affect; rationale must be provided. If all platforms claimed in
              the <abbr linkend="ST"/> are tested, then no rationale is necessary. The test plan
              describes the composition of each platform to be tested, and any setup that is
              necessary beyond what is contained in the AGD documentation. It should be noted that
              the evaluator is expected to follow the AGD documentation for installation and setup
              of each platform either as part of a test or as a standard pre-test condition. This
              may include special test drivers or tools. For each driver or tool, an argument (not
              just an assertion) should be provided that the driver or tool will not adversely
              affect the performance of the functionality by the <abbr linkend="OS"/> and its
              platform. <h:br/> This also includes the configuration of the cryptographic engine to be
              used. The cryptographic algorithms implemented by this engine are those specified by
              this PP and used by the cryptographic protocols being evaluated (IPsec, TLS). The test
              plan identifies high-level test objectives as well as the test procedures to be
              followed to achieve those objectives. These procedures include expected results. <h:br/>
              The test report (which could just be an annotated version of the test plan) details
              the activities that took place when the test procedures were executed, and includes
              the actual results of the tests. This shall be a cumulative account, so if there was a
              test run that resulted in a failure; a fix installed; and then a successful re-run of
              the test, the report would show a “fail” and “pass” result (and the supporting
              details), and not just the “pass” result.</aactivity>
            </a-element>
	  
        </a-component>
      </subsection>
      <subsection id="ava" title="Class AVA: Vulnerability Assessment">For the first generation of
        this protection profile, the evaluation lab is expected to survey open sources to discover
        what vulnerabilities have been discovered in these types of products. In most cases, these
        vulnerabilities will require sophistication beyond that of a basic attacker. Until
        penetration tools are created and uniformly distributed to the evaluation labs, the
        evaluator will not be expected to test for these vulnerabilities in the <abbr linkend="OS"
        />. The labs will be expected to comment on the likelihood of these vulnerabilities given
        the documentation provided by the vendor. This information will be used in the development
        of penetration testing tools and for the development of future protection profiles.
        <a-component cc-id="ava_van.1" name="Vulnerability Survey (AVA_VAN.1)">
            <a-element type="D">
              <title>The developer shall provide the <abbr linkend="OS"/> for testing.</title>
            </a-element>
	  
          <a-element type="C">
            <title>The <abbr linkend="OS"/> shall be suitable for testing.</title>
          </a-element>
	  
          <a-element type="E">
            <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
          </a-element>
          <a-element type="E">
            <title>The evaluator shall perform a search of public domain sources to identify
              potential vulnerabilities in the <abbr linkend="OS"/>.</title>
            <note role="application">Public domain sources include the Common Vulnerabilities 
              and Exposures (CVE) dictionary for publicly-known vulnerabilities.  Public domain
              sources also include sites which provide free checking of files for viruses.</note>
            <!-- their Usage statement does not permit us to mention VirusTotal by name without permission -->
          </a-element>
          <a-element type="E">
            <title>The evaluator shall conduct penetration testing, based on the identified
              potential vulnerabilities, to determine that the <abbr linkend="OS"/> is resistant to
              attacks performed by an attacker possessing Basic attack potential.</title>
            <aactivity>The evaluator will generate a report to document their
              findings with respect to this requirement. This report could physically be part of the
              overall test report mentioned in ATE_IND, or a separate document. The evaluator
              performs a search of public information to find vulnerabilities that have been found
              in similar applications with a particular focus on network protocols the application
              uses and document formats it parses. 
              The evaluator documents the sources consulted and
              the vulnerabilities found in the report. 
              <h:br/>
              For each vulnerability found, the evaluator
              either provides a rationale with respect to its non-applicability, or the evaluator
              formulates a test (using the guidelines provided in ATE_IND) to confirm the
              vulnerability, if suitable. Suitability is determined by assessing the attack vector
              needed to take advantage of the vulnerability. If exploiting the vulnerability
              requires expert skills and an electron microscope, for instance, then a test would not
              be suitable and an appropriate justification would be formulated.</aactivity>
          </a-element>
	  
        </a-component>
      </subsection>      
    </section>
  </chapter>

  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="optional" 
  -->
  <appendix title="Optional Requirements" id="optional"> As indicated in <secref linkend="ccl"/>,
    the baseline requirements (those that must be performed by the <abbr linkend="OS"/>) are
    contained in the body of this PP. Additionally, there are three other types of requirements
    specified in <appref linkend="optional"/>, <appref linkend="sel-based"/>, and <appref
      linkend="objective"/>. The first type (in this Appendix) are requirements that can be included
    in the <abbr linkend="ST"/>, but are not required in order for a OS to claim conformance to
    this PP. The second type (in <appref linkend="sel-based"/>) are requirements based on selections
    in the body of the PP: if certain selections are made, then additional requirements in that
    appendix must be included. The third type (in <appref linkend="objective"/> are components that
    are not required in order to conform to this PP, but will be included in the baseline
    requirements in future versions of this PP, so adoption by vendors is encouraged. Note that the
    ST author is responsible for ensuring that requirements that may be associated with those in
      <appref linkend="optional"/>, <appref linkend="sel-based"/>, and <appref linkend="objective"/>
    but are not listed (e.g., FMT-type requirements) are also included in the ST. </appendix>

  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="sel-based" 
  -->
  <appendix title="Selection-Based Requirements" id="sel-based"> As indicated in the introduction to
    this PP, the baseline requirements (those that must be performed by the OS or its underlying
    platform) are contained in the body of this PP. There are additional requirements based on
    selections in the body of the PP: if certain selections are made, then additional requirements
    below will need to be included. </appendix>

  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="objective" 
  -->
  <appendix title="Objective Requirements" id="objective"> This appendix includes requirements that
    specify security functionality which also addresses threats. The requirements are not currently
    mandated in the body of this PP as they describe security functionality not yet widely-available
    in commercial technology. However, these requirements may be included in the ST such that the
    OS is still conformant to this PP, and it is expected that they be included as soon as
    possible. </appendix>

  <appendix title="Inherently Satisfied Requirements" id="satisfiedreqs"> This
	appendix lists requirements that should be considered satisfied by products
	successfully evaluated against this Protection Profile.  
	However, these requirements are not featured explicitly as SFRs and should not be
	included in the <abbr linkend="ST"/>.  
	They are not included as standalone SFRs because it would
	increase the time, cost, and complexity of evaluation.  This approach is permitted
	by <cite linkend="bibCC"/> Part 1, <h:b>8.2 Dependencies between components</h:b>.
    <h:br/>
	This information benefits systems engineering activities which call for inclusion of 
	particular security controls.  Evaluation against the Protection Profile
	provides evidence that these controls are present and have been evaluated.
    <table xmlns="http://www.w3.org/1999/xhtml">
	<tr class="header">
	<td>Requirement</td>
	<td>Rationale for Satisfaction</td>
	</tr>
	<tr>
	<td>FIA_UAU.1 - Timing of authentication</td>
	<td>
	  <linkref linkend="FIA_AFL.1"/> implicitly requires that the OS perform all necessary actions, 
	  including those on behalf of the user who has not been authenticated, 
	  in order to authenticate;
	  therefore it is duplicative to include these actions as a 
	  separate assignment and test.
	</td>
	</tr>
	<tr>
	<td>FIA_UID.1 - Timing of identification</td>
	<td>
	  <linkref linkend="FIA_AFL.1"/> implicitly requires that the OS perform all necessary actions, 
	  including those on behalf of the user who has not been identified, 
	  in order to authenticate;
	  therefore it is duplicative to include these actions as a 
	  separate assignment and test.
	</td>
	</tr>
	<tr>
	<td>FMT_SMR.1 - Security roles</td>
	<td>
	  <linkref linkend="FMT_MOF_EXT.1"/> specifies role-based management functions that implicitly defines
	  user and privileged accounts; 
	  therefore, it is duplicative to include separate role requirements.
	</td>
	</tr>
	<tr>
	<td>FPT_STM.1 - Reliable time stamps</td>
	<td>
	  <linkref linkend="FAU_GEN.1.2"/> explicitly requires that the OS associate timestamps with audit records;
	  therefore it is duplicative to include a separate timestamp requirement.
	</td>
	</tr>
	<tr>
	<td>FTA_SSL.1 - TSF-initiated session locking</td>
	<td>
	  <linkref linkend="FMT_MOF_EXT.1"/> defines requirements for managing session locking;
	  therefore, it is duplicative to include a separate session locking requirement.
	</td>
	</tr>
	<tr>
	<td>FTA_SSL.2 - User-initiated locking</td>
	<td>
	  <linkref linkend="FMT_MOF_EXT.1"/> defines requirements for user-initiated session locking;
	  therefore, it is duplicative to include a separate session locking requirement.
	</td>
	</tr>
	<tr>
	<td>FAU_STG.1 - Protected audit trail storage</td>
	<td>
	  <linkref linkend="FPT_ACF_EXT.1"/> defines a requirement to protect audit logs;
	  therefore, it is duplicative to include a separate protection of audit trail requirements.
	</td>
	</tr>
	<tr>
	<td>FAU_GEN.2 - User identity association</td>
	<td>
	  <linkref linkend="FAU_GEN.1.2"/> explicitly requires that the OS record
	  any user account associated with each event; therefore, it is duplicative
	  to include a separate requirement to associate a user account with each
	  event.
	</td>
	</tr>
	<tr>
	  <td>FAU_SAR.1 - Audit review</td>
	  <td>
	    <linkref linkend="FPT_ACF_EXT.1.2"/> requires that audit logs (and other objects)
	    are protected from reading by unprivileged users; therefore, it is duplicative
	    to include a separate requirement to protect only the audit information.
	  </td>
	</tr>
    </table>

  </appendix>

  <!-- Remove this section if an Entropy Assessment is not needed -->
  <appendix title="Entropy Documentation and Assessment" id="entropyappendix"> This appendix
    describes the required supplementary information for the entropy source used by the OS. <h:br/>
    The documentation of the entropy source should be detailed enough that, after reading, the
    evaluator will thoroughly understand the entropy source and why it can be relied upon to provide
    sufficient entropy. This documentation should include multiple detailed sections: design
    description, entropy justification, operating conditions, and health testing. This documentation
    is not required to be part of the TSS. <section id="entropydesign" title="Design Description">
      Documentation shall include the design of the entropy source as a whole, including the
      interaction of all entropy source components. Any information that can be shared regarding the
      design should also be included for any third-party entropy sources that are included in the
      product. <h:br/> The documentation will describe the operation of the entropy source to include,
      how entropy is produced, and how unprocessed (raw) data can be obtained from within the
      entropy source for testing purposes. The documentation should walk through the entropy source
      design indicating where the entropy comes from, where the entropy output is passed next, any
      post-processing of the raw outputs (hash, XOR, etc.), if/where it is stored, and finally, how
      it is output from the entropy source. Any conditions placed on the process (e.g., blocking)
      should also be described in the entropy source design. Diagrams and examples are encouraged.
      <h:br/> This design must also include a description of the content of the security boundary of
      the entropy source and a description of how the security boundary ensures that an adversary
      outside the boundary cannot affect the entropy rate. <h:br/> If implemented, the design
      description shall include a description of how third-party applications can add entropy to the
      RBG. A description of any RBG state saving between power-off and power-on shall be included. </section>
    <section id="entropyjustification" title="Entropy Justification"> There should be a technical
      argument for where the unpredictability in the source comes from and why there is confidence
      in the entropy source delivering sufficient entropy for the uses made of the RBG output (by
      this particular OS). This argument will include a description of the expected min-entropy
      rate (i.e. the minimum entropy (in bits) per bit or byte of source data) and explain that
      sufficient entropy is going into the OS randomizer seeding process. This discussion will be
      part of a justification for why the entropy source can be relied upon to produce bits with
      entropy. <h:br/> The amount of information necessary to justify the expected min-entropy rate
      depends on the type of entropy source included in the product. <h:br/> For developer provided
      entropy sources, in order to justify the min-entropy rate, it is expected that a large number
      of raw source bits will be collected, statistical tests will be performed, and the min-entropy
      rate determined from the statistical tests. While no particular statistical tests are required
      at this time, it is expected that some testing is necessary in order to determine the amount
      of min-entropy in each output. <h:br/> For third-party provided entropy sources, in which the
      OS vendor has limited access to the design and raw entropy data of the source, the
      documentation will indicate an estimate of the amount of min-entropy obtained from this
      third-party source. It is acceptable for the vendor to “assume” an amount of min-entropy,
      however, this assumption must be clearly stated in the documentation provided. In particular,
      the min-entropy estimate must be specified and the assumption included in the ST. <h:br/>
      Regardless of type of entropy source, the justification will also include how the DRBG is
      initialized with the entropy stated in the ST, for example by verifying that the min-entropy
      rate is multiplied by the amount of source data used to seed the DRBG or that the rate of
      entropy expected based on the amount of source data is explicitly stated and compared to the
      statistical rate. If the amount of source data used to seed the DRBG is not clear or the
      calculated rate is not explicitly related to the seed, the documentation will not be
      considered complete. <h:br/> The entropy justification shall not include any data added from any
      third-party application or from any state saving between restarts. </section>
    <section id="entropyoperatingconditions" title="Operating Conditions"> The entropy rate may be
      affected by conditions outside the control of the entropy source itself. For example, voltage,
      frequency, temperature, and elapsed time after power-on are just a few of the factors that may
      affect the operation of the entropy source. As such, documentation will also include the range
      of operating conditions under which the entropy source is expected to generate random data. It
      will clearly describe the measures that have been taken in the system design to ensure the
      entropy source continues to operate under those conditions. Similarly, documentation shall
      describe the conditions under which the entropy source is known to malfunction or become
      inconsistent. Methods used to detect failure or degradation of the source shall be included. </section>
    <section id="entropyhealthtesting" title="Health Testing"> More specifically, all entropy source
      health tests and their rationale will be documented. This includes a description of the health
      tests, the rate and conditions under which each health test is performed (e.g., at start,
      continuously, or on-demand), the expected results for each health test, and rationale
      indicating why each test is believed to be appropriate for detecting one or more failures in
      the entropy source. </section>
  </appendix>

  <appendix title="References" id="biblio">
    <bibliography>
      <entry id="bibCC">
        <tag>CC</tag>
        <description>Common Criteria for Information Technology Security Evaluation - <h:ul>
            <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R4.pdf">Part
                1: Introduction and General Model</h:a>, CCMB-2012-09-001, Version 3.1 Revision 4,
              September 2012.</h:li>
            <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART2V3.1R4.pdf">Part
                2: Security Functional Components</h:a>, CCMB-2012-09-002, Version 3.1 Revision 4,
              September 2012.</h:li>
            <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART3V3.1R4.pdf">Part
                3: Security Assurance Components</h:a>, CCMB-2012-09-003, Version 3.1 Revision 4,
              September 2012.</h:li>
          </h:ul></description>
      </entry>
      <entry id="bibCEM">
        <tag>CEM</tag>
        <description>
          <h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CEMV3.1R4.pdf">Common
            Evaluation Methodology for Information Technology Security - Evaluation Methodology</h:a>,
          CCMB-2012-09-004, Version 3.1, Revision 4, September 2012. </description>
      </entry>
      <entry id="bibCESG">
        <tag>CESG</tag>
        <description>CESG - <h:a
            href="https://www.gov.uk/government/collections/end-user-devices-security-guidance"> End
            User Devices Security and Configuration Guidance</h:a></description>
      </entry>
      <entry id="bibCSA">
        <tag>CSA</tag>
        <description>
          <h:a href="http://csrc.nist.gov/groups/SMA/ispab/documents/csa_87.txt">Computer Security Act
            of 1987</h:a>, H.R. 145, June 11, 1987. </description>
      </entry>
      <entry id="bibOMB">
        <tag>OMB</tag>
        <description>
          <h:a href="http://www.whitehouse.gov/sites/default/files/omb/memoranda/fy2006/m06-19.pdf"
            >Reporting Incidents Involving Personally Identifiable Information and Incorporating the
            Cost for Security in Agency Information Technology Investments</h:a>, OMB M-06-19, July
          12, 2006. </description>
      </entry>
    </bibliography>
  </appendix>

  <appendix title="Acronyms" id="acronyms">
   <acronyms/>
  </appendix>



  <implements>
    <feature id="a-feature-id" title="Widget Thing">
      <description> If the TOE includes the widget thing, all of the following SFRs must be claimed: <h:ul><h:li> FQQ_QQQ.6</h:li></h:ul>
      </description>
    </feature>
  </implements>
</PP>

